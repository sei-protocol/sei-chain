// Code generated by metricsgen. DO NOT EDIT.

package mempool

import (
	"github.com/go-kit/kit/metrics/discard"
	prometheus "github.com/go-kit/kit/metrics/prometheus"
	stdprometheus "github.com/prometheus/client_golang/prometheus"
)

func PrometheusMetrics(namespace string, labelsAndValues ...string) *Metrics {
	labels := []string{}
	for i := 0; i < len(labelsAndValues); i += 2 {
		labels = append(labels, labelsAndValues[i])
	}
	return &Metrics{
		Size: prometheus.NewGaugeFrom(stdprometheus.GaugeOpts{
			Namespace: namespace,
			Subsystem: MetricsSubsystem,
			Name:      "size",
			Help:      "Number of uncommitted transactions in the mempool.",
		}, labels).With(labelsAndValues...),
		PendingSize: prometheus.NewGaugeFrom(stdprometheus.GaugeOpts{
			Namespace: namespace,
			Subsystem: MetricsSubsystem,
			Name:      "pending_size",
			Help:      "Number of pending transactions in mempool",
		}, labels).With(labelsAndValues...),
		CacheSize: prometheus.NewGaugeFrom(stdprometheus.GaugeOpts{
			Namespace: namespace,
			Subsystem: MetricsSubsystem,
			Name:      "cache_size",
			Help:      "Number of cached transactions in the mempool cache.",
		}, labels).With(labelsAndValues...),
		TxSizeBytes: prometheus.NewCounterFrom(stdprometheus.CounterOpts{
			Namespace: namespace,
			Subsystem: MetricsSubsystem,
			Name:      "tx_size_bytes",
			Help:      "Accumulated transaction sizes in bytes.",
		}, labels).With(labelsAndValues...),
		TotalTxsSizeBytes: prometheus.NewGaugeFrom(stdprometheus.GaugeOpts{
			Namespace: namespace,
			Subsystem: MetricsSubsystem,
			Name:      "total_txs_size_bytes",
			Help:      "Total current mempool uncommitted txs bytes",
		}, labels).With(labelsAndValues...),
		DuplicateTxMaxOccurrences: prometheus.NewGaugeFrom(stdprometheus.GaugeOpts{
			Namespace: namespace,
			Subsystem: MetricsSubsystem,
			Name:      "duplicate_tx_max_occurrences",
			Help:      "Track max number of occurrences for a duplicate tx",
		}, labels).With(labelsAndValues...),
		DuplicateTxTotalOccurrences: prometheus.NewGaugeFrom(stdprometheus.GaugeOpts{
			Namespace: namespace,
			Subsystem: MetricsSubsystem,
			Name:      "duplicate_tx_total_occurrences",
			Help:      "Track the total number of occurrences for all duplicate txs",
		}, labels).With(labelsAndValues...),
		NumberOfDuplicateTxs: prometheus.NewGaugeFrom(stdprometheus.GaugeOpts{
			Namespace: namespace,
			Subsystem: MetricsSubsystem,
			Name:      "number_of_duplicate_txs",
			Help:      "Track the number of unique duplicate transactions",
		}, labels).With(labelsAndValues...),
		NumberOfNonDuplicateTxs: prometheus.NewGaugeFrom(stdprometheus.GaugeOpts{
			Namespace: namespace,
			Subsystem: MetricsSubsystem,
			Name:      "number_of_non_duplicate_txs",
			Help:      "Track the number of unique new tx transactions",
		}, labels).With(labelsAndValues...),
		NumberOfSuccessfulCheckTxs: prometheus.NewCounterFrom(stdprometheus.CounterOpts{
			Namespace: namespace,
			Subsystem: MetricsSubsystem,
			Name:      "number_of_successful_check_txs",
			Help:      "Track the number of checkTx calls",
		}, labels).With(labelsAndValues...),
		NumberOfFailedCheckTxs: prometheus.NewCounterFrom(stdprometheus.CounterOpts{
			Namespace: namespace,
			Subsystem: MetricsSubsystem,
			Name:      "number_of_failed_check_txs",
			Help:      "Track the number of failed checkTx calls",
		}, labels).With(labelsAndValues...),
		NumberOfLocalCheckTx: prometheus.NewCounterFrom(stdprometheus.CounterOpts{
			Namespace: namespace,
			Subsystem: MetricsSubsystem,
			Name:      "number_of_local_check_tx",
			Help:      "Track the number of checkTx from local removed tx",
		}, labels).With(labelsAndValues...),
		FailedTxs: prometheus.NewCounterFrom(stdprometheus.CounterOpts{
			Namespace: namespace,
			Subsystem: MetricsSubsystem,
			Name:      "failed_txs",
			Help:      "Number of failed transactions.",
		}, labels).With(labelsAndValues...),
		RejectedTxs: prometheus.NewCounterFrom(stdprometheus.CounterOpts{
			Namespace: namespace,
			Subsystem: MetricsSubsystem,
			Name:      "rejected_txs",
			Help:      "Number of rejected transactions.",
		}, labels).With(labelsAndValues...),
		EvictedTxs: prometheus.NewCounterFrom(stdprometheus.CounterOpts{
			Namespace: namespace,
			Subsystem: MetricsSubsystem,
			Name:      "evicted_txs",
			Help:      "Number of evicted transactions.",
		}, labels).With(labelsAndValues...),
		ExpiredTxs: prometheus.NewCounterFrom(stdprometheus.CounterOpts{
			Namespace: namespace,
			Subsystem: MetricsSubsystem,
			Name:      "expired_txs",
			Help:      "Number of expired transactions.",
		}, labels).With(labelsAndValues...),
		RecheckTimes: prometheus.NewCounterFrom(stdprometheus.CounterOpts{
			Namespace: namespace,
			Subsystem: MetricsSubsystem,
			Name:      "recheck_times",
			Help:      "Number of times transactions are rechecked in the mempool.",
		}, labels).With(labelsAndValues...),
		RemovedTxs: prometheus.NewCounterFrom(stdprometheus.CounterOpts{
			Namespace: namespace,
			Subsystem: MetricsSubsystem,
			Name:      "removed_txs",
			Help:      "Number of removed tx from mempool",
		}, labels).With(labelsAndValues...),
		InsertedTxs: prometheus.NewCounterFrom(stdprometheus.CounterOpts{
			Namespace: namespace,
			Subsystem: MetricsSubsystem,
			Name:      "inserted_txs",
			Help:      "Number of txs inserted to mempool",
		}, labels).With(labelsAndValues...),
		CheckTxPriorityDistribution: prometheus.NewHistogramFrom(stdprometheus.HistogramOpts{
			Namespace: namespace,
			Subsystem: MetricsSubsystem,
			Name:      "check_tx_priority_distribution",
			Help:      "CheckTxPriorityDistribution is a histogram of the priority of transactions submitted via CheckTx, labeled by whether a priority hint was provided, whether the transaction was submitted locally (i.e. no sender node ID), and whether an error occured during transaction priority determination.  Note that the priority is normalized as a float64 value between zero and maximum tx priority.",

			Buckets: stdprometheus.ExponentialBucketsRange(0.000001, 1.0, 20),
		}, append(labels, "hint", "local", "error")).With(labelsAndValues...),
		CheckTxDroppedByPriorityHint: prometheus.NewCounterFrom(stdprometheus.CounterOpts{
			Namespace: namespace,
			Subsystem: MetricsSubsystem,
			Name:      "check_tx_dropped_by_priority_hint",
			Help:      "CheckTxDroppedByPriorityHint is the number of transactions that were dropped due to low priority based on the priority hint.",
		}, labels).With(labelsAndValues...),
		CheckTxMetDropUtilisationThreshold: prometheus.NewCounterFrom(stdprometheus.CounterOpts{
			Namespace: namespace,
			Subsystem: MetricsSubsystem,
			Name:      "check_tx_met_drop_utilisation_threshold",
			Help:      "CheckTxMetDropUtilisationThreshold is the number of transactions for which CheckTx was executed while the mempool utilisation was above the configured threshold. Note that not all such transactions are dropped, only those that also have a low priority.",
		}, labels).With(labelsAndValues...),
	}
}

func NopMetrics() *Metrics {
	return &Metrics{
		Size:                               discard.NewGauge(),
		PendingSize:                        discard.NewGauge(),
		CacheSize:                          discard.NewGauge(),
		TxSizeBytes:                        discard.NewCounter(),
		TotalTxsSizeBytes:                  discard.NewGauge(),
		DuplicateTxMaxOccurrences:          discard.NewGauge(),
		DuplicateTxTotalOccurrences:        discard.NewGauge(),
		NumberOfDuplicateTxs:               discard.NewGauge(),
		NumberOfNonDuplicateTxs:            discard.NewGauge(),
		NumberOfSuccessfulCheckTxs:         discard.NewCounter(),
		NumberOfFailedCheckTxs:             discard.NewCounter(),
		NumberOfLocalCheckTx:               discard.NewCounter(),
		FailedTxs:                          discard.NewCounter(),
		RejectedTxs:                        discard.NewCounter(),
		EvictedTxs:                         discard.NewCounter(),
		ExpiredTxs:                         discard.NewCounter(),
		RecheckTimes:                       discard.NewCounter(),
		RemovedTxs:                         discard.NewCounter(),
		InsertedTxs:                        discard.NewCounter(),
		CheckTxPriorityDistribution:        discard.NewHistogram(),
		CheckTxDroppedByPriorityHint:       discard.NewCounter(),
		CheckTxMetDropUtilisationThreshold: discard.NewCounter(),
	}
}
