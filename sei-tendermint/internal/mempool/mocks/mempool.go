// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	abcitypes "github.com/tendermint/tendermint/abci/types"

	mempool "github.com/tendermint/tendermint/internal/mempool"

	mock "github.com/stretchr/testify/mock"

	types "github.com/tendermint/tendermint/types"
)

// Mempool is an autogenerated mock type for the Mempool type
type Mempool struct {
	mock.Mock
}

// CheckTx provides a mock function with given fields: ctx, tx, callback, txInfo
func (_m *Mempool) CheckTx(ctx context.Context, tx types.Tx, callback func(*abcitypes.ResponseCheckTx), txInfo mempool.TxInfo) error {
	ret := _m.Called(ctx, tx, callback, txInfo)

	if len(ret) == 0 {
		panic("no return value specified for CheckTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.Tx, func(*abcitypes.ResponseCheckTx), mempool.TxInfo) error); ok {
		r0 = rf(ctx, tx, callback, txInfo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EnableTxsAvailable provides a mock function with no fields
func (_m *Mempool) EnableTxsAvailable() {
	_m.Called()
}

// Flush provides a mock function with no fields
func (_m *Mempool) Flush() {
	_m.Called()
}

// FlushAppConn provides a mock function with given fields: _a0
func (_m *Mempool) FlushAppConn(_a0 context.Context) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for FlushAppConn")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTxsForKeys provides a mock function with given fields: txKeys
func (_m *Mempool) GetTxsForKeys(txKeys []types.TxKey) types.Txs {
	ret := _m.Called(txKeys)

	if len(ret) == 0 {
		panic("no return value specified for GetTxsForKeys")
	}

	var r0 types.Txs
	if rf, ok := ret.Get(0).(func([]types.TxKey) types.Txs); ok {
		r0 = rf(txKeys)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Txs)
		}
	}

	return r0
}

// HasTx provides a mock function with given fields: txKey
func (_m *Mempool) HasTx(txKey types.TxKey) bool {
	ret := _m.Called(txKey)

	if len(ret) == 0 {
		panic("no return value specified for HasTx")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(types.TxKey) bool); ok {
		r0 = rf(txKey)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Lock provides a mock function with no fields
func (_m *Mempool) Lock() {
	_m.Called()
}

// ReapMaxBytesMaxGas provides a mock function with given fields: maxBytes, maxGas, maxGasEstimated
func (_m *Mempool) ReapMaxBytesMaxGas(maxBytes int64, maxGas int64, maxGasEstimated int64) types.Txs {
	ret := _m.Called(maxBytes, maxGas, maxGasEstimated)

	if len(ret) == 0 {
		panic("no return value specified for ReapMaxBytesMaxGas")
	}

	var r0 types.Txs
	if rf, ok := ret.Get(0).(func(int64, int64, int64) types.Txs); ok {
		r0 = rf(maxBytes, maxGas, maxGasEstimated)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Txs)
		}
	}

	return r0
}

// ReapMaxTxs provides a mock function with given fields: max
func (_m *Mempool) ReapMaxTxs(max int) types.Txs {
	ret := _m.Called(max)

	if len(ret) == 0 {
		panic("no return value specified for ReapMaxTxs")
	}

	var r0 types.Txs
	if rf, ok := ret.Get(0).(func(int) types.Txs); ok {
		r0 = rf(max)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Txs)
		}
	}

	return r0
}

// RemoveTxByKey provides a mock function with given fields: txKey
func (_m *Mempool) RemoveTxByKey(txKey types.TxKey) error {
	ret := _m.Called(txKey)

	if len(ret) == 0 {
		panic("no return value specified for RemoveTxByKey")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(types.TxKey) error); ok {
		r0 = rf(txKey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SafeGetTxsForKeys provides a mock function with given fields: txKeys
func (_m *Mempool) SafeGetTxsForKeys(txKeys []types.TxKey) (types.Txs, []types.TxKey) {
	ret := _m.Called(txKeys)

	if len(ret) == 0 {
		panic("no return value specified for SafeGetTxsForKeys")
	}

	var r0 types.Txs
	var r1 []types.TxKey
	if rf, ok := ret.Get(0).(func([]types.TxKey) (types.Txs, []types.TxKey)); ok {
		return rf(txKeys)
	}
	if rf, ok := ret.Get(0).(func([]types.TxKey) types.Txs); ok {
		r0 = rf(txKeys)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Txs)
		}
	}

	if rf, ok := ret.Get(1).(func([]types.TxKey) []types.TxKey); ok {
		r1 = rf(txKeys)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]types.TxKey)
		}
	}

	return r0, r1
}

// Size provides a mock function with no fields
func (_m *Mempool) Size() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Size")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// SizeBytes provides a mock function with no fields
func (_m *Mempool) SizeBytes() int64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SizeBytes")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// TxStore provides a mock function with no fields
func (_m *Mempool) TxStore() *mempool.TxStore {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TxStore")
	}

	var r0 *mempool.TxStore
	if rf, ok := ret.Get(0).(func() *mempool.TxStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mempool.TxStore)
		}
	}

	return r0
}

// TxsAvailable provides a mock function with no fields
func (_m *Mempool) TxsAvailable() <-chan struct{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TxsAvailable")
	}

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// Unlock provides a mock function with no fields
func (_m *Mempool) Unlock() {
	_m.Called()
}

// Update provides a mock function with given fields: ctx, blockHeight, blockTxs, txResults, newPreFn, newPostFn, recheck
func (_m *Mempool) Update(ctx context.Context, blockHeight int64, blockTxs types.Txs, txResults []*abcitypes.ExecTxResult, newPreFn mempool.PreCheckFunc, newPostFn mempool.PostCheckFunc, recheck bool) error {
	ret := _m.Called(ctx, blockHeight, blockTxs, txResults, newPreFn, newPostFn, recheck)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, types.Txs, []*abcitypes.ExecTxResult, mempool.PreCheckFunc, mempool.PostCheckFunc, bool) error); ok {
		r0 = rf(ctx, blockHeight, blockTxs, txResults, newPreFn, newPostFn, recheck)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMempool creates a new instance of Mempool. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMempool(t interface {
	mock.TestingT
	Cleanup(func())
}) *Mempool {
	mock := &Mempool{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
