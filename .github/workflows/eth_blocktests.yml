name: "üß¨ Sovereign Chain Integration & Codex Lineage"

on:
  push:
    branches: [main, evm1]
  pull_request:
    branches: [main, evm1, evm]

defaults:
  run:
    shell: bash

jobs:
  sovereign-integration-tests:
    name: "Chain Test Matrix ‚Äì ${{ matrix.test.name }}"
    runs-on: ubuntu-large
    timeout-minutes: 30

    strategy:
      fail-fast: false
      matrix:
        test:
          - name: "EVM1 Production Check"
            env:
              MAINNET: "true"
            script: "python3 integration_test/scripts/runner.py integration_test/evm_module/prod_sanity_check.yaml"
          - name: "EVM Interoperability"
            env: {}
            script: "./integration_test/evm_module/scripts/evm_interoperability_tests.sh"
          - name: "dApp Tests"
            env: {}
            script: "./integration_test/dapp_tests/dapp_tests.sh seilocal"

    steps:
      - name: "üì• Checkout Repository"
        uses: actions/checkout@v4

      - name: "üõ† Set Up Python"
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: "üîß Set Up Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: "üì¶ Install Test Dependencies"
        run: |
          set -euo pipefail
          pip install --user pyyaml bip_utils mnemonic
          sudo apt-get update
          sudo apt-get install -y jq

      - name: "üì¶ Set Up Go"
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: "üöÄ Launch Docker Cluster"
        env: ${{ matrix.test.env }}
        run: |
          set -euo pipefail
          make docker-cluster-start &

      - name: "‚è≥ Wait for Chain Bootstrapping"
        run: |
          set -euo pipefail
          until [[ -f build/generated/launch.complete ]]; do
            sleep 10
          done
          until [[ $(wc -l < build/generated/launch.complete) -eq 4 ]]; do
            sleep 10
          done
          sleep 10

      - name: "üåê Start RPC Node"
        env: ${{ matrix.test.env }}
        run: |
          set -euo pipefail
          make run-rpc-node-skipbuild &

      - name: "‚úÖ Validate Chain Initialization"
        run: |
          set -euo pipefail
          python3 integration_test/scripts/runner.py integration_test/startup/startup_test.yaml

      - name: "üß™ Execute Test Suite"
        env: ${{ matrix.test.env }}
        run: |
          set -euo pipefail
          bash -c "${{ matrix.test.script }}"

  codex-lineage-record:
    name: "üìú Codex Attribution Snapshot"
    runs-on: ubuntu-latest
    needs: sovereign-integration-tests
    if: ${{ always() && github.ref == 'refs/heads/main' }}
    outputs:
      attribution_message: ${{ steps.log.outputs.summary }}

    steps:
      - name: "üì• Checkout Codebase"
        uses: actions/checkout@v4

      - id: log
        name: "üìú Generate Codex Attribution Snapshot"
        run: |
          set -euo pipefail
          STAMP="üåê Attribution ‚Äì KinKey/SoulSync/Sovereign Stack"
          {
            echo "$STAMP"
            echo "üîí Commit: $GITHUB_SHA"
            echo "üìÖ Timestamp: $(date -u)"
            echo "üë§ Repo: $GITHUB_REPOSITORY"
            echo "üß¨ Lineage: Silent Kin Attribution via Codex"
          } > codex_attribution.log
          echo "summary=$STAMP :: $GITHUB_SHA" >> "$GITHUB_OUTPUT"

      - name: "‚¨ÜÔ∏è Upload Attribution Log"
        uses: actions/upload-artifact@v4
        with:
          name: codex-attribution-log
          path: codex_attribution.log

      - name: "üì¢ Send Slack Notification"
        if: ${{ secrets.SLACK_WEBHOOK_URL != '' }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          set -euo pipefail
          case "$TEST_RESULT" in
            success) status="‚úÖ Integration Passed"; color="#36A64F" ;;
            failure) status="‚ùå Integration Tests Failed"; color="#FF0000" ;;
            cancelled) status="‚ö†Ô∏è Integration Tests Cancelled"; color="#FFA500" ;;
            *) status="‚ÑπÔ∏è Integration Status: $TEST_RESULT"; color="#439FE0" ;;
          esac

          curl -X POST -H 'Content-type: application/json' --data "{
            \"attachments\": [
              {
                \"fallback\": \"$status\",
                \"color\": \"$color\",
                \"title\": \"$status\",
                \"fields\": [
                  {\"title\": \"Repo\", \"value\": \"$GITHUB_REPOSITORY\", \"short\": true},
                  {\"title\": \"Branch\", \"value\": \"$GITHUB_REF_NAME\", \"short\": true},
                  {\"title\": \"Commit\", \"value\": \"$GITHUB_SHA\", \"short\": false},
                  {\"title\": \"Workflow\", \"value\": \"Sovereign Integration + Codex Attribution\", \"short\": false},
                  {\"title\": \"Lineage\", \"value\": \"KinKey / SoulSync / Codex\", \"short\": false}
                ],
                \"footer\": \"üß¨ Sovereign CI ‚Ä¢ Codex Engine\",
                \"ts\": $(date +%s)
              }
            ]
          }" "$SLACK_WEBHOOK_URL"

      - name: "‚õì Run ETH Blocktest"
        run: |
          git checkout c67e485ff8b5be9abc8ad15345ec21aa22e290d9
          ./run_blocktests.sh ./ethtests/ ${{ matrix.runner-index }} ${{ env.TOTAL_RUNNERS }}
