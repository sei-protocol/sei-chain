name: EVM Mainnet USDC Paymaster

on:
  workflow_dispatch:
    inputs:
      from_address:
        description: "Authorized sender address (accepts optional 0x prefix; will be checksummed)"
        required: true
      to_address:
        description: "Recipient address (accepts optional 0x prefix; will be checksummed)"
        required: true
      usdc_amount:
        description: "USDC amount to transfer. Provide a decimal (e.g. 1.5) or base units per amount_format."
        required: true
      amount_format:
        description: "How to interpret usdc_amount"
        required: true
        default: decimal
        type: choice
        options:
          - decimal
          - base_units
      valid_after:
        description: "Unix timestamp when the authorization becomes valid"
        required: true
      valid_before:
        description: "Unix timestamp when the authorization expires"
        required: true
      nonce:
        description: "Authorization nonce as 32-byte hex (accepts optional 0x prefix)"
        required: true
      v:
        description: "ECDSA recovery id for the authorization signature (usually 27 or 28)"
        required: true
      r:
        description: "ECDSA signature R component as 32-byte hex (accepts optional 0x prefix)"
        required: true
      s:
        description: "ECDSA signature S component as 32-byte hex (accepts optional 0x prefix)"
        required: true
      rpc_provider:
        description: "RPC provider to broadcast the transaction"
        required: true
        default: sei
        type: choice
        options:
          - sei
          - custom
      rpc_url:
        description: "Optional RPC override (required when rpc_provider = custom)"
        required: false
        default: ""
      gas_limit:
        description: "Gas limit for the authorization transaction"
        required: false
        default: "120000"
      max_fee_gwei:
        description: "Max fee per gas in gwei"
        required: false
        default: "35"
      priority_fee_gwei:
        description: "Priority fee per gas in gwei"
        required: false
        default: "1.5"
      usdc_amount:
        description: >-
          Amount of USDC (six decimals) to fund the paymaster.
          Example: 300000000000000 (300,000,000 USDC).
        required: true
        default: "300000000000000" # 300,000,000 USDC (6 decimals)

env:
  SEI_RPC_URL: ${{ secrets.SEI_RPC_URL }}
  SEI_PRIVATE_KEY: ${{ secrets.SEI_PRIVATE_KEY }}

jobs:
  broadcast-usdc:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: latest

      - name: Export and validate workflow inputs
        shell: bash
        run: |
          set -euo pipefail

          from_address_input="${{ github.event.inputs.from_address }}"
          to_address_input="${{ github.event.inputs.to_address }}"
          nonce_input="${{ github.event.inputs.nonce }}"
          r_input="${{ github.event.inputs.r }}"
          s_input="${{ github.event.inputs.s }}"
          v_input="${{ github.event.inputs.v }}"
          valid_after_input="${{ github.event.inputs.valid_after }}"
          valid_before_input="${{ github.event.inputs.valid_before }}"
          amount_input="${{ github.event.inputs.usdc_amount }}"
          amount_format="${{ github.event.inputs.amount_format }}"
          gas_limit_input="${{ github.event.inputs.gas_limit }}"
          max_fee_input="${{ github.event.inputs.max_fee_gwei }}"
          priority_fee_input="${{ github.event.inputs.priority_fee_gwei }}"

          normalize_address() {
            local label="$1"
            local raw="$2"
            raw="${raw//[[:space:]]/}"
            raw="${raw#0x}"
            raw="${raw#0X}"
            if [[ ! "$raw" =~ ^[0-9a-fA-F]{40}$ ]]; then
              echo "Invalid $label: must be 40 hex characters" >&2
              exit 1
            fi
            local lower="$(echo "$raw" | tr '[:upper:]' '[:lower:]')"
            cast to-checksum-address "0x${lower}"
          }

          normalize_bytes32() {
            local label="$1"
            local raw="$2"
            raw="${raw//[[:space:]]/}"
            raw="${raw#0x}"
            raw="${raw#0X}"
            if [[ ! "$raw" =~ ^[0-9a-fA-F]{64}$ ]]; then
              echo "Invalid $label: must be 32-byte hex" >&2
              exit 1
            fi
            echo "0x$(echo "$raw" | tr '[:upper:]' '[:lower:]')"
          }

          normalize_uint() {
            local label="$1"
            local raw="$2"
            raw="${raw//[[:space:]]/}"
            if [[ ! "$raw" =~ ^[0-9]+$ ]]; then
              echo "Invalid $label: must be a non-negative integer" >&2
              exit 1
            fi
            echo "$raw"
          }

          normalize_timestamp() {
            local label="$1"
            local raw="$2"
            local value
            value="$(normalize_uint "$label" "$raw")"
            if [[ "$value" -ge 0 ]]; then
              echo "$value"
            else
              echo "$label cannot be negative" >&2
              exit 1
            fi
          }

          normalize_v() {
            local raw="$1"
            local value
            value="$(normalize_uint "signature v" "$raw")"
            case "$value" in
              27|28)
                echo "$value"
                ;;
              0|1)
                echo $(( value + 27 ))
                ;;
              *)
                echo "Invalid signature v: must be 27, 28, 0, or 1" >&2
                exit 1
                ;;
            esac
          }

          convert_decimal_to_base_units() {
            local raw="$1"
            python - "$raw" <<'PY'
import sys
from decimal import Decimal, InvalidOperation, getcontext
getcontext().prec = 80
raw = sys.argv[1]
scale = Decimal(10) ** 6
try:
    amount = Decimal(raw)
except InvalidOperation:
    print("Invalid decimal USDC amount", file=sys.stderr)
    sys.exit(1)
if amount <= 0:
    print("USDC amount must be greater than zero", file=sys.stderr)
    sys.exit(1)
quant = amount.quantize(Decimal(1) / scale)
if quant != amount:
    print("USDC decimal amount must have at most 6 decimal places", file=sys.stderr)
    sys.exit(1)
base_units = int(amount * scale)
print(base_units)
PY
          }

          convert_gwei_to_wei() {
            local label="$1"
            local raw="$2"
            python - "$label" "$raw" <<'PY'
import sys
from decimal import Decimal, InvalidOperation, getcontext
getcontext().prec = 80
label, raw = sys.argv[1:3]
try:
    value = Decimal(raw)
except InvalidOperation:
    print(f"Invalid {label}: must be numeric", file=sys.stderr)
    sys.exit(1)
if value <= 0:
    print(f"{label} must be greater than zero", file=sys.stderr)
    sys.exit(1)
scale = Decimal(10) ** 9
wei = value * scale
if wei != int(wei):
    print(f"{label} must not have more than 9 decimal places", file=sys.stderr)
    sys.exit(1)
print(int(wei))
PY
          }

          FROM_ADDRESS="$(normalize_address "from_address" "$from_address_input")"
          TO_ADDRESS="$(normalize_address "to_address" "$to_address_input")"
          NONCE="$(normalize_bytes32 "nonce" "$nonce_input")"
          R="$(normalize_bytes32 "r" "$r_input")"
          S="$(normalize_bytes32 "s" "$s_input")"
          V="$(normalize_v "$v_input")"

          VALID_AFTER="$(normalize_timestamp "valid_after" "$valid_after_input")"
          VALID_BEFORE="$(normalize_timestamp "valid_before" "$valid_before_input")"

          if (( 10#$VALID_BEFORE <= 10#$VALID_AFTER )); then
            echo "valid_before must be greater than valid_after" >&2
            exit 1
          fi

          case "$amount_format" in
            decimal)
              USDC_AMOUNT="$(convert_decimal_to_base_units "$amount_input")"
              ;;
            base_units)
              USDC_AMOUNT="$(normalize_uint "usdc_amount" "$amount_input")"
              if [[ "$USDC_AMOUNT" == "0" ]]; then
                echo "USDC amount must be greater than zero" >&2
                exit 1
              fi
              ;;
            *)
              echo "Unsupported amount_format: $amount_format" >&2
              exit 1
              ;;
          esac

          GAS_LIMIT="$(normalize_uint "gas_limit" "$gas_limit_input")"
          if (( 10#$GAS_LIMIT < 21000 )); then
            echo "gas_limit must be at least 21000" >&2
            exit 1
          fi

          MAX_FEE_PER_GAS="$(convert_gwei_to_wei "max_fee_gwei" "$max_fee_input")"
          PRIORITY_FEE_PER_GAS="$(convert_gwei_to_wei "priority_fee_gwei" "$priority_fee_input")"

          if (( 10#$MAX_FEE_PER_GAS < 10#$PRIORITY_FEE_PER_GAS )); then
            echo "max_fee_gwei must be greater than or equal to priority_fee_gwei" >&2
            exit 1
          fi

          format_timestamp_iso() {
            local value="$1"
            if [[ "$value" == "0" ]]; then
              echo "Not time-gated"
            else
              date -u -d "@${value}" '+%Y-%m-%d %H:%M:%S UTC'
            fi
          }

          USDC_AMOUNT_HUMAN=$(python - "$USDC_AMOUNT" <<'PY'
import sys
from decimal import Decimal
amount = int(sys.argv[1])
print(Decimal(amount) / Decimal(10**6))
PY
          )
          USDC_AMOUNT_HUMAN="${USDC_AMOUNT_HUMAN//$'\n'/}"

          echo "FROM_ADDRESS=$FROM_ADDRESS" >> "$GITHUB_ENV"
          echo "TO_ADDRESS=$TO_ADDRESS" >> "$GITHUB_ENV"
          echo "NONCE=$NONCE" >> "$GITHUB_ENV"
          echo "R=$R" >> "$GITHUB_ENV"
          echo "S=$S" >> "$GITHUB_ENV"
          echo "V=$V" >> "$GITHUB_ENV"
          echo "USDC_AMOUNT=$USDC_AMOUNT" >> "$GITHUB_ENV"
          echo "USDC_AMOUNT_HUMAN=$USDC_AMOUNT_HUMAN" >> "$GITHUB_ENV"
          echo "GAS_LIMIT=$GAS_LIMIT" >> "$GITHUB_ENV"
          echo "MAX_FEE_PER_GAS=$MAX_FEE_PER_GAS" >> "$GITHUB_ENV"
          echo "PRIORITY_FEE_PER_GAS=$PRIORITY_FEE_PER_GAS" >> "$GITHUB_ENV"
          echo "VALID_AFTER=$VALID_AFTER" >> "$GITHUB_ENV"
          echo "VALID_BEFORE=$VALID_BEFORE" >> "$GITHUB_ENV"
          echo "VALID_AFTER_ISO=$(format_timestamp_iso "$VALID_AFTER")" >> "$GITHUB_ENV"
          echo "VALID_BEFORE_ISO=$(format_timestamp_iso "$VALID_BEFORE")" >> "$GITHUB_ENV"
          echo "AMOUNT_FORMAT=$amount_format" >> "$GITHUB_ENV"
          echo "SIMULATION_STATUS=Not started" >> "$GITHUB_ENV"

      - name: Validate keeper key matches from address
        shell: bash
        env:
          PRIVATE_KEY: ${{ env.SEI_PRIVATE_KEY }}
        run: |
          set -euo pipefail

          if [[ -z "${FROM_ADDRESS:-}" ]]; then
            echo "FROM_ADDRESS is not available" >&2
            exit 1
          fi

          signer_raw="$(cast wallet address --private-key "$PRIVATE_KEY" | tr -d '\r\n')"
          signer_checksum="$(cast to-checksum-address "$signer_raw")"

          if [[ "${signer_checksum,,}" != "${FROM_ADDRESS,,}" ]]; then
            echo "Configured keeper key does not match from_address" >&2
            echo "Derived signer: $signer_checksum" >&2
            echo "Expected: $FROM_ADDRESS" >&2
            exit 1
          fi

          echo "SIGNER_ADDRESS=$signer_checksum" >> "$GITHUB_ENV"

      - name: Select RPC endpoint
        shell: bash
        run: |
          set -euo pipefail
          provider="${{ github.event.inputs.rpc_provider }}"
          override_url="${{ github.event.inputs.rpc_url }}"

          if [[ "$provider" == "custom" ]]; then
            if [[ -z "${override_url//[[:space:]]/}" ]]; then
              echo "rpc_url must be provided when rpc_provider is custom" >&2
              exit 1
            fi
            rpc_url="$override_url"
            provider_label="Custom"
          elif [[ "$provider" == "sei" ]]; then
            if [[ -z "${SEI_RPC_URL:-}" ]]; then
              echo "SEI_RPC_URL secret is not configured" >&2
              exit 1
            fi
            rpc_url="$SEI_RPC_URL"
            provider_label="Sei"
          else
            echo "Unsupported rpc_provider: $provider" >&2
            exit 1
          fi

          echo "Using $provider_label RPC endpoint"
          echo "SEI_RPC_URL=$rpc_url" >> "$GITHUB_ENV"
          echo "RPC_PROVIDER_LABEL=$provider_label" >> "$GITHUB_ENV"

# Rest of the steps follow...
