name: Codex PR Review (Email Output)

on:
  pull_request:
    types: [opened, edited, labeled, synchronize]

permissions:
  contents: read
  pull-requests: write

jobs:
  codex-review:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout PR with full history for merge-base comparison
      - name: Checkout PR HEAD (full history)
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0

      # 2. Set up Node (Codex CLI is a Node package)
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # 3. Try to install Codex CLI
      - name: Install Codex CLI (best-effort)
        run: |
          npm install -g @openai/codex || echo "::warning::Codex CLI not available; fallback will be used"

      # 4. Compute merge-base diff and stats
      - name: Compute merge-base diff
        run: |
          set -euo pipefail
          BASE_REF="${{ github.event.pull_request.base.ref }}"
          git fetch origin "$BASE_REF":"refs/remotes/origin/$BASE_REF"
          MB=$(git merge-base "origin/$BASE_REF" HEAD)
          git diff --unified=0 "$MB"..HEAD > pr.diff
          git --no-pager diff --stat "$MB"..HEAD > pr.stat

      # 5. Check if Codex CLI is available
      - name: Check Codex availability
        id: codex_check
        run: |
          if command -v codex >/dev/null; then
            echo "available=true" >> $GITHUB_OUTPUT
          else
            echo "available=false" >> $GITHUB_OUTPUT
          fi

      # 6a. Run Codex CLI (Markdown Output)
      - name: Run Codex CLI
        if: steps.codex_check.outputs.available == 'true'
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          MAX=${MAX_TOKENS:-6000}
          codex pr \
            --diff pr.diff \
            --stat pr.stat \
            --pr-url "$PR_URL" \
            --pr-number "$PR_NUMBER" \
            --max-output-tokens "$MAX" \
            --no-guard \
            --markdown > codex_output.md

      # 6b. Fallback: simple Markdown output
      - name: Fallback Markdown Report
        if: steps.codex_check.outputs.available == 'false'
        run: |
          {
            echo "# Codex Fallback Review"
            echo "PR: [#${{ github.event.pull_request.number }}](${{ github.event.pull_request.html_url }})"
            echo
            echo "## Diff Stat"
            echo '```'
            cat pr.stat
            echo '```'
            echo
            echo "## Unified Diff (first 500 lines)"
            echo '```diff'
            head -n 500 pr.diff
            echo '```'
          } > codex_output.md

      # 7. Extract the markdown as a string output
      - name: Extract Markdown Output
        id: extract_output
        run: |
          echo "markdown<<EOF" >> $GITHUB_OUTPUT
          cat codex_output.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # 8. Send the Markdown via SendGrid email
      - name: Send Codex Report via Email
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.sendgrid.net
          server_port: 465
          username: apikey
          password: ${{ secrets.SMTP_TOKEN }}
          subject: "[Codex Review] PR #${{ github.event.pull_request.number }}"
          to: ${{ secrets.SMTP_EMAIL_TO }}
          from: CodexBot <noreply@kinmesh.org>
          content_type: text/html
          body: |
            <p>Codex Review for <a href="${{ github.event.pull_request.html_url }}">PR #${{ github.event.pull_request.number }}</a></p>
            <pre style="white-space:pre-wrap;font-family:ui-monospace,Menlo,Consolas,monospace">
            ${{ steps.extract_output.outputs.markdown }}
            </pre>
