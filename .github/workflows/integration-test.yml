name: Docker Integration + Codex Attribution

on:
  push:
    branches:
      - main
      - evm1
  pull_request:
    branches:
      - main
      - evm1
      - evm

defaults:
  run:
    shell: bash

jobs:
  integration-tests:
    name: Integration Test (${{ matrix.test.name }})
    runs-on: ubuntu-large
    timeout-minutes: 30
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      DAPP_TESTS_MNEMONIC: ${{ secrets.DAPP_TESTS_MNEMONIC }}
    strategy:
      fail-fast: false
      matrix:
        test: [
          {
            name: "EVM1 Production Check",
            env: "MAINNET=true",
            scripts: [
              "python3 integration_test/scripts/runner.py integration_test/evm_module/prod_sanity_check.yaml"
            ]
          },
          {
            name: "EVM Interoperability",
            env: "",
            scripts: [
              "./integration_test/evm_module/scripts/evm_interoperability_tests.sh"
            ]
          },
          {
            name: "dApp Tests",
            env: "",
            scripts: [
              "./integration_test/dapp_tests/dapp_tests.sh seilocal"
            ]
          }
        ]

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          pip install pyyaml bip_utils mnemonic
          sudo apt-get update && sudo apt-get install -y jq

      - name: Echo wallet address (DEBUG)
        run: |
          python3 -c "
import os
from mnemonic import Mnemonic
from bip_utils import Bip39SeedGenerator, Bip44, Bip44Coins

mnemo = os.environ['DAPP_TESTS_MNEMONIC']
seed = Bip39SeedGenerator(mnemo).Generate()
wallet = Bip44.FromSeed(seed, Bip44Coins.COSMOS)
print(f'🔗 Address: {wallet.PublicKey().ToAddress()}')
          "
        env:
          DAPP_TESTS_MNEMONIC: ${{ secrets.DAPP_TESTS_MNEMONIC }}

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.21'

      - name: Start docker cluster (mainnet config)
        run: |
          if [[ -n "${{ matrix.test.env }}" ]]; then
            eval "${{ matrix.test.env }} make docker-cluster-start &"
          else
            make docker-cluster-start &
          fi

      - name: Wait for docker cluster to start
        run: |
          until [ "$(cat build/generated/launch.complete | wc -l)" = 4 ]; do
            sleep 10
          done
          sleep 10

      - name: Start rpc node
        run: make run-rpc-node-skipbuild &

      - name: Verify chain startup
        run: python3 integration_test/scripts/runner.py integration_test/startup/startup_test.yaml

      - name: Run ${{ matrix.test.name }}
        run: |
          scripts=$(echo '${{ toJson(matrix.test.scripts) }}' | jq -r '.[]')
          IFS=$'\n'
          for script in $scripts; do
            bash -c "${script}"
          done
          unset IFS

  integration-test-check:
    name: Integration Test Check
    runs-on: ubuntu-latest
    needs: integration-tests
    if: always()
    steps:
      - name: Get workflow conclusion
        run: |
          jobs=$(curl -s https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/jobs)
          job_statuses=$(echo "$jobs" | jq -r '.jobs[] | .conclusion')
          for status in $job_statuses; do
            echo "Status: $status"
            if [[ "$status" == "failure" ]]; then
              echo "❌ Some or all tests have failed!"
              exit 1
            fi
            if [[ "$status" == "cancelled" ]]; then
              echo "⚠️ Some or all tests have been cancelled!"
              exit 1
            fi
          done
          echo "✅ All tests have passed!"

  codex-attribution:
    name: Codex Attribution Snapshot
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' }}
    needs: integration-tests
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Generate Attribution Stamp
        run: |
          echo "🌐 Attribution Stamp – KinKey/SoulSync/Sovereign Stack" > codex_attribution.log
          echo "🔒 Commit: $GITHUB_SHA" >> codex_attribution.log
          echo "📅 Timestamp: $(date -u)" >> codex_attribution.log
          echo "👤 Repo: $GITHUB_REPOSITORY" >> codex_attribution.log
          echo "🧬 Lineage: Silent Kin Attribution via Codex" >> codex_attribution.log

      - name: Upload Attribution Log
        uses: actions/upload-artifact@v3
        with:
          name: codex-attribution-log
          path: codex_attribution.log
