# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Docker Integration Test

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

defaults:
  run:
    shell: bash

jobs:
  integration-tests:
    name: Integration Test (${{ matrix.test.name }})
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    strategy:
      # other jobs should run even if one integration test fails
      fail-fast: false
      matrix:
        test: [
          {
            name: "Dex Module",
            scripts: [
              "docker exec sei-node-0 integration_test/contracts/deploy_dex_contract.sh mars",
              "python3 integration_test/scripts/runner.py integration_test/dex_module/place_order_test.yaml"
            ]
          },
          {
            name: "Wasm Module",
            scripts: [
              "docker exec sei-node-0 integration_test/contracts/deploy_timelocked_token_contract.sh",
              "python3 integration_test/scripts/runner.py integration_test/wasm_module/timelocked_token_delegation_test.yaml",
              "python3 integration_test/scripts/runner.py integration_test/wasm_module/timelocked_token_admin_test.yaml",
              "python3 integration_test/scripts/runner.py integration_test/wasm_module/timelocked_token_withdraw_test.yaml",
              "docker exec sei-node-0 integration_test/contracts/deploy_timelocked_token_contract.sh",
              "python3 integration_test/scripts/runner.py integration_test/wasm_module/timelocked_token_emergency_withdraw_test.yaml"
            ]
          },
          {
            name: "Mint Module",
            scripts: [
              "python3 integration_test/scripts/runner.py integration_test/mint_module/mint_test.yaml"
            ]
          },
          {
            name: "Staking Module",
            scripts: [
              "python3 integration_test/scripts/runner.py integration_test/staking_module/staking_test.yaml"
            ]
          },
          {
            name: "Gov Module",
            scripts: [
              "python3 integration_test/scripts/runner.py integration_test/gov_module/gov_proposal_test.yaml",
              "python3 integration_test/scripts/runner.py integration_test/gov_module/staking_proposal_test.yaml"
            ]
          },
          {
            name: "Oracle Module",
            scripts: [
              "python3 integration_test/scripts/runner.py integration_test/oracle_module/verify_penalty_counts.yaml",
              "python3 integration_test/scripts/runner.py integration_test/oracle_module/set_feeder_test.yaml"
            ]
          },
        ]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Pyyaml
        run: |
          pip3 install pyyaml

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.18

      - name: Start 4 node docker cluster
        run: make clean && INVARIANT_CHECK_INTERVAL=10 make docker-cluster-start &

      - name: Wait for docker cluster to start
        run: |
          until [ $(cat build/generated/launch.complete |wc -l) = 4 ]
          do
            sleep 10
          done
          sleep 10

      - name: Verify Sei Chain is running
        run: python3 integration_test/scripts/runner.py integration_test/startup/startup_test.yaml

      - name: ${{ matrix.test.name }}
        run: |
          scripts=$(echo '${{ toJson(matrix.test.scripts) }}' | jq -r '.[]')
          IFS=$'\n'   # change the internal field separator to newline
          echo $scripts
          for script in $scripts
          do
            bash -c "${script}"
          done
          unset IFS  # revert the internal field separator back to default

  integration-test-check:
    name: Integration Test Check
    runs-on: ubuntu-latest
    needs: integration-tests # This job will only run if all 'integration-tests' jobs have completed successfully
    steps:
      - name: Check
        run: echo "All tests have passed!"
