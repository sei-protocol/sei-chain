name: Docker Integration Test

on:
  push:
    branches: [main, seiv2]
  pull_request:
    branches: [main, seiv2, evm]

defaults:
  run:
    shell: bash

jobs:
  integration-tests:
    name: Integration Test (${{ matrix.test.name }})
    runs-on: ubuntu-latest
    timeout-minutes: 45
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      DAPP_TESTS_MNEMONIC: ${{ secrets.DAPP_TESTS_MNEMONIC }}
    strategy:
      fail-fast: false
      matrix:
        test:
          # (same matrix you wrote)
          # omitted here for brevity
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      - uses: actions/setup-go@v4
        with:
          go-version: 1.21

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq python3-pip docker-compose
          pip install pyyaml toml

      - name: Set test-specific env
        if: ${{ matrix.test.env != '' }}
        run: echo "${{ matrix.test.env }}" >> $GITHUB_ENV

      - name: Start 4 node docker cluster
        run: |
          make clean
          INVARIANT_CHECK_INTERVAL=10 make docker-cluster-start &

      - name: Wait for docker cluster to start
        run: |
          until [ "$(wc -l < build/generated/launch.complete)" -eq 4 ]; do sleep 10; done
          sleep 10

      - name: Start rpc node
        run: make run-rpc-node-skipbuild &

      - name: Verify Sei Chain is running
        run: python3 integration_test/scripts/runner.py integration_test/startup/startup_test.yaml

      - name: Run ${{ matrix.test.name }}
        run: |
          scripts=$(jq -r '.[]' <<< '${{ toJson(matrix.test.scripts) }}')
          for script in $scripts; do
            echo ">>> Running: $script"
            eval "$script"
          done

      - name: Cleanup docker cluster
        if: always()
        run: docker-compose -f docker/docker-compose.yml down -v --remove-orphans || true

      - name: Append Job Summary
        if: always()
        run: |
          echo "## ${{ matrix.test.name }} Results" >> $GITHUB_STEP_SUMMARY
          echo "Scripts Run:" >> $GITHUB_STEP_SUMMARY
          jq -r '.[]' <<< '${{ toJson(matrix.test.scripts) }}' >> $GITHUB_STEP_SUMMARY

  integration-test-check:
    name: Integration Test Check
    runs-on: ubuntu-latest
    needs: integration-tests
    if: always()
    steps:
      - name: Get workflow conclusion
        run: |
          jobs=$(gh api repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/jobs)
          job_statuses=$(echo "$jobs" | jq -r '.jobs[].conclusion')
          echo "Job statuses: $job_statuses"
          if echo "$job_statuses" | grep -q failure; then
            echo "Some or all tests have failed!"
            exit 1
          fi
          echo "All tests passed!"
