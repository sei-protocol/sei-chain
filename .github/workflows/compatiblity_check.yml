name: Codex Go Syntax Guard

on:
  push:
    branches: [main, evm, evm1]
  pull_request:
    branches: [main, evm, evm1]
  workflow_dispatch:

jobs:
  check-go-syntax:
    name: "\U0001F9EA Validate Geth/Cosmos Go Code"
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: "\U0001F4E6 Checkout repo"
        uses: actions/checkout@v4

      - name: "\U0001F527 Set up Go"
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'

      - name: "\U0001F50E Scan for bad top-level code"
        run: |
          echo "\U0001F50D Scanning for invalid top-level Go statements..."
          BAD_LINES=$(grep -rPn '^[^/]*:=.*$' go-ethereum/core/vm/ | grep -v 'func')
          if [[ -n "$BAD_LINES" ]]; then
            echo "\U0001F6A8 Top-level assignments detected:"
            echo "$BAD_LINES"
            echo "$BAD_LINES" > codex_go_patch.log
            exit 1
          else
            echo "\u2705 No syntax violations found."
          fi

      - name: "\U0001F6E0\uFE0F Optional: Auto-patch into init()"
        if: ${{ failure() }}
        run: |
          echo "\U0001F6E0\uFE0F Wrapping top-level assignments into init() block..."

          FILE="go-ethereum/core/vm/contracts.go"
          INIT_MARKER="// codex:init-wrap"

          # Add init if not present
          if ! grep -q "$INIT_MARKER" "$FILE"; then
            echo -e "\nfunc init() {\n$INIT_MARKER\n}" >> "$FILE"
          fi

          # Move each := line into init()
          sed -i.bak '/^[^/]*:=.*$/ {
            s/^/\/\/ Codex moved: /
            h
            s/^.*:=/    /
            G        
            s/\n/\n    /
            s/^/    /
            s/$/ \/\/ \u2190 auto-moved by Codex/
          }' "$FILE"

          echo "\u2705 Codex applied a safe patch to $FILE"

      - name: "\U0001F4E4 Upload Codex Log"
        uses: actions/upload-artifact@v3
        with:
          name: codex-go-syntax-check
          path: codex_go_patch.log
