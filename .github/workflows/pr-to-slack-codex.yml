name: PR → Codex review → Slack

on:
  pull_request:
    types: [opened, reopened, synchronize, ready_for_review]

jobs:
  codex_review:
    if: ${{ contains(fromJSON('["OWNER","MEMBER","COLLABORATOR","CONTRIBUTOR"]'), github.event.pull_request.author_association) }}
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout PR HEAD
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Codex CLI
        run: npm install -g @openai/codex

      - name: Compute PR diff and stats
        run: |
          set -euo pipefail
          BASE_REF="${{ github.event.pull_request.base.ref }}"
          git fetch --no-tags origin "$BASE_REF":"refs/remotes/origin/$BASE_REF"
          MB=$(git merge-base "origin/$BASE_REF" HEAD)
          git diff --unified=0 "$MB"..HEAD > pr.diff
          git --no-pager diff --stat "$MB"..HEAD > pr.stat || true

      - name: Run Codex CLI
        id: codex_output
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          set -euo pipefail
          MAX=900000
          BYTES=$(wc -c < pr.diff || echo 0)

          {
            echo "You are a skilled AppSec reviewer. Analyze this PR for:"
            echo "bugs, vulnerabilities, loss of funds, replay attacks, signature issues, etc."
            echo "Prioritize the changed hunks in pr.diff."
            echo
            echo "Return a summary and bullet list:"
            echo "- severity (high/med/low)"
            echo "- file:line"
            echo "- suggested fixes (diff blocks)"
            echo '- say "No significant issues found" if clean'
            echo
            echo "PR URL: $PR_URL"
            echo
            echo "## Diff"
            echo '```diff'
            cat pr.diff
            echo '```'
          } > prompt.txt

          if [ "$BYTES" -le "$MAX" ] && [ "$BYTES" -gt 0 ]; then
            env -i OPENAI_API_KEY="$OPENAI_API_KEY" PATH="$PATH" HOME="$HOME" \
              codex --model gpt-5 --ask-for-approval never exec \
              --sandbox read-only \
              --output-last-message review.md \
              < prompt.txt \
              > codex.log 2>&1
          else
            echo "_Codex skipped due to large diff._" > review.md
          fi

          if [ ! -s review.md ]; then
            echo "_Codex produced no output._" > review.md
          fi

      - name: Post Slack parent message
        id: post_parent
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}
        run: |
          resp=$(curl -s -X POST https://slack.com/api/chat.postMessage \
            -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
            -H "Content-type: application/json; charset=utf-8" \
            --data "$(jq -n \
              --arg ch "$SLACK_CHANNEL_ID" \
              --arg n  "${{ github.event.pull_request.number }}" \
              --arg t  "${{ github.event.pull_request.title }}" \
              --arg a  "${{ github.event.pull_request.user.login }}" \
              --arg u  "${{ github.event.pull_request.html_url }}" \
              '{
                channel: $ch,
                text: ("PR #" + $n + ": " + $t),
                blocks: [
                  { "type":"section", "text":{"type":"mrkdwn","text":("*PR #"+$n+":* "+$t)} },
                  { "type":"section", "text":{"type":"mrkdwn","text":("• Author: "+$a)} },
                  { "type":"section", "text":{"type":"mrkdwn","text":("• Link: <"+$u+">") } }
                ],
                unfurl_links:false, unfurl_media:false
              }')" )
          echo "ts=$(echo "$resp" | jq -r '.ts')" >> "$GITHUB_OUTPUT"

      - name: Upload review to Slack thread
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}
          TS: ${{ steps.post_parent.outputs.ts }}
        run: |
          set -euo pipefail
          BYTES=$(stat -c%s review.md 2>/dev/null || stat -f%z review.md 2>/dev/null || wc -c < review.md)
          ticket=$(curl -sS -X POST https://slack.com/api/files.getUploadURLExternal \
            -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
            -H "Content-type: application/x-www-form-urlencoded" \
            --data-urlencode "filename=codex_review.md" \
            --data "length=$BYTES" \
            --data "snippet_type=markdown")
          upload_url=$(echo "$ticket" | jq -r '.upload_url')
          file_id=$(echo "$ticket" | jq -r '.file_id')

          curl -sS -X POST "$upload_url" \
            -F "filename=@review.md;type=text/markdown" \
            > /dev/null

          payload=$(jq -n --arg fid "$file_id" --arg ch "$SLACK_CHANNEL_ID" --arg ts "$TS" \
            --arg title "Codex Security Review" --arg ic "Automated Codex review attached." \
            '{files:[{id:$fid, title:$title}], channel_id:$ch, thread_ts:$ts, initial_comment:$ic}')
          curl -sS -X POST https://slack.com/api/files.completeUploadExternal \
            -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
            -H "Content-type: application/json; charset=utf-8" \
            --data "$payload"
