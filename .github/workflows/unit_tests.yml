name: Test

on:
  pull_request:
  push:
    paths:
      - "**.go"
    branches:
      - main
      - seiv2
      - evm
      - release/**

jobs:
  tests:
    name: Run Go Tests [Part ${{ matrix.part }}]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        part: [
          "00", "01", "02", "03", "04", "05", "06", "07", "08", "09",
          "10", "11", "12", "13", "14", "15", "16", "17", "18", "19"
        ]

    steps:
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Detect Changed Files
        id: diff
        uses: technote-space/get-diff-action@v6
        with:
          PATTERNS: |
            **/**.go
            "!test/"
            go.mod
            go.sum
            Makefile

      - name: Skip Unchanged Groups
        id: skip
        run: |
          if [[ -z "${{ steps.diff.outputs.diff }}" ]]; then
            echo "skip=true" >> "$GITHUB_OUTPUT"
            echo "üü° Skipping tests for part ${{ matrix.part }} (no relevant changes)"
          else
            echo "skip=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Cache Go Build & Lint
        if: steps.skip.outputs.skip == 'false'
        uses: actions/cache@v3
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/golangci-lint
            ~/.cache/go-build
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}

      - name: Vet and Build
        if: steps.skip.outputs.skip == 'false'
        run: |
          go vet ./...
          go build ./...

      - name: Run Go Tests for Group ${{ matrix.part }}
        if: steps.skip.outputs.skip == 'false'
        run: |
          echo "üß™ Running test-group-${{ matrix.part }} (of 20 total)"
          NUM_SPLIT=20
          make test-group-${{ matrix.part }} NUM_SPLIT=$NUM_SPLIT || {
            echo "‚ùå Makefile test-group-${{ matrix.part }} failed"; exit 1;
          }

      - name: Upload Coverage Profile
        if: steps.skip.outputs.skip == 'false'
        uses: actions/upload-artifact@v4
        with:
          name: "${{ github.sha }}-${{ matrix.part }}-coverage"
          path: ./${{ matrix.part }}.profile.out

  upload-coverage-report:
    name: Merge & Upload Coverage Report
    needs: tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      - name: Download all coverage profiles
        uses: actions/download-artifact@v4

      - name: Install gocovmerge
        run: |
          go install github.com/wadey/gocovmerge@latest

      - name: Merge coverage profiles
        run: |
          gocovmerge $(find . -type f -name '*profile.out') > coverage.txt

      - name: Print merged report size
        run: wc -l coverage.txt || true

      - name: List all coverage profiles
        run: find . -name '*profile.out' || true

      - name: Upload Merged Report to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.txt
          flags: unittests
          name: combined-report
          fail_ci_if_error: true
          verbose: true

  unit-test-check:
    name: Unit Test Final Status
    needs: tests
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check for Failed Jobs
        run: |
          jobs=$(gh api repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/jobs)
          statuses=$(echo "$jobs" | jq -r '.jobs[] | .conclusion')
          failed=0
          for s in $statuses; do
            echo "Job status: $s"
            if [[ "$s" == "failure" ]]; then
              failed=1
            fi
          done
          if [[ "$failed" -eq 1 ]]; then
            echo "‚ùå Some tests failed."
            exit 1
          else
            echo "‚úÖ All test jobs passed."
          fi
