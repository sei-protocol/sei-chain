// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dex/order_entry.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type OrderEntry struct {
	Price       github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=price,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"price" yaml:"price"`
	Quantity    github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=quantity,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"quantity" yaml:"quantity"`
	Allocations []*Allocation                          `protobuf:"bytes,3,rep,name=allocations,proto3" json:"allocations"`
	PriceDenom  string                                 `protobuf:"bytes,4,opt,name=priceDenom,proto3" json:"price_denom"`
	AssetDenom  string                                 `protobuf:"bytes,5,opt,name=assetDenom,proto3" json:"asset_denom"`
}

func (m *OrderEntry) Reset()         { *m = OrderEntry{} }
func (m *OrderEntry) String() string { return proto.CompactTextString(m) }
func (*OrderEntry) ProtoMessage()    {}
func (*OrderEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_25878922effe12c2, []int{0}
}
func (m *OrderEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrderEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrderEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrderEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderEntry.Merge(m, src)
}
func (m *OrderEntry) XXX_Size() int {
	return m.Size()
}
func (m *OrderEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderEntry.DiscardUnknown(m)
}

var xxx_messageInfo_OrderEntry proto.InternalMessageInfo

func (m *OrderEntry) GetAllocations() []*Allocation {
	if m != nil {
		return m.Allocations
	}
	return nil
}

func (m *OrderEntry) GetPriceDenom() string {
	if m != nil {
		return m.PriceDenom
	}
	return ""
}

func (m *OrderEntry) GetAssetDenom() string {
	if m != nil {
		return m.AssetDenom
	}
	return ""
}

type Allocation struct {
	OrderId  uint64                                 `protobuf:"varint,1,opt,name=orderId,proto3" json:"order_id"`
	Quantity github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=quantity,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"quantity" yaml:"quantity"`
	Account  string                                 `protobuf:"bytes,3,opt,name=account,proto3" json:"account"`
}

func (m *Allocation) Reset()         { *m = Allocation{} }
func (m *Allocation) String() string { return proto.CompactTextString(m) }
func (*Allocation) ProtoMessage()    {}
func (*Allocation) Descriptor() ([]byte, []int) {
	return fileDescriptor_25878922effe12c2, []int{1}
}
func (m *Allocation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Allocation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Allocation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Allocation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Allocation.Merge(m, src)
}
func (m *Allocation) XXX_Size() int {
	return m.Size()
}
func (m *Allocation) XXX_DiscardUnknown() {
	xxx_messageInfo_Allocation.DiscardUnknown(m)
}

var xxx_messageInfo_Allocation proto.InternalMessageInfo

func (m *Allocation) GetOrderId() uint64 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

func (m *Allocation) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func init() {
	proto.RegisterType((*OrderEntry)(nil), "seiprotocol.seichain.dex.OrderEntry")
	proto.RegisterType((*Allocation)(nil), "seiprotocol.seichain.dex.Allocation")
}

func init() { proto.RegisterFile("dex/order_entry.proto", fileDescriptor_25878922effe12c2) }

var fileDescriptor_25878922effe12c2 = []byte{
	// 395 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x52, 0xb1, 0x6a, 0xe3, 0x40,
	0x10, 0x95, 0x4e, 0xf6, 0xf9, 0x6e, 0x6d, 0x30, 0x88, 0x3b, 0x10, 0x29, 0x24, 0x23, 0x12, 0xe3,
	0xc6, 0x12, 0x24, 0x5d, 0xba, 0x08, 0x07, 0x93, 0x22, 0x04, 0xd4, 0x04, 0x02, 0xc1, 0xc8, 0xab,
	0xc5, 0x5e, 0x22, 0x69, 0x1d, 0xed, 0x1a, 0xac, 0xbf, 0x48, 0x7e, 0x2a, 0xb8, 0x74, 0x19, 0x52,
	0x88, 0x60, 0x77, 0x2e, 0xfd, 0x05, 0x61, 0x47, 0x91, 0xad, 0x26, 0x45, 0x9a, 0x54, 0x9a, 0x79,
	0x33, 0x6f, 0xde, 0xec, 0x3c, 0xa1, 0xff, 0x21, 0x59, 0xb8, 0x2c, 0x0d, 0x49, 0x3a, 0x22, 0x89,
	0x48, 0x33, 0x67, 0x96, 0x32, 0xc1, 0x74, 0x83, 0x13, 0x0a, 0x11, 0x66, 0x91, 0xc3, 0x09, 0xc5,
	0xd3, 0x80, 0x26, 0x4e, 0x48, 0x16, 0x47, 0xff, 0x26, 0x6c, 0xc2, 0xa0, 0xe4, 0xca, 0xa8, 0xe8,
	0xb7, 0x9f, 0x35, 0x84, 0x6e, 0xe4, 0x94, 0x4b, 0x39, 0x44, 0xbf, 0x47, 0xf5, 0x59, 0x4a, 0x31,
	0x31, 0xd4, 0x8e, 0xda, 0xfb, 0xeb, 0x0d, 0x97, 0xb9, 0xa5, 0xbc, 0xe5, 0x56, 0x77, 0x42, 0xc5,
	0x74, 0x3e, 0x76, 0x30, 0x8b, 0x5d, 0xcc, 0x78, 0xcc, 0xf8, 0xe7, 0xa7, 0xcf, 0xc3, 0x07, 0x57,
	0x64, 0x33, 0xc2, 0x9d, 0x01, 0xc1, 0xdb, 0xdc, 0x2a, 0xe8, 0xbb, 0xdc, 0x6a, 0x65, 0x41, 0x1c,
	0x9d, 0xdb, 0x90, 0xda, 0x7e, 0x01, 0xeb, 0x14, 0xfd, 0x79, 0x9c, 0x07, 0x89, 0xa0, 0x22, 0x33,
	0x7e, 0x81, 0xc2, 0xf5, 0xb7, 0x15, 0xf6, 0x13, 0x76, 0xb9, 0xd5, 0x2e, 0x44, 0x4a, 0xc4, 0xf6,
	0xf7, 0x45, 0xfd, 0x16, 0x35, 0x83, 0x28, 0x62, 0x38, 0x10, 0x94, 0x25, 0xdc, 0xd0, 0x3a, 0x5a,
	0xaf, 0x79, 0x7a, 0xec, 0x7c, 0x75, 0x1e, 0xe7, 0x62, 0xdf, 0xec, 0xb5, 0xb7, 0xb9, 0x55, 0x25,
	0xfb, 0xd5, 0x44, 0x77, 0x11, 0x82, 0xc7, 0x0c, 0x48, 0xc2, 0x62, 0xa3, 0x06, 0xaf, 0x00, 0x06,
	0xa0, 0xa3, 0x50, 0xc2, 0x7e, 0xa5, 0x45, 0x12, 0x02, 0xce, 0x89, 0x28, 0x08, 0xf5, 0x03, 0x01,
	0xd0, 0x92, 0x70, 0x68, 0xb1, 0x5f, 0x54, 0x84, 0x0e, 0xeb, 0xe8, 0x5d, 0xd4, 0x00, 0x9f, 0xaf,
	0x42, 0x70, 0xa5, 0xe6, 0xb5, 0xe4, 0x15, 0x0a, 0xeb, 0x69, 0xe8, 0x97, 0xc5, 0x9f, 0x3c, 0xee,
	0x09, 0x6a, 0x04, 0x18, 0xb3, 0x79, 0x22, 0x0c, 0x0d, 0x94, 0x9a, 0xdb, 0xdc, 0x2a, 0x21, 0xbf,
	0x0c, 0xbc, 0xe1, 0x72, 0x6d, 0xaa, 0xab, 0xb5, 0xa9, 0xbe, 0xaf, 0x4d, 0xf5, 0x69, 0x63, 0x2a,
	0xab, 0x8d, 0xa9, 0xbc, 0x6e, 0x4c, 0xe5, 0xae, 0x5f, 0xd9, 0x88, 0x13, 0xda, 0x2f, 0x3d, 0x81,
	0x04, 0x4c, 0x71, 0x17, 0xae, 0xfc, 0xc3, 0x61, 0xb9, 0xf1, 0x6f, 0xa8, 0x9f, 0x7d, 0x04, 0x00,
	0x00, 0xff, 0xff, 0x59, 0x65, 0xd6, 0x5e, 0xf5, 0x02, 0x00, 0x00,
}

func (m *OrderEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrderEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AssetDenom) > 0 {
		i -= len(m.AssetDenom)
		copy(dAtA[i:], m.AssetDenom)
		i = encodeVarintOrderEntry(dAtA, i, uint64(len(m.AssetDenom)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PriceDenom) > 0 {
		i -= len(m.PriceDenom)
		copy(dAtA[i:], m.PriceDenom)
		i = encodeVarintOrderEntry(dAtA, i, uint64(len(m.PriceDenom)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Allocations) > 0 {
		for iNdEx := len(m.Allocations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Allocations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOrderEntry(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size := m.Quantity.Size()
		i -= size
		if _, err := m.Quantity.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintOrderEntry(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Price.Size()
		i -= size
		if _, err := m.Price.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintOrderEntry(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Allocation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Allocation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Allocation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintOrderEntry(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size := m.Quantity.Size()
		i -= size
		if _, err := m.Quantity.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintOrderEntry(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.OrderId != 0 {
		i = encodeVarintOrderEntry(dAtA, i, uint64(m.OrderId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintOrderEntry(dAtA []byte, offset int, v uint64) int {
	offset -= sovOrderEntry(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *OrderEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Price.Size()
	n += 1 + l + sovOrderEntry(uint64(l))
	l = m.Quantity.Size()
	n += 1 + l + sovOrderEntry(uint64(l))
	if len(m.Allocations) > 0 {
		for _, e := range m.Allocations {
			l = e.Size()
			n += 1 + l + sovOrderEntry(uint64(l))
		}
	}
	l = len(m.PriceDenom)
	if l > 0 {
		n += 1 + l + sovOrderEntry(uint64(l))
	}
	l = len(m.AssetDenom)
	if l > 0 {
		n += 1 + l + sovOrderEntry(uint64(l))
	}
	return n
}

func (m *Allocation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrderId != 0 {
		n += 1 + sovOrderEntry(uint64(m.OrderId))
	}
	l = m.Quantity.Size()
	n += 1 + l + sovOrderEntry(uint64(l))
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovOrderEntry(uint64(l))
	}
	return n
}

func sovOrderEntry(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOrderEntry(x uint64) (n int) {
	return sovOrderEntry(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *OrderEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrderEntry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderEntry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrderEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderEntry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrderEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Quantity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Allocations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrderEntry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrderEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Allocations = append(m.Allocations, &Allocation{})
			if err := m.Allocations[len(m.Allocations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderEntry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrderEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PriceDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderEntry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrderEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrderEntry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOrderEntry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Allocation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrderEntry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Allocation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Allocation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			m.OrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderEntry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrderEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Quantity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderEntry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrderEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrderEntry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOrderEntry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOrderEntry(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOrderEntry
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOrderEntry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOrderEntry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOrderEntry
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOrderEntry
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOrderEntry
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOrderEntry        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOrderEntry          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOrderEntry = fmt.Errorf("proto: unexpected end of group")
)
