// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dex/tick_size.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TickSize struct {
	Pair         *Pair                                  `protobuf:"bytes,1,opt,name=pair,proto3" json:"pair"`
	Ticksize     github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=ticksize,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"tick_size" yaml:"tick_size"`
	ContractAddr string                                 `protobuf:"bytes,3,opt,name=contractAddr,proto3" json:"contract_addr" yaml:"tick_size"`
}

func (m *TickSize) Reset()         { *m = TickSize{} }
func (m *TickSize) String() string { return proto.CompactTextString(m) }
func (*TickSize) ProtoMessage()    {}
func (*TickSize) Descriptor() ([]byte, []int) {
	return fileDescriptor_17c2b52038d2f694, []int{0}
}
func (m *TickSize) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TickSize) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TickSize.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TickSize) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TickSize.Merge(m, src)
}
func (m *TickSize) XXX_Size() int {
	return m.Size()
}
func (m *TickSize) XXX_DiscardUnknown() {
	xxx_messageInfo_TickSize.DiscardUnknown(m)
}

var xxx_messageInfo_TickSize proto.InternalMessageInfo

func (m *TickSize) GetPair() *Pair {
	if m != nil {
		return m.Pair
	}
	return nil
}

func (m *TickSize) GetContractAddr() string {
	if m != nil {
		return m.ContractAddr
	}
	return ""
}

func init() {
	proto.RegisterType((*TickSize)(nil), "seiprotocol.seichain.dex.TickSize")
}

func init() { proto.RegisterFile("dex/tick_size.proto", fileDescriptor_17c2b52038d2f694) }

var fileDescriptor_17c2b52038d2f694 = []byte{
	// 307 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4e, 0x49, 0xad, 0xd0,
	0x2f, 0xc9, 0x4c, 0xce, 0x8e, 0x2f, 0xce, 0xac, 0x4a, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17,
	0x92, 0x28, 0x4e, 0xcd, 0x04, 0xb3, 0x92, 0xf3, 0x73, 0xf4, 0x8a, 0x53, 0x33, 0x93, 0x33, 0x12,
	0x33, 0xf3, 0xf4, 0x52, 0x52, 0x2b, 0xa4, 0xf8, 0x40, 0xca, 0x0b, 0x12, 0x33, 0x8b, 0x20, 0x2a,
	0xa5, 0x44, 0xd2, 0xf3, 0xd3, 0xf3, 0xc1, 0x4c, 0x7d, 0x10, 0x0b, 0x22, 0xaa, 0xd4, 0xc0, 0xc4,
	0xc5, 0x11, 0x92, 0x99, 0x9c, 0x1d, 0x9c, 0x59, 0x95, 0x2a, 0x64, 0xc3, 0xc5, 0x02, 0xd2, 0x20,
	0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x6d, 0x24, 0xa7, 0x87, 0xcb, 0x6c, 0xbd, 0x80, 0xc4, 0xcc, 0x22,
	0x27, 0x8e, 0x57, 0xf7, 0xe4, 0xc1, 0xea, 0x83, 0xc0, 0xa4, 0x50, 0x36, 0x17, 0x07, 0xc8, 0x75,
	0x20, 0xc7, 0x49, 0x30, 0x29, 0x30, 0x6a, 0x70, 0x3a, 0xf9, 0x9f, 0xb8, 0x27, 0xcf, 0x70, 0xeb,
	0x9e, 0xbc, 0x5a, 0x7a, 0x66, 0x49, 0x46, 0x69, 0x92, 0x5e, 0x72, 0x7e, 0xae, 0x7e, 0x72, 0x7e,
	0x71, 0x6e, 0x7e, 0x31, 0x94, 0xd2, 0x2d, 0x4e, 0xc9, 0xd6, 0x2f, 0xa9, 0x2c, 0x48, 0x2d, 0xd6,
	0x73, 0x49, 0x4d, 0x7e, 0x75, 0x4f, 0x9e, 0x13, 0xee, 0xbf, 0x4f, 0xf7, 0xe4, 0x05, 0x2a, 0x13,
	0x73, 0x73, 0xac, 0x94, 0xe0, 0x42, 0x4a, 0x41, 0x70, 0x0b, 0x84, 0x3c, 0xb9, 0x78, 0x92, 0xf3,
	0xf3, 0x4a, 0x8a, 0x12, 0x93, 0x4b, 0x1c, 0x53, 0x52, 0x8a, 0x24, 0x98, 0xc1, 0x16, 0xaa, 0xbe,
	0xba, 0x27, 0xcf, 0x0b, 0x13, 0x8f, 0x4f, 0x4c, 0x49, 0x29, 0xc2, 0x6a, 0x0c, 0x8a, 0x56, 0x27,
	0xf7, 0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63, 0x7c, 0xf0, 0x48, 0x8e, 0x71, 0xc2, 0x63,
	0x39, 0x86, 0x0b, 0x8f, 0xe5, 0x18, 0x6e, 0x3c, 0x96, 0x63, 0x88, 0xd2, 0x45, 0x72, 0x77, 0x71,
	0x6a, 0xa6, 0x2e, 0x2c, 0x30, 0xc0, 0x1c, 0x70, 0x68, 0xe8, 0x57, 0xe8, 0x83, 0x63, 0x05, 0xe4,
	0x85, 0x24, 0x36, 0xb0, 0xbc, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x04, 0x0d, 0x45, 0x14, 0xa9,
	0x01, 0x00, 0x00,
}

func (m *TickSize) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TickSize) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TickSize) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractAddr) > 0 {
		i -= len(m.ContractAddr)
		copy(dAtA[i:], m.ContractAddr)
		i = encodeVarintTickSize(dAtA, i, uint64(len(m.ContractAddr)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size := m.Ticksize.Size()
		i -= size
		if _, err := m.Ticksize.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTickSize(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Pair != nil {
		{
			size, err := m.Pair.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTickSize(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTickSize(dAtA []byte, offset int, v uint64) int {
	offset -= sovTickSize(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TickSize) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pair != nil {
		l = m.Pair.Size()
		n += 1 + l + sovTickSize(uint64(l))
	}
	l = m.Ticksize.Size()
	n += 1 + l + sovTickSize(uint64(l))
	l = len(m.ContractAddr)
	if l > 0 {
		n += 1 + l + sovTickSize(uint64(l))
	}
	return n
}

func sovTickSize(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTickSize(x uint64) (n int) {
	return sovTickSize(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TickSize) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTickSize
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TickSize: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TickSize: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pair", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTickSize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTickSize
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTickSize
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pair == nil {
				m.Pair = &Pair{}
			}
			if err := m.Pair.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ticksize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTickSize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTickSize
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTickSize
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Ticksize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTickSize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTickSize
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTickSize
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTickSize(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTickSize
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTickSize(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTickSize
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTickSize
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTickSize
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTickSize
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTickSize
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTickSize
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTickSize        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTickSize          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTickSize = fmt.Errorf("proto: unexpected end of group")
)
