// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dex/contract.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ContractInfo struct {
	CodeId                  uint64                    `protobuf:"varint,1,opt,name=codeId,proto3" json:"codeId,omitempty"`
	ContractAddr            string                    `protobuf:"bytes,2,opt,name=contractAddr,proto3" json:"contractAddr,omitempty"`
	NeedHook                bool                      `protobuf:"varint,3,opt,name=needHook,proto3" json:"needHook,omitempty"`
	NeedOrderMatching       bool                      `protobuf:"varint,4,opt,name=needOrderMatching,proto3" json:"needOrderMatching,omitempty"`
	Dependencies            []*ContractDependencyInfo `protobuf:"bytes,5,rep,name=dependencies,proto3" json:"dependencies,omitempty"`
	NumIncomingDependencies int64                     `protobuf:"varint,6,opt,name=numIncomingDependencies,proto3" json:"numIncomingDependencies,omitempty"`
}

func (m *ContractInfo) Reset()         { *m = ContractInfo{} }
func (m *ContractInfo) String() string { return proto.CompactTextString(m) }
func (*ContractInfo) ProtoMessage()    {}
func (*ContractInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee35557664974a8a, []int{0}
}
func (m *ContractInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContractInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContractInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContractInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContractInfo.Merge(m, src)
}
func (m *ContractInfo) XXX_Size() int {
	return m.Size()
}
func (m *ContractInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ContractInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ContractInfo proto.InternalMessageInfo

func (m *ContractInfo) GetCodeId() uint64 {
	if m != nil {
		return m.CodeId
	}
	return 0
}

func (m *ContractInfo) GetContractAddr() string {
	if m != nil {
		return m.ContractAddr
	}
	return ""
}

func (m *ContractInfo) GetNeedHook() bool {
	if m != nil {
		return m.NeedHook
	}
	return false
}

func (m *ContractInfo) GetNeedOrderMatching() bool {
	if m != nil {
		return m.NeedOrderMatching
	}
	return false
}

func (m *ContractInfo) GetDependencies() []*ContractDependencyInfo {
	if m != nil {
		return m.Dependencies
	}
	return nil
}

func (m *ContractInfo) GetNumIncomingDependencies() int64 {
	if m != nil {
		return m.NumIncomingDependencies
	}
	return 0
}

type ContractInfoV2 struct {
	CodeId                  uint64                    `protobuf:"varint,1,opt,name=codeId,proto3" json:"codeId,omitempty"`
	ContractAddr            string                    `protobuf:"bytes,2,opt,name=contractAddr,proto3" json:"contractAddr,omitempty"`
	NeedHook                bool                      `protobuf:"varint,3,opt,name=needHook,proto3" json:"needHook,omitempty"`
	NeedOrderMatching       bool                      `protobuf:"varint,4,opt,name=needOrderMatching,proto3" json:"needOrderMatching,omitempty"`
	Dependencies            []*ContractDependencyInfo `protobuf:"bytes,5,rep,name=dependencies,proto3" json:"dependencies,omitempty"`
	NumIncomingDependencies int64                     `protobuf:"varint,6,opt,name=numIncomingDependencies,proto3" json:"numIncomingDependencies,omitempty"`
	Creator                 string                    `protobuf:"bytes,7,opt,name=creator,proto3" json:"creator,omitempty"`
	RentBalance             uint64                    `protobuf:"varint,8,opt,name=rentBalance,proto3" json:"rentBalance,omitempty"`
	Suspended               bool                      `protobuf:"varint,9,opt,name=suspended,proto3" json:"suspended,omitempty"`
	SuspensionReason        string                    `protobuf:"bytes,10,opt,name=suspensionReason,proto3" json:"suspensionReason,omitempty"`
}

func (m *ContractInfoV2) Reset()         { *m = ContractInfoV2{} }
func (m *ContractInfoV2) String() string { return proto.CompactTextString(m) }
func (*ContractInfoV2) ProtoMessage()    {}
func (*ContractInfoV2) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee35557664974a8a, []int{1}
}
func (m *ContractInfoV2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContractInfoV2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContractInfoV2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContractInfoV2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContractInfoV2.Merge(m, src)
}
func (m *ContractInfoV2) XXX_Size() int {
	return m.Size()
}
func (m *ContractInfoV2) XXX_DiscardUnknown() {
	xxx_messageInfo_ContractInfoV2.DiscardUnknown(m)
}

var xxx_messageInfo_ContractInfoV2 proto.InternalMessageInfo

func (m *ContractInfoV2) GetCodeId() uint64 {
	if m != nil {
		return m.CodeId
	}
	return 0
}

func (m *ContractInfoV2) GetContractAddr() string {
	if m != nil {
		return m.ContractAddr
	}
	return ""
}

func (m *ContractInfoV2) GetNeedHook() bool {
	if m != nil {
		return m.NeedHook
	}
	return false
}

func (m *ContractInfoV2) GetNeedOrderMatching() bool {
	if m != nil {
		return m.NeedOrderMatching
	}
	return false
}

func (m *ContractInfoV2) GetDependencies() []*ContractDependencyInfo {
	if m != nil {
		return m.Dependencies
	}
	return nil
}

func (m *ContractInfoV2) GetNumIncomingDependencies() int64 {
	if m != nil {
		return m.NumIncomingDependencies
	}
	return 0
}

func (m *ContractInfoV2) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *ContractInfoV2) GetRentBalance() uint64 {
	if m != nil {
		return m.RentBalance
	}
	return 0
}

func (m *ContractInfoV2) GetSuspended() bool {
	if m != nil {
		return m.Suspended
	}
	return false
}

func (m *ContractInfoV2) GetSuspensionReason() string {
	if m != nil {
		return m.SuspensionReason
	}
	return ""
}

// suppose A is first registered and depends on X, then B is added and depends on X,
// and then C is added and depends on X, then A is the elder sibling to B and B is
// the younger sibling to A, and B is the elder sibling to C and C is the younger to B
type ContractDependencyInfo struct {
	Dependency              string `protobuf:"bytes,1,opt,name=dependency,proto3" json:"dependency,omitempty"`
	ImmediateElderSibling   string `protobuf:"bytes,2,opt,name=immediateElderSibling,proto3" json:"immediateElderSibling,omitempty"`
	ImmediateYoungerSibling string `protobuf:"bytes,3,opt,name=immediateYoungerSibling,proto3" json:"immediateYoungerSibling,omitempty"`
}

func (m *ContractDependencyInfo) Reset()         { *m = ContractDependencyInfo{} }
func (m *ContractDependencyInfo) String() string { return proto.CompactTextString(m) }
func (*ContractDependencyInfo) ProtoMessage()    {}
func (*ContractDependencyInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee35557664974a8a, []int{2}
}
func (m *ContractDependencyInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContractDependencyInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContractDependencyInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContractDependencyInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContractDependencyInfo.Merge(m, src)
}
func (m *ContractDependencyInfo) XXX_Size() int {
	return m.Size()
}
func (m *ContractDependencyInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ContractDependencyInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ContractDependencyInfo proto.InternalMessageInfo

func (m *ContractDependencyInfo) GetDependency() string {
	if m != nil {
		return m.Dependency
	}
	return ""
}

func (m *ContractDependencyInfo) GetImmediateElderSibling() string {
	if m != nil {
		return m.ImmediateElderSibling
	}
	return ""
}

func (m *ContractDependencyInfo) GetImmediateYoungerSibling() string {
	if m != nil {
		return m.ImmediateYoungerSibling
	}
	return ""
}

type LegacyContractInfo struct {
	CodeId                 uint64   `protobuf:"varint,1,opt,name=codeId,proto3" json:"codeId,omitempty"`
	ContractAddr           string   `protobuf:"bytes,2,opt,name=contractAddr,proto3" json:"contractAddr,omitempty"`
	NeedHook               bool     `protobuf:"varint,3,opt,name=needHook,proto3" json:"needHook,omitempty"`
	NeedOrderMatching      bool     `protobuf:"varint,4,opt,name=needOrderMatching,proto3" json:"needOrderMatching,omitempty"`
	DependentContractAddrs []string `protobuf:"bytes,5,rep,name=dependentContractAddrs,proto3" json:"dependentContractAddrs,omitempty"`
}

func (m *LegacyContractInfo) Reset()         { *m = LegacyContractInfo{} }
func (m *LegacyContractInfo) String() string { return proto.CompactTextString(m) }
func (*LegacyContractInfo) ProtoMessage()    {}
func (*LegacyContractInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee35557664974a8a, []int{3}
}
func (m *LegacyContractInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LegacyContractInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LegacyContractInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LegacyContractInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LegacyContractInfo.Merge(m, src)
}
func (m *LegacyContractInfo) XXX_Size() int {
	return m.Size()
}
func (m *LegacyContractInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_LegacyContractInfo.DiscardUnknown(m)
}

var xxx_messageInfo_LegacyContractInfo proto.InternalMessageInfo

func (m *LegacyContractInfo) GetCodeId() uint64 {
	if m != nil {
		return m.CodeId
	}
	return 0
}

func (m *LegacyContractInfo) GetContractAddr() string {
	if m != nil {
		return m.ContractAddr
	}
	return ""
}

func (m *LegacyContractInfo) GetNeedHook() bool {
	if m != nil {
		return m.NeedHook
	}
	return false
}

func (m *LegacyContractInfo) GetNeedOrderMatching() bool {
	if m != nil {
		return m.NeedOrderMatching
	}
	return false
}

func (m *LegacyContractInfo) GetDependentContractAddrs() []string {
	if m != nil {
		return m.DependentContractAddrs
	}
	return nil
}

func init() {
	proto.RegisterType((*ContractInfo)(nil), "seiprotocol.seichain.dex.ContractInfo")
	proto.RegisterType((*ContractInfoV2)(nil), "seiprotocol.seichain.dex.ContractInfoV2")
	proto.RegisterType((*ContractDependencyInfo)(nil), "seiprotocol.seichain.dex.ContractDependencyInfo")
	proto.RegisterType((*LegacyContractInfo)(nil), "seiprotocol.seichain.dex.LegacyContractInfo")
}

func init() { proto.RegisterFile("dex/contract.proto", fileDescriptor_ee35557664974a8a) }

var fileDescriptor_ee35557664974a8a = []byte{
	// 458 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x54, 0x41, 0x8b, 0xd3, 0x40,
	0x14, 0xee, 0x6c, 0xd7, 0x6e, 0xf3, 0xb6, 0x88, 0x0e, 0x58, 0x07, 0x91, 0x10, 0x72, 0x0a, 0xe2,
	0xa6, 0xb2, 0x8a, 0x78, 0x75, 0x77, 0x45, 0x0b, 0x8a, 0x10, 0x45, 0xd0, 0x5b, 0x3a, 0xf3, 0x4c,
	0x07, 0x9b, 0x99, 0x32, 0x33, 0x85, 0xf6, 0x5f, 0xf8, 0x23, 0x3c, 0x78, 0xf0, 0x87, 0x78, 0x5c,
	0x3c, 0x79, 0x94, 0xf6, 0x8f, 0x48, 0xa6, 0x9b, 0x6e, 0x96, 0x6d, 0xef, 0x1e, 0xbc, 0xcd, 0xf7,
	0x7d, 0x33, 0xef, 0xf1, 0x7d, 0xef, 0x25, 0x40, 0x05, 0xce, 0x07, 0x5c, 0x2b, 0x67, 0x72, 0xee,
	0xd2, 0xa9, 0xd1, 0x4e, 0x53, 0x66, 0x51, 0xfa, 0x13, 0xd7, 0x93, 0xd4, 0xa2, 0xe4, 0xe3, 0x5c,
	0xaa, 0x54, 0xe0, 0x3c, 0xfe, 0xb6, 0x07, 0xbd, 0xd3, 0x8b, 0xcb, 0x43, 0xf5, 0x59, 0xd3, 0x3e,
	0x74, 0xb8, 0x16, 0x38, 0x14, 0x8c, 0x44, 0x24, 0xd9, 0xcf, 0x2e, 0x10, 0x8d, 0xa1, 0x57, 0x17,
	0x7d, 0x2e, 0x84, 0x61, 0x7b, 0x11, 0x49, 0x82, 0xec, 0x0a, 0x47, 0xef, 0x41, 0x57, 0x21, 0x8a,
	0x57, 0x5a, 0x7f, 0x61, 0xed, 0x88, 0x24, 0xdd, 0x6c, 0x83, 0xe9, 0x43, 0xb8, 0x5d, 0x9d, 0xdf,
	0x1a, 0x81, 0xe6, 0x4d, 0xee, 0xf8, 0x58, 0xaa, 0x82, 0xed, 0xfb, 0x4b, 0xd7, 0x05, 0xfa, 0x1e,
	0x7a, 0x02, 0xa7, 0xa8, 0x04, 0x2a, 0x2e, 0xd1, 0xb2, 0x1b, 0x51, 0x3b, 0x39, 0x3c, 0x7e, 0x94,
	0xee, 0xf2, 0x91, 0xd6, 0x1e, 0xce, 0xea, 0x57, 0x8b, 0xca, 0x4d, 0x76, 0xa5, 0x0a, 0x7d, 0x06,
	0x77, 0xd5, 0xac, 0x1c, 0x2a, 0xae, 0x4b, 0xa9, 0x8a, 0xb3, 0x66, 0x83, 0x4e, 0x44, 0x92, 0x76,
	0xb6, 0x4b, 0x8e, 0x7f, 0xb4, 0xe1, 0x66, 0x33, 0xa6, 0x0f, 0xc7, 0xff, 0x83, 0xda, 0x26, 0x53,
	0x06, 0x07, 0xdc, 0x60, 0xee, 0xb4, 0x61, 0x07, 0xde, 0x78, 0x0d, 0x69, 0x04, 0x87, 0x06, 0x95,
	0x3b, 0xc9, 0x27, 0xb9, 0xe2, 0xc8, 0xba, 0x3e, 0xb4, 0x26, 0x45, 0xef, 0x43, 0x60, 0x67, 0xd6,
	0x17, 0x13, 0x2c, 0xf0, 0x8e, 0x2f, 0x09, 0xfa, 0x00, 0x6e, 0xad, 0x81, 0x95, 0x5a, 0x65, 0x98,
	0x5b, 0xad, 0x18, 0xf8, 0x16, 0xd7, 0xf8, 0xf8, 0x3b, 0x81, 0xfe, 0x76, 0xa3, 0x34, 0x04, 0xd8,
	0x58, 0x5d, 0xf8, 0xd1, 0x05, 0x59, 0x83, 0xa1, 0x4f, 0xe0, 0x8e, 0x2c, 0x4b, 0x14, 0x32, 0x77,
	0xf8, 0x62, 0x22, 0xd0, 0xbc, 0x93, 0xa3, 0x49, 0x35, 0x82, 0xf5, 0x1c, 0xb7, 0x8b, 0x55, 0x60,
	0x1b, 0xe1, 0xa3, 0x9e, 0xa9, 0xe2, 0xf2, 0x5d, 0xdb, 0xbf, 0xdb, 0x25, 0xc7, 0xbf, 0x08, 0xd0,
	0xd7, 0x58, 0xe4, 0x7c, 0xf1, 0x0f, 0x7e, 0x86, 0x4f, 0xa1, 0x5f, 0x47, 0xe3, 0x4e, 0x1b, 0x2d,
	0xd6, 0x7b, 0x16, 0x64, 0x3b, 0xd4, 0x93, 0x97, 0x3f, 0x97, 0x21, 0x39, 0x5f, 0x86, 0xe4, 0xcf,
	0x32, 0x24, 0x5f, 0x57, 0x61, 0xeb, 0x7c, 0x15, 0xb6, 0x7e, 0xaf, 0xc2, 0xd6, 0xa7, 0xa3, 0x42,
	0xba, 0xf1, 0x6c, 0x94, 0x72, 0x5d, 0x0e, 0x2c, 0xca, 0xa3, 0x7a, 0x49, 0x3d, 0xf0, 0x5b, 0x3a,
	0x98, 0x0f, 0xaa, 0x3f, 0x98, 0x5b, 0x4c, 0xd1, 0x8e, 0x3a, 0x5e, 0x7f, 0xfc, 0x37, 0x00, 0x00,
	0xff, 0xff, 0x08, 0xe6, 0xd4, 0xac, 0xd5, 0x04, 0x00, 0x00,
}

func (m *ContractInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContractInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContractInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NumIncomingDependencies != 0 {
		i = encodeVarintContract(dAtA, i, uint64(m.NumIncomingDependencies))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Dependencies) > 0 {
		for iNdEx := len(m.Dependencies) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Dependencies[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintContract(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.NeedOrderMatching {
		i--
		if m.NeedOrderMatching {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.NeedHook {
		i--
		if m.NeedHook {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.ContractAddr) > 0 {
		i -= len(m.ContractAddr)
		copy(dAtA[i:], m.ContractAddr)
		i = encodeVarintContract(dAtA, i, uint64(len(m.ContractAddr)))
		i--
		dAtA[i] = 0x12
	}
	if m.CodeId != 0 {
		i = encodeVarintContract(dAtA, i, uint64(m.CodeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ContractInfoV2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContractInfoV2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContractInfoV2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SuspensionReason) > 0 {
		i -= len(m.SuspensionReason)
		copy(dAtA[i:], m.SuspensionReason)
		i = encodeVarintContract(dAtA, i, uint64(len(m.SuspensionReason)))
		i--
		dAtA[i] = 0x52
	}
	if m.Suspended {
		i--
		if m.Suspended {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.RentBalance != 0 {
		i = encodeVarintContract(dAtA, i, uint64(m.RentBalance))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintContract(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x3a
	}
	if m.NumIncomingDependencies != 0 {
		i = encodeVarintContract(dAtA, i, uint64(m.NumIncomingDependencies))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Dependencies) > 0 {
		for iNdEx := len(m.Dependencies) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Dependencies[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintContract(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.NeedOrderMatching {
		i--
		if m.NeedOrderMatching {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.NeedHook {
		i--
		if m.NeedHook {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.ContractAddr) > 0 {
		i -= len(m.ContractAddr)
		copy(dAtA[i:], m.ContractAddr)
		i = encodeVarintContract(dAtA, i, uint64(len(m.ContractAddr)))
		i--
		dAtA[i] = 0x12
	}
	if m.CodeId != 0 {
		i = encodeVarintContract(dAtA, i, uint64(m.CodeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ContractDependencyInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContractDependencyInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContractDependencyInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ImmediateYoungerSibling) > 0 {
		i -= len(m.ImmediateYoungerSibling)
		copy(dAtA[i:], m.ImmediateYoungerSibling)
		i = encodeVarintContract(dAtA, i, uint64(len(m.ImmediateYoungerSibling)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ImmediateElderSibling) > 0 {
		i -= len(m.ImmediateElderSibling)
		copy(dAtA[i:], m.ImmediateElderSibling)
		i = encodeVarintContract(dAtA, i, uint64(len(m.ImmediateElderSibling)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Dependency) > 0 {
		i -= len(m.Dependency)
		copy(dAtA[i:], m.Dependency)
		i = encodeVarintContract(dAtA, i, uint64(len(m.Dependency)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LegacyContractInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LegacyContractInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LegacyContractInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DependentContractAddrs) > 0 {
		for iNdEx := len(m.DependentContractAddrs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DependentContractAddrs[iNdEx])
			copy(dAtA[i:], m.DependentContractAddrs[iNdEx])
			i = encodeVarintContract(dAtA, i, uint64(len(m.DependentContractAddrs[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.NeedOrderMatching {
		i--
		if m.NeedOrderMatching {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.NeedHook {
		i--
		if m.NeedHook {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.ContractAddr) > 0 {
		i -= len(m.ContractAddr)
		copy(dAtA[i:], m.ContractAddr)
		i = encodeVarintContract(dAtA, i, uint64(len(m.ContractAddr)))
		i--
		dAtA[i] = 0x12
	}
	if m.CodeId != 0 {
		i = encodeVarintContract(dAtA, i, uint64(m.CodeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintContract(dAtA []byte, offset int, v uint64) int {
	offset -= sovContract(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ContractInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CodeId != 0 {
		n += 1 + sovContract(uint64(m.CodeId))
	}
	l = len(m.ContractAddr)
	if l > 0 {
		n += 1 + l + sovContract(uint64(l))
	}
	if m.NeedHook {
		n += 2
	}
	if m.NeedOrderMatching {
		n += 2
	}
	if len(m.Dependencies) > 0 {
		for _, e := range m.Dependencies {
			l = e.Size()
			n += 1 + l + sovContract(uint64(l))
		}
	}
	if m.NumIncomingDependencies != 0 {
		n += 1 + sovContract(uint64(m.NumIncomingDependencies))
	}
	return n
}

func (m *ContractInfoV2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CodeId != 0 {
		n += 1 + sovContract(uint64(m.CodeId))
	}
	l = len(m.ContractAddr)
	if l > 0 {
		n += 1 + l + sovContract(uint64(l))
	}
	if m.NeedHook {
		n += 2
	}
	if m.NeedOrderMatching {
		n += 2
	}
	if len(m.Dependencies) > 0 {
		for _, e := range m.Dependencies {
			l = e.Size()
			n += 1 + l + sovContract(uint64(l))
		}
	}
	if m.NumIncomingDependencies != 0 {
		n += 1 + sovContract(uint64(m.NumIncomingDependencies))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovContract(uint64(l))
	}
	if m.RentBalance != 0 {
		n += 1 + sovContract(uint64(m.RentBalance))
	}
	if m.Suspended {
		n += 2
	}
	l = len(m.SuspensionReason)
	if l > 0 {
		n += 1 + l + sovContract(uint64(l))
	}
	return n
}

func (m *ContractDependencyInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Dependency)
	if l > 0 {
		n += 1 + l + sovContract(uint64(l))
	}
	l = len(m.ImmediateElderSibling)
	if l > 0 {
		n += 1 + l + sovContract(uint64(l))
	}
	l = len(m.ImmediateYoungerSibling)
	if l > 0 {
		n += 1 + l + sovContract(uint64(l))
	}
	return n
}

func (m *LegacyContractInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CodeId != 0 {
		n += 1 + sovContract(uint64(m.CodeId))
	}
	l = len(m.ContractAddr)
	if l > 0 {
		n += 1 + l + sovContract(uint64(l))
	}
	if m.NeedHook {
		n += 2
	}
	if m.NeedOrderMatching {
		n += 2
	}
	if len(m.DependentContractAddrs) > 0 {
		for _, s := range m.DependentContractAddrs {
			l = len(s)
			n += 1 + l + sovContract(uint64(l))
		}
	}
	return n
}

func sovContract(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozContract(x uint64) (n int) {
	return sovContract(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ContractInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContract
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContractInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContractInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodeId", wireType)
			}
			m.CodeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CodeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedHook", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NeedHook = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedOrderMatching", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NeedOrderMatching = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dependencies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dependencies = append(m.Dependencies, &ContractDependencyInfo{})
			if err := m.Dependencies[len(m.Dependencies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumIncomingDependencies", wireType)
			}
			m.NumIncomingDependencies = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumIncomingDependencies |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipContract(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContract
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContractInfoV2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContract
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContractInfoV2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContractInfoV2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodeId", wireType)
			}
			m.CodeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CodeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedHook", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NeedHook = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedOrderMatching", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NeedOrderMatching = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dependencies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dependencies = append(m.Dependencies, &ContractDependencyInfo{})
			if err := m.Dependencies[len(m.Dependencies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumIncomingDependencies", wireType)
			}
			m.NumIncomingDependencies = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumIncomingDependencies |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RentBalance", wireType)
			}
			m.RentBalance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RentBalance |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Suspended", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Suspended = bool(v != 0)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuspensionReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SuspensionReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipContract(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContract
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContractDependencyInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContract
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContractDependencyInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContractDependencyInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dependency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dependency = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImmediateElderSibling", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImmediateElderSibling = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImmediateYoungerSibling", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImmediateYoungerSibling = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipContract(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContract
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LegacyContractInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContract
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LegacyContractInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LegacyContractInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodeId", wireType)
			}
			m.CodeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CodeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedHook", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NeedHook = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedOrderMatching", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NeedOrderMatching = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DependentContractAddrs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DependentContractAddrs = append(m.DependentContractAddrs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipContract(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContract
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipContract(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowContract
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowContract
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowContract
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthContract
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupContract
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthContract
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthContract        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowContract          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupContract = fmt.Errorf("proto: unexpected end of group")
)
