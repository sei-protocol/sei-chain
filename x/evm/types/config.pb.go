// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: evm/config.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// XXTime fields indicate upgrade timestamps. For example, a ShanghaiTime
// of 42198537129 means the chain upgraded to the Shanghai version at timestamp 42198537129.
// A value of 0 means the upgrade is included in the genesis of the EVM on Sei.
// -1 means upgrade not reached yet.
type ChainConfig struct {
	CancunTime             int64  `protobuf:"varint,1,opt,name=cancun_time,json=cancunTime,proto3" json:"cancun_time,omitempty" yaml:"cancun_time"`
	PragueTime             int64  `protobuf:"varint,2,opt,name=prague_time,json=pragueTime,proto3" json:"prague_time,omitempty" yaml:"prague_time"`
	VerkleTime             int64  `protobuf:"varint,3,opt,name=verkle_time,json=verkleTime,proto3" json:"verkle_time,omitempty" yaml:"verkle_time"`
	SeiSstoreSetGasEip2200 uint64 `protobuf:"varint,4,opt,name=sei_sstore_set_gas_eip2200,json=seiSstoreSetGasEip2200,proto3" json:"sei_sstore_set_gas_eip2200,omitempty"`
}

func (m *ChainConfig) Reset()         { *m = ChainConfig{} }
func (m *ChainConfig) String() string { return proto.CompactTextString(m) }
func (*ChainConfig) ProtoMessage()    {}
func (*ChainConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_95b591dca6bd862e, []int{0}
}
func (m *ChainConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChainConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChainConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChainConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainConfig.Merge(m, src)
}
func (m *ChainConfig) XXX_Size() int {
	return m.Size()
}
func (m *ChainConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ChainConfig proto.InternalMessageInfo

func (m *ChainConfig) GetCancunTime() int64 {
	if m != nil {
		return m.CancunTime
	}
	return 0
}

func (m *ChainConfig) GetPragueTime() int64 {
	if m != nil {
		return m.PragueTime
	}
	return 0
}

func (m *ChainConfig) GetVerkleTime() int64 {
	if m != nil {
		return m.VerkleTime
	}
	return 0
}

func (m *ChainConfig) GetSeiSstoreSetGasEip2200() uint64 {
	if m != nil {
		return m.SeiSstoreSetGasEip2200
	}
	return 0
}

func init() {
	proto.RegisterType((*ChainConfig)(nil), "seiprotocol.seichain.evm.ChainConfig")
}

func init() { proto.RegisterFile("evm/config.proto", fileDescriptor_95b591dca6bd862e) }

var fileDescriptor_95b591dca6bd862e = []byte{
	// 284 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0xb1, 0x6a, 0xc3, 0x30,
	0x14, 0x45, 0xad, 0x26, 0x74, 0x50, 0x96, 0x62, 0x4a, 0x30, 0x19, 0xd4, 0xe0, 0x29, 0x4b, 0xec,
	0x90, 0x0e, 0x85, 0x8c, 0x09, 0x25, 0xbb, 0xd3, 0xa9, 0x8b, 0x51, 0xc4, 0xab, 0x22, 0x6a, 0x59,
	0xc6, 0x92, 0x4d, 0xf3, 0x17, 0xfd, 0xac, 0x8e, 0x19, 0x3b, 0x95, 0x62, 0xff, 0x41, 0xe9, 0x07,
	0x14, 0x4b, 0x0d, 0x98, 0x6c, 0xef, 0x72, 0xee, 0x79, 0xc3, 0xc5, 0x37, 0x50, 0xcb, 0x98, 0xa9,
	0xfc, 0x45, 0xf0, 0xa8, 0x28, 0x95, 0x51, 0x7e, 0xa0, 0x41, 0xd8, 0x8b, 0xa9, 0x2c, 0xd2, 0x20,
	0xd8, 0x81, 0x8a, 0x3c, 0x82, 0x5a, 0x4e, 0x6e, 0xb9, 0xe2, 0xca, 0xa2, 0xb8, 0xbb, 0x5c, 0x3f,
	0xfc, 0x45, 0x78, 0xb4, 0xe9, 0x3a, 0x1b, 0xfb, 0xc5, 0x7f, 0xc0, 0x23, 0x46, 0x73, 0x56, 0xe5,
	0xa9, 0x11, 0x12, 0x02, 0x34, 0x45, 0xb3, 0xc1, 0x7a, 0xfc, 0xf3, 0x75, 0xe7, 0x1f, 0xa9, 0xcc,
	0x56, 0x61, 0x0f, 0x86, 0x09, 0x76, 0xe9, 0x49, 0x48, 0xe8, 0xc4, 0xa2, 0xa4, 0xbc, 0x02, 0x27,
	0x5e, 0x5d, 0x8a, 0x3d, 0x18, 0x26, 0xd8, 0xa5, 0xb3, 0x58, 0x43, 0xf9, 0x9a, 0xfd, 0x8b, 0x83,
	0x4b, 0xb1, 0x07, 0xc3, 0x04, 0xbb, 0x64, 0xc5, 0x15, 0x9e, 0x68, 0x10, 0xa9, 0xd6, 0x46, 0x95,
	0x90, 0x6a, 0x30, 0x29, 0xa7, 0x3a, 0x05, 0x51, 0x2c, 0x97, 0x8b, 0x45, 0x30, 0x9c, 0xa2, 0xd9,
	0x30, 0x19, 0x6b, 0x10, 0x3b, 0x5b, 0xd8, 0x81, 0xd9, 0x52, 0xfd, 0xe8, 0xe8, 0x7a, 0xfb, 0xd1,
	0x10, 0x74, 0x6a, 0x08, 0xfa, 0x6e, 0x08, 0x7a, 0x6f, 0x89, 0x77, 0x6a, 0x89, 0xf7, 0xd9, 0x12,
	0xef, 0x79, 0xce, 0x85, 0x39, 0x54, 0xfb, 0x88, 0x29, 0x19, 0x6b, 0x10, 0xf3, 0xf3, 0x98, 0x36,
	0xd8, 0x35, 0xe3, 0xb7, 0xb8, 0x9b, 0xdd, 0x1c, 0x0b, 0xd0, 0xfb, 0x6b, 0xcb, 0xef, 0xff, 0x02,
	0x00, 0x00, 0xff, 0xff, 0x87, 0x38, 0x00, 0x39, 0x8a, 0x01, 0x00, 0x00,
}

func (m *ChainConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChainConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChainConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SeiSstoreSetGasEip2200 != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.SeiSstoreSetGasEip2200))
		i--
		dAtA[i] = 0x20
	}
	if m.VerkleTime != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.VerkleTime))
		i--
		dAtA[i] = 0x18
	}
	if m.PragueTime != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.PragueTime))
		i--
		dAtA[i] = 0x10
	}
	if m.CancunTime != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.CancunTime))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintConfig(dAtA []byte, offset int, v uint64) int {
	offset -= sovConfig(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ChainConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CancunTime != 0 {
		n += 1 + sovConfig(uint64(m.CancunTime))
	}
	if m.PragueTime != 0 {
		n += 1 + sovConfig(uint64(m.PragueTime))
	}
	if m.VerkleTime != 0 {
		n += 1 + sovConfig(uint64(m.VerkleTime))
	}
	if m.SeiSstoreSetGasEip2200 != 0 {
		n += 1 + sovConfig(uint64(m.SeiSstoreSetGasEip2200))
	}
	return n
}

func sovConfig(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozConfig(x uint64) (n int) {
	return sovConfig(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ChainConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChainConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChainConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancunTime", wireType)
			}
			m.CancunTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CancunTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PragueTime", wireType)
			}
			m.PragueTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PragueTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerkleTime", wireType)
			}
			m.VerkleTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VerkleTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeiSstoreSetGasEip2200", wireType)
			}
			m.SeiSstoreSetGasEip2200 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeiSstoreSetGasEip2200 |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipConfig(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthConfig
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupConfig
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthConfig
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthConfig        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowConfig          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupConfig = fmt.Errorf("proto: unexpected end of group")
)
