// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: confidentialtransfers/confidentialtransfers.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// CtAccount represents an confidentialtransfers account state
type CtAccount struct {
	PublicKey                   []byte `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	PendingBalanceLo            []byte `protobuf:"bytes,2,opt,name=pending_balance_lo,json=pendingBalanceLo,proto3" json:"pending_balance_lo,omitempty"`
	PendingBalanceHi            []byte `protobuf:"bytes,3,opt,name=pending_balance_hi,json=pendingBalanceHi,proto3" json:"pending_balance_hi,omitempty"`
	PendingBalanceCreditCounter uint32 `protobuf:"varint,4,opt,name=pending_balance_credit_counter,json=pendingBalanceCreditCounter,proto3" json:"pending_balance_credit_counter,omitempty"`
	AvailableBalance            []byte `protobuf:"bytes,5,opt,name=available_balance,json=availableBalance,proto3" json:"available_balance,omitempty"`
	DecryptableAvailableBalance string `protobuf:"bytes,6,opt,name=decryptable_available_balance,json=decryptableAvailableBalance,proto3" json:"decryptable_available_balance,omitempty"`
}

func (m *CtAccount) Reset()         { *m = CtAccount{} }
func (m *CtAccount) String() string { return proto.CompactTextString(m) }
func (*CtAccount) ProtoMessage()    {}
func (*CtAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_603bca88a875374b, []int{0}
}
func (m *CtAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CtAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CtAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CtAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CtAccount.Merge(m, src)
}
func (m *CtAccount) XXX_Size() int {
	return m.Size()
}
func (m *CtAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_CtAccount.DiscardUnknown(m)
}

var xxx_messageInfo_CtAccount proto.InternalMessageInfo

func (m *CtAccount) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *CtAccount) GetPendingBalanceLo() []byte {
	if m != nil {
		return m.PendingBalanceLo
	}
	return nil
}

func (m *CtAccount) GetPendingBalanceHi() []byte {
	if m != nil {
		return m.PendingBalanceHi
	}
	return nil
}

func (m *CtAccount) GetPendingBalanceCreditCounter() uint32 {
	if m != nil {
		return m.PendingBalanceCreditCounter
	}
	return 0
}

func (m *CtAccount) GetAvailableBalance() []byte {
	if m != nil {
		return m.AvailableBalance
	}
	return nil
}

func (m *CtAccount) GetDecryptableAvailableBalance() string {
	if m != nil {
		return m.DecryptableAvailableBalance
	}
	return ""
}

func init() {
	proto.RegisterType((*CtAccount)(nil), "seiprotocol.seichain.confidentialtransfers.CtAccount")
}

func init() { proto.RegisterFile("confidentialtransfers/confidentialtransfers.proto", fileDescriptor_603bca88a875374b) }

var fileDescriptor_603bca88a875374b = []byte{
	// 309 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0xd1, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x06, 0xe0, 0x6e, 0xd5, 0x42, 0x17, 0x05, 0x5d, 0x3c, 0x04, 0x4b, 0xd7, 0xea, 0xa9, 0xa0,
	0x26, 0x07, 0xc1, 0x7b, 0x9b, 0x8b, 0xa0, 0x07, 0xe9, 0xd1, 0x4b, 0xd8, 0x6c, 0xc6, 0x74, 0x70,
	0xdd, 0x0d, 0xc9, 0x56, 0xcc, 0x5b, 0xf8, 0x40, 0x3e, 0x80, 0xc7, 0x1e, 0x3d, 0x4a, 0xf3, 0x22,
	0xe2, 0xa6, 0x95, 0xb4, 0xf6, 0x36, 0x93, 0xf9, 0xfe, 0xc9, 0xc2, 0xd0, 0x53, 0x69, 0xf4, 0x13,
	0x26, 0xa0, 0x2d, 0x0a, 0x15, 0x34, 0x1b, 0x3f, 0xcb, 0x8d, 0x35, 0xec, 0xac, 0x00, 0x74, 0x95,
	0x34, 0xca, 0x2f, 0x00, 0xe5, 0x54, 0xa0, 0xf6, 0x9b, 0xf0, 0xe4, 0x38, 0x35, 0xa9, 0x71, 0x26,
	0xf8, 0xad, 0xea, 0xe0, 0xf9, 0x47, 0x9b, 0x76, 0x43, 0x3b, 0x92, 0xd2, 0xcc, 0xb4, 0x65, 0x7d,
	0x4a, 0xb3, 0x59, 0xac, 0x50, 0x46, 0xcf, 0x50, 0x7a, 0x64, 0x40, 0x86, 0xfb, 0x93, 0x6e, 0xfd,
	0xe5, 0x0e, 0x4a, 0x76, 0x49, 0x59, 0x06, 0x3a, 0x41, 0x9d, 0x46, 0xb1, 0x50, 0x42, 0x4b, 0x88,
	0x94, 0xf1, 0xda, 0x8e, 0x1d, 0x2e, 0x27, 0xe3, 0x7a, 0x70, 0x6f, 0xb6, 0xe9, 0x29, 0x7a, 0x3b,
	0xdb, 0xf4, 0x2d, 0xb2, 0x90, 0xf2, 0x4d, 0x2d, 0x73, 0x48, 0xd0, 0x46, 0xee, 0x69, 0x90, 0x7b,
	0xbb, 0x03, 0x32, 0x3c, 0x98, 0xf4, 0xd6, 0x93, 0xa1, 0x33, 0x61, 0x4d, 0xd8, 0x05, 0x3d, 0x12,
	0xaf, 0x02, 0x95, 0x88, 0x15, 0xac, 0xd6, 0x78, 0x7b, 0xf5, 0x1f, 0xff, 0x06, 0xcb, 0x24, 0x1b,
	0xd3, 0x7e, 0x02, 0x32, 0x2f, 0x33, 0xeb, 0xf8, 0xff, 0x60, 0x67, 0x40, 0x86, 0xdd, 0x49, 0xaf,
	0x81, 0x46, 0x1b, 0x3b, 0xc6, 0x0f, 0x9f, 0x0b, 0x4e, 0xe6, 0x0b, 0x4e, 0xbe, 0x17, 0x9c, 0xbc,
	0x57, 0xbc, 0x35, 0xaf, 0x78, 0xeb, 0xab, 0xe2, 0xad, 0xc7, 0x9b, 0x14, 0xed, 0x74, 0x16, 0xfb,
	0xd2, 0xbc, 0x04, 0x05, 0xe0, 0xd5, 0xea, 0x3a, 0xae, 0x71, 0xe7, 0x09, 0xde, 0xd6, 0x2e, 0x19,
	0xd8, 0x32, 0x83, 0x22, 0xee, 0x38, 0x78, 0xfd, 0x13, 0x00, 0x00, 0xff, 0xff, 0x69, 0x23, 0x5f,
	0x36, 0xf3, 0x01, 0x00, 0x00,
}

func (m *CtAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CtAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CtAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DecryptableAvailableBalance) > 0 {
		i -= len(m.DecryptableAvailableBalance)
		copy(dAtA[i:], m.DecryptableAvailableBalance)
		i = encodeVarintConfidential(dAtA, i, uint64(len(m.DecryptableAvailableBalance)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.AvailableBalance) > 0 {
		i -= len(m.AvailableBalance)
		copy(dAtA[i:], m.AvailableBalance)
		i = encodeVarintConfidential(dAtA, i, uint64(len(m.AvailableBalance)))
		i--
		dAtA[i] = 0x2a
	}
	if m.PendingBalanceCreditCounter != 0 {
		i = encodeVarintConfidential(dAtA, i, uint64(m.PendingBalanceCreditCounter))
		i--
		dAtA[i] = 0x20
	}
	if len(m.PendingBalanceHi) > 0 {
		i -= len(m.PendingBalanceHi)
		copy(dAtA[i:], m.PendingBalanceHi)
		i = encodeVarintConfidential(dAtA, i, uint64(len(m.PendingBalanceHi)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PendingBalanceLo) > 0 {
		i -= len(m.PendingBalanceLo)
		copy(dAtA[i:], m.PendingBalanceLo)
		i = encodeVarintConfidential(dAtA, i, uint64(len(m.PendingBalanceLo)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintConfidential(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintConfidential(dAtA []byte, offset int, v uint64) int {
	offset -= sovConfidential(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CtAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovConfidential(uint64(l))
	}
	l = len(m.PendingBalanceLo)
	if l > 0 {
		n += 1 + l + sovConfidential(uint64(l))
	}
	l = len(m.PendingBalanceHi)
	if l > 0 {
		n += 1 + l + sovConfidential(uint64(l))
	}
	if m.PendingBalanceCreditCounter != 0 {
		n += 1 + sovConfidential(uint64(m.PendingBalanceCreditCounter))
	}
	l = len(m.AvailableBalance)
	if l > 0 {
		n += 1 + l + sovConfidential(uint64(l))
	}
	l = len(m.DecryptableAvailableBalance)
	if l > 0 {
		n += 1 + l + sovConfidential(uint64(l))
	}
	return n
}

func sovConfidential(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozConfidential(x uint64) (n int) {
	return sovConfidential(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CtAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfidential
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CtAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CtAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfidential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthConfidential
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthConfidential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingBalanceLo", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfidential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthConfidential
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthConfidential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendingBalanceLo = append(m.PendingBalanceLo[:0], dAtA[iNdEx:postIndex]...)
			if m.PendingBalanceLo == nil {
				m.PendingBalanceLo = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingBalanceHi", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfidential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthConfidential
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthConfidential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendingBalanceHi = append(m.PendingBalanceHi[:0], dAtA[iNdEx:postIndex]...)
			if m.PendingBalanceHi == nil {
				m.PendingBalanceHi = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingBalanceCreditCounter", wireType)
			}
			m.PendingBalanceCreditCounter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfidential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PendingBalanceCreditCounter |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailableBalance", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfidential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthConfidential
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthConfidential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AvailableBalance = append(m.AvailableBalance[:0], dAtA[iNdEx:postIndex]...)
			if m.AvailableBalance == nil {
				m.AvailableBalance = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecryptableAvailableBalance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfidential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfidential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfidential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DecryptableAvailableBalance = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfidential(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConfidential
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipConfidential(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowConfidential
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfidential
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfidential
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthConfidential
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupConfidential
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthConfidential
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthConfidential        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowConfidential          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupConfidential = fmt.Errorf("proto: unexpected end of group")
)
