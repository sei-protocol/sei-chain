// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: confidentialtransfers/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgTransfer represents a message to send coins from one account to another.
type MsgTransfer struct {
	FromAddress        string          `protobuf:"bytes,1,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty" yaml:"from_address"`
	ToAddress          string          `protobuf:"bytes,2,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty" yaml:"to_address"`
	Denom              string          `protobuf:"bytes,3,opt,name=denom,proto3" json:"denom,omitempty" yaml:"denom"`
	FromAmountLo       *Ciphertext     `protobuf:"bytes,4,opt,name=from_amount_lo,json=fromAmountLo,proto3" json:"from_amount_lo,omitempty" yaml:"from_amount_lo"`
	FromAmountHi       *Ciphertext     `protobuf:"bytes,5,opt,name=from_amount_hi,json=fromAmountHi,proto3" json:"from_amount_hi,omitempty" yaml:"from_amount_hi"`
	ToAmountLo         *Ciphertext     `protobuf:"bytes,6,opt,name=to_amount_lo,json=toAmountLo,proto3" json:"to_amount_lo,omitempty" yaml:"to_amount_lo"`
	ToAmountHi         *Ciphertext     `protobuf:"bytes,7,opt,name=to_amount_hi,json=toAmountHi,proto3" json:"to_amount_hi,omitempty" yaml:"to_amount_hi"`
	RemainingBalance   *Ciphertext     `protobuf:"bytes,8,opt,name=remaining_balance,json=remainingBalance,proto3" json:"remaining_balance,omitempty" yaml:"decryptable_balance"`
	DecryptableBalance string          `protobuf:"bytes,9,opt,name=decryptable_balance,json=decryptableBalance,proto3" json:"decryptable_balance,omitempty" yaml:"decryptable_balance"`
	Proofs             *TransferProofs `protobuf:"bytes,10,opt,name=proofs,proto3" json:"proofs,omitempty" yaml:"proofs"`
	Auditors           []*Auditor      `protobuf:"bytes,11,rep,name=auditors,proto3" json:"auditors,omitempty" yaml:"auditors"`
}

func (m *MsgTransfer) Reset()         { *m = MsgTransfer{} }
func (m *MsgTransfer) String() string { return proto.CompactTextString(m) }
func (*MsgTransfer) ProtoMessage()    {}
func (*MsgTransfer) Descriptor() ([]byte, []int) {
	return fileDescriptor_34e86c2ca2c678f9, []int{0}
}
func (m *MsgTransfer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTransfer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTransfer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTransfer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTransfer.Merge(m, src)
}
func (m *MsgTransfer) XXX_Size() int {
	return m.Size()
}
func (m *MsgTransfer) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTransfer.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTransfer proto.InternalMessageInfo

// MsgSendResponse defines the Msg/Send response type.
type MsgTransferResponse struct {
}

func (m *MsgTransferResponse) Reset()         { *m = MsgTransferResponse{} }
func (m *MsgTransferResponse) String() string { return proto.CompactTextString(m) }
func (*MsgTransferResponse) ProtoMessage()    {}
func (*MsgTransferResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_34e86c2ca2c678f9, []int{1}
}
func (m *MsgTransferResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTransferResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTransferResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTransferResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTransferResponse.Merge(m, src)
}
func (m *MsgTransferResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgTransferResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTransferResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTransferResponse proto.InternalMessageInfo

type Auditor struct {
	AuditorAddress                string                             `protobuf:"bytes,1,opt,name=auditor_address,json=auditorAddress,proto3" json:"auditor_address,omitempty" yaml:"address"`
	EncryptedTransferAmountLo     *Ciphertext                        `protobuf:"bytes,2,opt,name=encrypted_transfer_amount_lo,json=encryptedTransferAmountLo,proto3" json:"encrypted_transfer_amount_lo,omitempty" yaml:"encrypted_transfer_amount_lo"`
	EncryptedTransferAmountHi     *Ciphertext                        `protobuf:"bytes,3,opt,name=encrypted_transfer_amount_hi,json=encryptedTransferAmountHi,proto3" json:"encrypted_transfer_amount_hi,omitempty" yaml:"encrypted_transfer_amount_hi"`
	TransferAmountLoValidityProof *CiphertextValidityProof           `protobuf:"bytes,4,opt,name=transfer_amount_lo_validity_proof,json=transferAmountLoValidityProof,proto3" json:"transfer_amount_lo_validity_proof,omitempty" yaml:"transfer_amount_lo_validity_proof"`
	TransferAmountHiValidityProof *CiphertextValidityProof           `protobuf:"bytes,5,opt,name=transfer_amount_hi_validity_proof,json=transferAmountHiValidityProof,proto3" json:"transfer_amount_hi_validity_proof,omitempty" yaml:"transfer_amount_hi_validity_proof"`
	TransferAmountLoEqualityProof *CiphertextCiphertextEqualityProof `protobuf:"bytes,6,opt,name=transfer_amount_lo_equality_proof,json=transferAmountLoEqualityProof,proto3" json:"transfer_amount_lo_equality_proof,omitempty" yaml:"transfer_amount_lo_equality_proof"`
	TransferAmountHiEqualityProof *CiphertextCiphertextEqualityProof `protobuf:"bytes,7,opt,name=transfer_amount_hi_equality_proof,json=transferAmountHiEqualityProof,proto3" json:"transfer_amount_hi_equality_proof,omitempty" yaml:"transfer_amount_hi_equality_proof"`
}

func (m *Auditor) Reset()         { *m = Auditor{} }
func (m *Auditor) String() string { return proto.CompactTextString(m) }
func (*Auditor) ProtoMessage()    {}
func (*Auditor) Descriptor() ([]byte, []int) {
	return fileDescriptor_34e86c2ca2c678f9, []int{2}
}
func (m *Auditor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Auditor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Auditor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Auditor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Auditor.Merge(m, src)
}
func (m *Auditor) XXX_Size() int {
	return m.Size()
}
func (m *Auditor) XXX_DiscardUnknown() {
	xxx_messageInfo_Auditor.DiscardUnknown(m)
}

var xxx_messageInfo_Auditor proto.InternalMessageInfo

func (m *Auditor) GetAuditorAddress() string {
	if m != nil {
		return m.AuditorAddress
	}
	return ""
}

func (m *Auditor) GetEncryptedTransferAmountLo() *Ciphertext {
	if m != nil {
		return m.EncryptedTransferAmountLo
	}
	return nil
}

func (m *Auditor) GetEncryptedTransferAmountHi() *Ciphertext {
	if m != nil {
		return m.EncryptedTransferAmountHi
	}
	return nil
}

func (m *Auditor) GetTransferAmountLoValidityProof() *CiphertextValidityProof {
	if m != nil {
		return m.TransferAmountLoValidityProof
	}
	return nil
}

func (m *Auditor) GetTransferAmountHiValidityProof() *CiphertextValidityProof {
	if m != nil {
		return m.TransferAmountHiValidityProof
	}
	return nil
}

func (m *Auditor) GetTransferAmountLoEqualityProof() *CiphertextCiphertextEqualityProof {
	if m != nil {
		return m.TransferAmountLoEqualityProof
	}
	return nil
}

func (m *Auditor) GetTransferAmountHiEqualityProof() *CiphertextCiphertextEqualityProof {
	if m != nil {
		return m.TransferAmountHiEqualityProof
	}
	return nil
}

// Message to be used in apply pending balance instruction/transaction
type MsgApplyPendingBalance struct {
	Address                        string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Denom                          string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	NewDecryptableAvailableBalance string `protobuf:"bytes,3,opt,name=new_decryptable_available_balance,json=newDecryptableAvailableBalance,proto3" json:"new_decryptable_available_balance,omitempty"`
}

func (m *MsgApplyPendingBalance) Reset()         { *m = MsgApplyPendingBalance{} }
func (m *MsgApplyPendingBalance) String() string { return proto.CompactTextString(m) }
func (*MsgApplyPendingBalance) ProtoMessage()    {}
func (*MsgApplyPendingBalance) Descriptor() ([]byte, []int) {
	return fileDescriptor_34e86c2ca2c678f9, []int{3}
}
func (m *MsgApplyPendingBalance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgApplyPendingBalance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgApplyPendingBalance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgApplyPendingBalance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgApplyPendingBalance.Merge(m, src)
}
func (m *MsgApplyPendingBalance) XXX_Size() int {
	return m.Size()
}
func (m *MsgApplyPendingBalance) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgApplyPendingBalance.DiscardUnknown(m)
}

var xxx_messageInfo_MsgApplyPendingBalance proto.InternalMessageInfo

func (m *MsgApplyPendingBalance) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *MsgApplyPendingBalance) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *MsgApplyPendingBalance) GetNewDecryptableAvailableBalance() string {
	if m != nil {
		return m.NewDecryptableAvailableBalance
	}
	return ""
}

type MsgApplyPendingBalanceResponse struct {
}

func (m *MsgApplyPendingBalanceResponse) Reset()         { *m = MsgApplyPendingBalanceResponse{} }
func (m *MsgApplyPendingBalanceResponse) String() string { return proto.CompactTextString(m) }
func (*MsgApplyPendingBalanceResponse) ProtoMessage()    {}
func (*MsgApplyPendingBalanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_34e86c2ca2c678f9, []int{4}
}
func (m *MsgApplyPendingBalanceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgApplyPendingBalanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgApplyPendingBalanceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgApplyPendingBalanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgApplyPendingBalanceResponse.Merge(m, src)
}
func (m *MsgApplyPendingBalanceResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgApplyPendingBalanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgApplyPendingBalanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgApplyPendingBalanceResponse proto.InternalMessageInfo

// Message to be used in close account instruction/transaction
type MsgCloseAccount struct {
	Address string             `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Denom   string             `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	Proof   *CloseAccountProof `protobuf:"bytes,3,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (m *MsgCloseAccount) Reset()         { *m = MsgCloseAccount{} }
func (m *MsgCloseAccount) String() string { return proto.CompactTextString(m) }
func (*MsgCloseAccount) ProtoMessage()    {}
func (*MsgCloseAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_34e86c2ca2c678f9, []int{5}
}
func (m *MsgCloseAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCloseAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCloseAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCloseAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCloseAccount.Merge(m, src)
}
func (m *MsgCloseAccount) XXX_Size() int {
	return m.Size()
}
func (m *MsgCloseAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCloseAccount.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCloseAccount proto.InternalMessageInfo

func (m *MsgCloseAccount) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *MsgCloseAccount) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *MsgCloseAccount) GetProof() *CloseAccountProof {
	if m != nil {
		return m.Proof
	}
	return nil
}

type MsgCloseAccountResponse struct {
}

func (m *MsgCloseAccountResponse) Reset()         { *m = MsgCloseAccountResponse{} }
func (m *MsgCloseAccountResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCloseAccountResponse) ProtoMessage()    {}
func (*MsgCloseAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_34e86c2ca2c678f9, []int{6}
}
func (m *MsgCloseAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCloseAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCloseAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCloseAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCloseAccountResponse.Merge(m, src)
}
func (m *MsgCloseAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCloseAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCloseAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCloseAccountResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgTransfer)(nil), "seiprotocol.seichain.confidentialtransfers.MsgTransfer")
	proto.RegisterType((*MsgTransferResponse)(nil), "seiprotocol.seichain.confidentialtransfers.MsgTransferResponse")
	proto.RegisterType((*Auditor)(nil), "seiprotocol.seichain.confidentialtransfers.Auditor")
	proto.RegisterType((*MsgApplyPendingBalance)(nil), "seiprotocol.seichain.confidentialtransfers.MsgApplyPendingBalance")
	proto.RegisterType((*MsgApplyPendingBalanceResponse)(nil), "seiprotocol.seichain.confidentialtransfers.MsgApplyPendingBalanceResponse")
	proto.RegisterType((*MsgCloseAccount)(nil), "seiprotocol.seichain.confidentialtransfers.MsgCloseAccount")
	proto.RegisterType((*MsgCloseAccountResponse)(nil), "seiprotocol.seichain.confidentialtransfers.MsgCloseAccountResponse")
}

func init() { proto.RegisterFile("confidentialtransfers/tx.proto", fileDescriptor_34e86c2ca2c678f9) }

var fileDescriptor_34e86c2ca2c678f9 = []byte{
	// 925 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x57, 0x4f, 0x6f, 0xe3, 0x44,
	0x14, 0x8f, 0xb7, 0xb4, 0x4d, 0x27, 0xa5, 0xdd, 0x3a, 0x5b, 0xd6, 0x8d, 0xc0, 0xee, 0x0e, 0x12,
	0x44, 0x08, 0x12, 0xa9, 0x8b, 0x40, 0xea, 0x0a, 0xad, 0xe2, 0x82, 0x54, 0x10, 0x11, 0x2b, 0x83,
	0x90, 0xe0, 0x12, 0x39, 0xf6, 0xc4, 0x1e, 0xe1, 0x78, 0xbc, 0x1e, 0x67, 0xdb, 0x70, 0x85, 0x03,
	0xc7, 0x95, 0x90, 0x10, 0xc7, 0x5e, 0x38, 0xf2, 0x09, 0x38, 0x23, 0x38, 0xee, 0x91, 0x93, 0x85,
	0xda, 0x0b, 0x67, 0x7f, 0x02, 0x94, 0x19, 0x8f, 0x63, 0x27, 0xee, 0xee, 0xa6, 0xd9, 0xed, 0xcd,
	0xe3, 0x99, 0xdf, 0x9f, 0xf7, 0xde, 0xcc, 0xf3, 0x18, 0xa8, 0x16, 0xf1, 0x07, 0xd8, 0x46, 0x7e,
	0x84, 0x4d, 0x2f, 0x0a, 0x4d, 0x9f, 0x0e, 0x50, 0x48, 0xdb, 0xd1, 0x69, 0x2b, 0x08, 0x49, 0x44,
	0xe4, 0x77, 0x28, 0xc2, 0xec, 0xc9, 0x22, 0x5e, 0x8b, 0x22, 0x6c, 0xb9, 0x26, 0xf6, 0x5b, 0xa5,
	0xa0, 0xc6, 0x2d, 0x87, 0x38, 0x84, 0x2d, 0x6e, 0x4f, 0x9e, 0x38, 0x43, 0xa3, 0x59, 0xae, 0x60,
	0x85, 0xe3, 0x20, 0x22, 0x4e, 0x68, 0x06, 0xee, 0x38, 0x5d, 0x79, 0x89, 0x97, 0xef, 0xbf, 0xe3,
	0xf3, 0xf0, 0xf7, 0x2a, 0xa8, 0x75, 0xa9, 0xf3, 0x55, 0x3a, 0x23, 0x1f, 0x82, 0xcd, 0x41, 0x48,
	0x86, 0x3d, 0xd3, 0xb6, 0x43, 0x44, 0xa9, 0x22, 0xed, 0x4b, 0xcd, 0x0d, 0xfd, 0x76, 0x12, 0x6b,
	0xf5, 0xb1, 0x39, 0xf4, 0x0e, 0x61, 0x7e, 0x16, 0x1a, 0xb5, 0xc9, 0xb0, 0xc3, 0x47, 0xf2, 0xfb,
	0x00, 0x44, 0x24, 0x43, 0xde, 0x60, 0xc8, 0xdd, 0x24, 0xd6, 0x76, 0x38, 0x72, 0x3a, 0x07, 0x8d,
	0x8d, 0x88, 0x08, 0xd4, 0x5b, 0x60, 0xd5, 0x46, 0x3e, 0x19, 0x2a, 0x2b, 0x0c, 0x70, 0x33, 0x89,
	0xb5, 0x4d, 0x0e, 0x60, 0xaf, 0xa1, 0xc1, 0xa7, 0xe5, 0x13, 0xb0, 0xc5, 0xb5, 0x87, 0x64, 0xe4,
	0x47, 0x3d, 0x8f, 0x28, 0xaf, 0xec, 0x4b, 0xcd, 0xda, 0xc1, 0x07, 0xad, 0xe7, 0x4f, 0x67, 0xeb,
	0x08, 0x07, 0x2e, 0x0a, 0x23, 0x74, 0x1a, 0xe9, 0x7b, 0x49, 0xac, 0xed, 0xe6, 0x63, 0x12, 0xbc,
	0xd0, 0x60, 0x29, 0xe8, 0xb0, 0xf1, 0xe7, 0x64, 0x56, 0xd8, 0xc5, 0xca, 0xea, 0xcb, 0x10, 0x76,
	0x71, 0x41, 0xf8, 0x18, 0xcb, 0x0f, 0xc1, 0xe6, 0x24, 0x67, 0x59, 0xbc, 0x6b, 0x4b, 0xc9, 0xe6,
	0x6a, 0x98, 0x67, 0x85, 0x06, 0x88, 0x48, 0x16, 0x6b, 0x41, 0xd2, 0xc5, 0xca, 0xfa, 0x8b, 0x97,
	0x9c, 0xc4, 0x99, 0x49, 0x1e, 0x63, 0xf9, 0x07, 0x09, 0xec, 0x84, 0x68, 0x68, 0x62, 0x1f, 0xfb,
	0x4e, 0xaf, 0x6f, 0x7a, 0xa6, 0x6f, 0x21, 0xa5, 0xba, 0x94, 0xb0, 0x9a, 0xc4, 0x5a, 0x43, 0x6c,
	0x22, 0x76, 0x2a, 0xcc, 0xbe, 0x87, 0x04, 0x39, 0x34, 0x6e, 0x66, 0x82, 0x3a, 0x7f, 0x25, 0x7f,
	0x01, 0xea, 0x25, 0x2b, 0x95, 0x0d, 0xb6, 0x27, 0x9f, 0x45, 0x27, 0xe7, 0xde, 0x0a, 0x42, 0x04,
	0xd6, 0x82, 0x90, 0x90, 0x01, 0x55, 0x00, 0x0b, 0xe5, 0x70, 0x91, 0x50, 0xc4, 0x71, 0x7c, 0xc0,
	0x18, 0xf4, 0x9d, 0x24, 0xd6, 0x5e, 0xe5, 0xfa, 0x9c, 0x13, 0x1a, 0x29, 0xb9, 0x6c, 0x83, 0xaa,
	0x39, 0xb2, 0x71, 0x44, 0x42, 0xaa, 0xd4, 0xf6, 0x57, 0x9a, 0xb5, 0x83, 0xbb, 0x8b, 0x08, 0x75,
	0x38, 0x56, 0xaf, 0x27, 0xb1, 0xb6, 0xcd, 0x15, 0x04, 0x1d, 0x34, 0x32, 0xe6, 0xc3, 0xea, 0x4f,
	0x67, 0x5a, 0xe5, 0xbf, 0x33, 0xad, 0x02, 0x77, 0x41, 0x3d, 0xd7, 0x2e, 0x0c, 0x44, 0x03, 0xe2,
	0x53, 0x04, 0x7f, 0xdd, 0x00, 0xeb, 0x29, 0x97, 0x7c, 0x0f, 0x6c, 0xa7, 0xc0, 0x99, 0x2e, 0x22,
	0x27, 0xb1, 0xb6, 0x95, 0x8a, 0x88, 0x46, 0xb0, 0x95, 0x2e, 0x15, 0xdd, 0xe0, 0x4c, 0x02, 0xaf,
	0x23, 0x9f, 0x65, 0x13, 0xd9, 0x3d, 0x61, 0x34, 0x77, 0x08, 0x6e, 0x2c, 0xb5, 0x31, 0xde, 0x4e,
	0x62, 0xed, 0x4d, 0x6e, 0xe1, 0x69, 0x2a, 0xd0, 0xd8, 0xcb, 0xa6, 0x45, 0xac, 0xd9, 0x19, 0x79,
	0xba, 0x45, 0x17, 0xb3, 0x46, 0xf6, 0x92, 0x2d, 0x4e, 0x0e, 0xd1, 0x65, 0x16, 0x8f, 0xb1, 0xfc,
	0x87, 0x04, 0xee, 0xcc, 0x47, 0xd5, 0x7b, 0x64, 0x7a, 0xd8, 0xc6, 0xd1, 0xb8, 0xc7, 0x36, 0x4f,
	0xda, 0x3f, 0x8f, 0xae, 0xe6, 0xf3, 0xeb, 0x94, 0x8b, 0x6d, 0x51, 0xfd, 0xdd, 0x24, 0xd6, 0x9a,
	0xe9, 0x49, 0x7f, 0x96, 0x2e, 0x34, 0xde, 0x88, 0x66, 0x72, 0x5a, 0x20, 0x2b, 0x75, 0xef, 0xe2,
	0x59, 0xf7, 0xab, 0xd7, 0xe2, 0x7e, 0x4e, 0x77, 0xce, 0xfd, 0x31, 0x2e, 0xba, 0xff, 0xb3, 0x3c,
	0xf7, 0xe8, 0xe1, 0xc8, 0xf4, 0xa6, 0xee, 0x79, 0x2f, 0xef, 0x5e, 0xcd, 0xfd, 0xf4, 0xe9, 0x93,
	0x94, 0xf5, 0x79, 0xaa, 0x50, 0x74, 0x50, 0x52, 0x85, 0x02, 0x59, 0x69, 0x1c, 0x2e, 0x9e, 0x8d,
	0x63, 0xfd, 0x9a, 0xe3, 0x98, 0x73, 0x50, 0x52, 0x8f, 0x02, 0x19, 0xfc, 0x59, 0x02, 0xaf, 0x75,
	0xa9, 0xd3, 0x09, 0x02, 0x6f, 0xfc, 0x00, 0xf9, 0x76, 0xae, 0xe9, 0x2b, 0x60, 0xbd, 0xd0, 0xa1,
	0x0c, 0x31, 0x94, 0x6f, 0x89, 0x4b, 0x09, 0xbb, 0xc5, 0x88, 0x2b, 0xc8, 0xa7, 0xe0, 0x8e, 0x8f,
	0x4e, 0x7a, 0xf9, 0x6f, 0x80, 0xf9, 0xc8, 0xc4, 0x5e, 0xe1, 0x93, 0xc1, 0xae, 0x31, 0x86, 0xea,
	0xa3, 0x93, 0x8f, 0xa7, 0xeb, 0x3a, 0x62, 0x59, 0x2a, 0x0d, 0xf7, 0x81, 0x5a, 0x6e, 0x2a, 0x6b,
	0xa9, 0xbf, 0x48, 0x60, 0xbb, 0x4b, 0x9d, 0x23, 0x8f, 0x50, 0xd4, 0xb1, 0xac, 0x49, 0x68, 0x0b,
	0x1b, 0xfe, 0x12, 0xac, 0xf2, 0x32, 0xf1, 0x96, 0xf4, 0xd1, 0x42, 0x65, 0xca, 0x09, 0xb3, 0x4c,
	0x1a, 0x9c, 0x0b, 0xee, 0x81, 0xdb, 0x33, 0xbe, 0x84, 0xe7, 0x83, 0xbf, 0x56, 0xc0, 0x4a, 0x97,
	0x3a, 0xf2, 0x8f, 0x12, 0xa8, 0x66, 0x57, 0xca, 0x0f, 0x17, 0x51, 0xcd, 0x7d, 0x5c, 0x1a, 0xf7,
	0xaf, 0x08, 0x14, 0x76, 0xe4, 0xdf, 0x24, 0x50, 0x2f, 0xab, 0xbb, 0xbe, 0x20, 0x71, 0x09, 0x47,
	0xe3, 0xb3, 0xe5, 0x39, 0x32, 0x9f, 0x8f, 0x25, 0xb0, 0x59, 0xa8, 0xf3, 0xbd, 0x05, 0xc9, 0xf3,
	0xe0, 0xc6, 0xd1, 0x12, 0x60, 0x61, 0x49, 0xff, 0xe6, 0xef, 0x73, 0x55, 0x7a, 0x72, 0xae, 0x4a,
	0xff, 0x9e, 0xab, 0xd2, 0xe3, 0x0b, 0xb5, 0xf2, 0xe4, 0x42, 0xad, 0xfc, 0x73, 0xa1, 0x56, 0xbe,
	0xbd, 0xef, 0xe0, 0xc8, 0x1d, 0xf5, 0x5b, 0x16, 0x19, 0xb6, 0x29, 0xc2, 0xef, 0x09, 0x25, 0x36,
	0x60, 0x52, 0xed, 0xd3, 0xf6, 0x25, 0x7f, 0x40, 0xe3, 0x00, 0xd1, 0xfe, 0x1a, 0x43, 0xdc, 0xfd,
	0x3f, 0x00, 0x00, 0xff, 0xff, 0xe8, 0x64, 0xcb, 0x54, 0x27, 0x0d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// Transfer defines a method for sending coins from one account to another account.
	Transfer(ctx context.Context, in *MsgTransfer, opts ...grpc.CallOption) (*MsgTransferResponse, error)
	// ApplyPendingBalance defines a method for applying pending balance to an account.
	ApplyPendingBalance(ctx context.Context, in *MsgApplyPendingBalance, opts ...grpc.CallOption) (*MsgApplyPendingBalanceResponse, error)
	// CloseAccount defines a method for closing an account.
	CloseAccount(ctx context.Context, in *MsgCloseAccount, opts ...grpc.CallOption) (*MsgCloseAccountResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) Transfer(ctx context.Context, in *MsgTransfer, opts ...grpc.CallOption) (*MsgTransferResponse, error) {
	out := new(MsgTransferResponse)
	err := c.cc.Invoke(ctx, "/seiprotocol.seichain.confidentialtransfers.Msg/Transfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ApplyPendingBalance(ctx context.Context, in *MsgApplyPendingBalance, opts ...grpc.CallOption) (*MsgApplyPendingBalanceResponse, error) {
	out := new(MsgApplyPendingBalanceResponse)
	err := c.cc.Invoke(ctx, "/seiprotocol.seichain.confidentialtransfers.Msg/ApplyPendingBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CloseAccount(ctx context.Context, in *MsgCloseAccount, opts ...grpc.CallOption) (*MsgCloseAccountResponse, error) {
	out := new(MsgCloseAccountResponse)
	err := c.cc.Invoke(ctx, "/seiprotocol.seichain.confidentialtransfers.Msg/CloseAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// Transfer defines a method for sending coins from one account to another account.
	Transfer(context.Context, *MsgTransfer) (*MsgTransferResponse, error)
	// ApplyPendingBalance defines a method for applying pending balance to an account.
	ApplyPendingBalance(context.Context, *MsgApplyPendingBalance) (*MsgApplyPendingBalanceResponse, error)
	// CloseAccount defines a method for closing an account.
	CloseAccount(context.Context, *MsgCloseAccount) (*MsgCloseAccountResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) Transfer(ctx context.Context, req *MsgTransfer) (*MsgTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transfer not implemented")
}
func (*UnimplementedMsgServer) ApplyPendingBalance(ctx context.Context, req *MsgApplyPendingBalance) (*MsgApplyPendingBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyPendingBalance not implemented")
}
func (*UnimplementedMsgServer) CloseAccount(ctx context.Context, req *MsgCloseAccount) (*MsgCloseAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseAccount not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_Transfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTransfer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Transfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seiprotocol.seichain.confidentialtransfers.Msg/Transfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Transfer(ctx, req.(*MsgTransfer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ApplyPendingBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgApplyPendingBalance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ApplyPendingBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seiprotocol.seichain.confidentialtransfers.Msg/ApplyPendingBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ApplyPendingBalance(ctx, req.(*MsgApplyPendingBalance))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CloseAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCloseAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CloseAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seiprotocol.seichain.confidentialtransfers.Msg/CloseAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CloseAccount(ctx, req.(*MsgCloseAccount))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "seiprotocol.seichain.confidentialtransfers.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Transfer",
			Handler:    _Msg_Transfer_Handler,
		},
		{
			MethodName: "ApplyPendingBalance",
			Handler:    _Msg_ApplyPendingBalance_Handler,
		},
		{
			MethodName: "CloseAccount",
			Handler:    _Msg_CloseAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "confidentialtransfers/tx.proto",
}

func (m *MsgTransfer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTransfer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTransfer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Auditors) > 0 {
		for iNdEx := len(m.Auditors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Auditors[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if m.Proofs != nil {
		{
			size, err := m.Proofs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if len(m.DecryptableBalance) > 0 {
		i -= len(m.DecryptableBalance)
		copy(dAtA[i:], m.DecryptableBalance)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DecryptableBalance)))
		i--
		dAtA[i] = 0x4a
	}
	if m.RemainingBalance != nil {
		{
			size, err := m.RemainingBalance.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.ToAmountHi != nil {
		{
			size, err := m.ToAmountHi.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.ToAmountLo != nil {
		{
			size, err := m.ToAmountLo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.FromAmountHi != nil {
		{
			size, err := m.FromAmountHi.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.FromAmountLo != nil {
		{
			size, err := m.FromAmountLo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ToAddress) > 0 {
		i -= len(m.ToAddress)
		copy(dAtA[i:], m.ToAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ToAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgTransferResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTransferResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTransferResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Auditor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Auditor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Auditor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TransferAmountHiEqualityProof != nil {
		{
			size, err := m.TransferAmountHiEqualityProof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.TransferAmountLoEqualityProof != nil {
		{
			size, err := m.TransferAmountLoEqualityProof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.TransferAmountHiValidityProof != nil {
		{
			size, err := m.TransferAmountHiValidityProof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.TransferAmountLoValidityProof != nil {
		{
			size, err := m.TransferAmountLoValidityProof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.EncryptedTransferAmountHi != nil {
		{
			size, err := m.EncryptedTransferAmountHi.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.EncryptedTransferAmountLo != nil {
		{
			size, err := m.EncryptedTransferAmountLo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.AuditorAddress) > 0 {
		i -= len(m.AuditorAddress)
		copy(dAtA[i:], m.AuditorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AuditorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgApplyPendingBalance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgApplyPendingBalance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgApplyPendingBalance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewDecryptableAvailableBalance) > 0 {
		i -= len(m.NewDecryptableAvailableBalance)
		copy(dAtA[i:], m.NewDecryptableAvailableBalance)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewDecryptableAvailableBalance)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgApplyPendingBalanceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgApplyPendingBalanceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgApplyPendingBalanceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCloseAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCloseAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCloseAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Proof != nil {
		{
			size, err := m.Proof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCloseAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCloseAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCloseAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgTransfer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ToAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.FromAmountLo != nil {
		l = m.FromAmountLo.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.FromAmountHi != nil {
		l = m.FromAmountHi.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ToAmountLo != nil {
		l = m.ToAmountLo.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ToAmountHi != nil {
		l = m.ToAmountHi.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.RemainingBalance != nil {
		l = m.RemainingBalance.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DecryptableBalance)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Proofs != nil {
		l = m.Proofs.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Auditors) > 0 {
		for _, e := range m.Auditors {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgTransferResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Auditor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AuditorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.EncryptedTransferAmountLo != nil {
		l = m.EncryptedTransferAmountLo.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.EncryptedTransferAmountHi != nil {
		l = m.EncryptedTransferAmountHi.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TransferAmountLoValidityProof != nil {
		l = m.TransferAmountLoValidityProof.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TransferAmountHiValidityProof != nil {
		l = m.TransferAmountHiValidityProof.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TransferAmountLoEqualityProof != nil {
		l = m.TransferAmountLoEqualityProof.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TransferAmountHiEqualityProof != nil {
		l = m.TransferAmountHiEqualityProof.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgApplyPendingBalance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NewDecryptableAvailableBalance)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgApplyPendingBalanceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCloseAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Proof != nil {
		l = m.Proof.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCloseAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgTransfer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTransfer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTransfer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAmountLo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FromAmountLo == nil {
				m.FromAmountLo = &Ciphertext{}
			}
			if err := m.FromAmountLo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAmountHi", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FromAmountHi == nil {
				m.FromAmountHi = &Ciphertext{}
			}
			if err := m.FromAmountHi.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToAmountLo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ToAmountLo == nil {
				m.ToAmountLo = &Ciphertext{}
			}
			if err := m.ToAmountLo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToAmountHi", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ToAmountHi == nil {
				m.ToAmountHi = &Ciphertext{}
			}
			if err := m.ToAmountHi.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainingBalance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RemainingBalance == nil {
				m.RemainingBalance = &Ciphertext{}
			}
			if err := m.RemainingBalance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecryptableBalance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DecryptableBalance = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proofs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Proofs == nil {
				m.Proofs = &TransferProofs{}
			}
			if err := m.Proofs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auditors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Auditors = append(m.Auditors, &Auditor{})
			if err := m.Auditors[len(m.Auditors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTransferResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTransferResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTransferResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Auditor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Auditor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Auditor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuditorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuditorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedTransferAmountLo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EncryptedTransferAmountLo == nil {
				m.EncryptedTransferAmountLo = &Ciphertext{}
			}
			if err := m.EncryptedTransferAmountLo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedTransferAmountHi", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EncryptedTransferAmountHi == nil {
				m.EncryptedTransferAmountHi = &Ciphertext{}
			}
			if err := m.EncryptedTransferAmountHi.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferAmountLoValidityProof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TransferAmountLoValidityProof == nil {
				m.TransferAmountLoValidityProof = &CiphertextValidityProof{}
			}
			if err := m.TransferAmountLoValidityProof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferAmountHiValidityProof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TransferAmountHiValidityProof == nil {
				m.TransferAmountHiValidityProof = &CiphertextValidityProof{}
			}
			if err := m.TransferAmountHiValidityProof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferAmountLoEqualityProof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TransferAmountLoEqualityProof == nil {
				m.TransferAmountLoEqualityProof = &CiphertextCiphertextEqualityProof{}
			}
			if err := m.TransferAmountLoEqualityProof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferAmountHiEqualityProof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TransferAmountHiEqualityProof == nil {
				m.TransferAmountHiEqualityProof = &CiphertextCiphertextEqualityProof{}
			}
			if err := m.TransferAmountHiEqualityProof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgApplyPendingBalance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgApplyPendingBalance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgApplyPendingBalance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewDecryptableAvailableBalance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewDecryptableAvailableBalance = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgApplyPendingBalanceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgApplyPendingBalanceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgApplyPendingBalanceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCloseAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCloseAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCloseAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Proof == nil {
				m.Proof = &CloseAccountProof{}
			}
			if err := m.Proof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCloseAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCloseAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCloseAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
