// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: confidentialtransfers/cryptography.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Ciphertext represents the ciphertext of a message.
type Ciphertext struct {
	// Pedersen commitment bytes.
	C []byte `protobuf:"bytes,1,opt,name=c,proto3" json:"c,omitempty"`
	// Decryption handle bytes.
	D []byte `protobuf:"bytes,2,opt,name=d,proto3" json:"d,omitempty"`
}

func (m *Ciphertext) Reset()         { *m = Ciphertext{} }
func (m *Ciphertext) String() string { return proto.CompactTextString(m) }
func (*Ciphertext) ProtoMessage()    {}
func (*Ciphertext) Descriptor() ([]byte, []int) {
	return fileDescriptor_3793c57433c8e5f9, []int{0}
}
func (m *Ciphertext) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Ciphertext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Ciphertext.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Ciphertext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ciphertext.Merge(m, src)
}
func (m *Ciphertext) XXX_Size() int {
	return m.Size()
}
func (m *Ciphertext) XXX_DiscardUnknown() {
	xxx_messageInfo_Ciphertext.DiscardUnknown(m)
}

var xxx_messageInfo_Ciphertext proto.InternalMessageInfo

func (m *Ciphertext) GetC() []byte {
	if m != nil {
		return m.C
	}
	return nil
}

func (m *Ciphertext) GetD() []byte {
	if m != nil {
		return m.D
	}
	return nil
}

func init() {
	proto.RegisterType((*Ciphertext)(nil), "seiprotocol.seichain.confidentialtransfers.Ciphertext")
}

func init() {
	proto.RegisterFile("confidentialtransfers/cryptography.proto", fileDescriptor_3793c57433c8e5f9)
}

var fileDescriptor_3793c57433c8e5f9 = []byte{
	// 190 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x48, 0xce, 0xcf, 0x4b,
	0xcb, 0x4c, 0x49, 0xcd, 0x2b, 0xc9, 0x4c, 0xcc, 0x29, 0x29, 0x4a, 0xcc, 0x2b, 0x4e, 0x4b, 0x2d,
	0x2a, 0xd6, 0x4f, 0x2e, 0xaa, 0x2c, 0x28, 0xc9, 0x4f, 0x2f, 0x4a, 0x2c, 0xc8, 0xa8, 0xd4, 0x2b,
	0x28, 0xca, 0x2f, 0xc9, 0x17, 0xd2, 0x2a, 0x4e, 0xcd, 0x04, 0xb3, 0x92, 0xf3, 0x73, 0xf4, 0x8a,
	0x53, 0x33, 0x93, 0x33, 0x12, 0x33, 0xf3, 0xf4, 0xb0, 0x6a, 0x57, 0xd2, 0xe0, 0xe2, 0x72, 0xce,
	0x2c, 0xc8, 0x48, 0x2d, 0x2a, 0x49, 0xad, 0x28, 0x11, 0xe2, 0xe1, 0x62, 0x4c, 0x96, 0x60, 0x54,
	0x60, 0xd4, 0xe0, 0x09, 0x62, 0x4c, 0x06, 0xf1, 0x52, 0x24, 0x98, 0x20, 0xbc, 0x14, 0xa7, 0xc8,
	0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63, 0x7c, 0xf0, 0x48, 0x8e, 0x71, 0xc2, 0x63, 0x39,
	0x86, 0x0b, 0x8f, 0xe5, 0x18, 0x6e, 0x3c, 0x96, 0x63, 0x88, 0xb2, 0x4f, 0xcf, 0x2c, 0xc9, 0x28,
	0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x2f, 0x4e, 0xcd, 0xd4, 0x85, 0xd9, 0x0d, 0xe6, 0x80, 0x2d,
	0xd7, 0xaf, 0xd0, 0xc7, 0xee, 0xfa, 0x92, 0xca, 0x82, 0xd4, 0xe2, 0x24, 0x36, 0xb0, 0x0e, 0x63,
	0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x7f, 0x1f, 0xa2, 0x08, 0xe3, 0x00, 0x00, 0x00,
}

func (m *Ciphertext) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ciphertext) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Ciphertext) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.D) > 0 {
		i -= len(m.D)
		copy(dAtA[i:], m.D)
		i = encodeVarintCryptography(dAtA, i, uint64(len(m.D)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.C) > 0 {
		i -= len(m.C)
		copy(dAtA[i:], m.C)
		i = encodeVarintCryptography(dAtA, i, uint64(len(m.C)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCryptography(dAtA []byte, offset int, v uint64) int {
	offset -= sovCryptography(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Ciphertext) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.C)
	if l > 0 {
		n += 1 + l + sovCryptography(uint64(l))
	}
	l = len(m.D)
	if l > 0 {
		n += 1 + l + sovCryptography(uint64(l))
	}
	return n
}

func sovCryptography(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCryptography(x uint64) (n int) {
	return sovCryptography(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Ciphertext) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCryptography
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ciphertext: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ciphertext: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field C", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptography
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCryptography
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCryptography
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.C = append(m.C[:0], dAtA[iNdEx:postIndex]...)
			if m.C == nil {
				m.C = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field D", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptography
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCryptography
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCryptography
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.D = append(m.D[:0], dAtA[iNdEx:postIndex]...)
			if m.D == nil {
				m.D = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCryptography(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCryptography
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCryptography(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCryptography
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCryptography
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCryptography
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCryptography
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCryptography
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCryptography
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCryptography        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCryptography          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCryptography = fmt.Errorf("proto: unexpected end of group")
)
