// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: confidentialtransfers/zk.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TransferMsgProofs struct {
	RemainingBalanceCommitmentValidityProof *CiphertextValidityProof           `protobuf:"bytes,1,opt,name=remaining_balance_commitment_validity_proof,json=remainingBalanceCommitmentValidityProof,proto3" json:"remaining_balance_commitment_validity_proof,omitempty"`
	SenderTransferAmountLoValidityProof     *CiphertextValidityProof           `protobuf:"bytes,2,opt,name=sender_transfer_amount_lo_validity_proof,json=senderTransferAmountLoValidityProof,proto3" json:"sender_transfer_amount_lo_validity_proof,omitempty"`
	SenderTransferAmountHiValidityProof     *CiphertextValidityProof           `protobuf:"bytes,3,opt,name=sender_transfer_amount_hi_validity_proof,json=senderTransferAmountHiValidityProof,proto3" json:"sender_transfer_amount_hi_validity_proof,omitempty"`
	RecipientTransferAmountLoValidityProof  *CiphertextValidityProof           `protobuf:"bytes,4,opt,name=recipient_transfer_amount_lo_validity_proof,json=recipientTransferAmountLoValidityProof,proto3" json:"recipient_transfer_amount_lo_validity_proof,omitempty"`
	RecipientTransferAmountHiValidityProof  *CiphertextValidityProof           `protobuf:"bytes,5,opt,name=recipient_transfer_amount_hi_validity_proof,json=recipientTransferAmountHiValidityProof,proto3" json:"recipient_transfer_amount_hi_validity_proof,omitempty"`
	RemainingBalanceRangeProof              *RangeProof                        `protobuf:"bytes,6,opt,name=remaining_balance_range_proof,json=remainingBalanceRangeProof,proto3" json:"remaining_balance_range_proof,omitempty"`
	RemainingBalanceEqualityProof           *CiphertextCommitmentEqualityProof `protobuf:"bytes,7,opt,name=remaining_balance_equality_proof,json=remainingBalanceEqualityProof,proto3" json:"remaining_balance_equality_proof,omitempty"`
	TransferAmountLoEqualityProof           *CiphertextCiphertextEqualityProof `protobuf:"bytes,8,opt,name=transfer_amount_lo_equality_proof,json=transferAmountLoEqualityProof,proto3" json:"transfer_amount_lo_equality_proof,omitempty"`
	TransferAmountHiEqualityProof           *CiphertextCiphertextEqualityProof `protobuf:"bytes,9,opt,name=transfer_amount_hi_equality_proof,json=transferAmountHiEqualityProof,proto3" json:"transfer_amount_hi_equality_proof,omitempty"`
}

func (m *TransferMsgProofs) Reset()         { *m = TransferMsgProofs{} }
func (m *TransferMsgProofs) String() string { return proto.CompactTextString(m) }
func (*TransferMsgProofs) ProtoMessage()    {}
func (*TransferMsgProofs) Descriptor() ([]byte, []int) {
	return fileDescriptor_71d8640cbb42ddec, []int{0}
}
func (m *TransferMsgProofs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransferMsgProofs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransferMsgProofs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransferMsgProofs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferMsgProofs.Merge(m, src)
}
func (m *TransferMsgProofs) XXX_Size() int {
	return m.Size()
}
func (m *TransferMsgProofs) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferMsgProofs.DiscardUnknown(m)
}

var xxx_messageInfo_TransferMsgProofs proto.InternalMessageInfo

func (m *TransferMsgProofs) GetRemainingBalanceCommitmentValidityProof() *CiphertextValidityProof {
	if m != nil {
		return m.RemainingBalanceCommitmentValidityProof
	}
	return nil
}

func (m *TransferMsgProofs) GetSenderTransferAmountLoValidityProof() *CiphertextValidityProof {
	if m != nil {
		return m.SenderTransferAmountLoValidityProof
	}
	return nil
}

func (m *TransferMsgProofs) GetSenderTransferAmountHiValidityProof() *CiphertextValidityProof {
	if m != nil {
		return m.SenderTransferAmountHiValidityProof
	}
	return nil
}

func (m *TransferMsgProofs) GetRecipientTransferAmountLoValidityProof() *CiphertextValidityProof {
	if m != nil {
		return m.RecipientTransferAmountLoValidityProof
	}
	return nil
}

func (m *TransferMsgProofs) GetRecipientTransferAmountHiValidityProof() *CiphertextValidityProof {
	if m != nil {
		return m.RecipientTransferAmountHiValidityProof
	}
	return nil
}

func (m *TransferMsgProofs) GetRemainingBalanceRangeProof() *RangeProof {
	if m != nil {
		return m.RemainingBalanceRangeProof
	}
	return nil
}

func (m *TransferMsgProofs) GetRemainingBalanceEqualityProof() *CiphertextCommitmentEqualityProof {
	if m != nil {
		return m.RemainingBalanceEqualityProof
	}
	return nil
}

func (m *TransferMsgProofs) GetTransferAmountLoEqualityProof() *CiphertextCiphertextEqualityProof {
	if m != nil {
		return m.TransferAmountLoEqualityProof
	}
	return nil
}

func (m *TransferMsgProofs) GetTransferAmountHiEqualityProof() *CiphertextCiphertextEqualityProof {
	if m != nil {
		return m.TransferAmountHiEqualityProof
	}
	return nil
}

type InitializeAccountMsgProofs struct {
	PubkeyValidityProof       *PubkeyValidityProof `protobuf:"bytes,1,opt,name=pubkey_validity_proof,json=pubkeyValidityProof,proto3" json:"pubkey_validity_proof,omitempty"`
	ZeroPendingBalanceLoProof *ZeroBalanceProof    `protobuf:"bytes,2,opt,name=zero_pending_balance_lo_proof,json=zeroPendingBalanceLoProof,proto3" json:"zero_pending_balance_lo_proof,omitempty"`
	ZeroPendingBalanceHiProof *ZeroBalanceProof    `protobuf:"bytes,3,opt,name=zero_pending_balance_hi_proof,json=zeroPendingBalanceHiProof,proto3" json:"zero_pending_balance_hi_proof,omitempty"`
	ZeroAvailableBalanceProof *ZeroBalanceProof    `protobuf:"bytes,4,opt,name=zero_available_balance_proof,json=zeroAvailableBalanceProof,proto3" json:"zero_available_balance_proof,omitempty"`
}

func (m *InitializeAccountMsgProofs) Reset()         { *m = InitializeAccountMsgProofs{} }
func (m *InitializeAccountMsgProofs) String() string { return proto.CompactTextString(m) }
func (*InitializeAccountMsgProofs) ProtoMessage()    {}
func (*InitializeAccountMsgProofs) Descriptor() ([]byte, []int) {
	return fileDescriptor_71d8640cbb42ddec, []int{1}
}
func (m *InitializeAccountMsgProofs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InitializeAccountMsgProofs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InitializeAccountMsgProofs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InitializeAccountMsgProofs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitializeAccountMsgProofs.Merge(m, src)
}
func (m *InitializeAccountMsgProofs) XXX_Size() int {
	return m.Size()
}
func (m *InitializeAccountMsgProofs) XXX_DiscardUnknown() {
	xxx_messageInfo_InitializeAccountMsgProofs.DiscardUnknown(m)
}

var xxx_messageInfo_InitializeAccountMsgProofs proto.InternalMessageInfo

func (m *InitializeAccountMsgProofs) GetPubkeyValidityProof() *PubkeyValidityProof {
	if m != nil {
		return m.PubkeyValidityProof
	}
	return nil
}

func (m *InitializeAccountMsgProofs) GetZeroPendingBalanceLoProof() *ZeroBalanceProof {
	if m != nil {
		return m.ZeroPendingBalanceLoProof
	}
	return nil
}

func (m *InitializeAccountMsgProofs) GetZeroPendingBalanceHiProof() *ZeroBalanceProof {
	if m != nil {
		return m.ZeroPendingBalanceHiProof
	}
	return nil
}

func (m *InitializeAccountMsgProofs) GetZeroAvailableBalanceProof() *ZeroBalanceProof {
	if m != nil {
		return m.ZeroAvailableBalanceProof
	}
	return nil
}

type WithdrawMsgProofs struct {
	RemainingBalanceRangeProof    *RangeProof                        `protobuf:"bytes,1,opt,name=remaining_balance_range_proof,json=remainingBalanceRangeProof,proto3" json:"remaining_balance_range_proof,omitempty"`
	RemainingBalanceEqualityProof *CiphertextCommitmentEqualityProof `protobuf:"bytes,2,opt,name=remaining_balance_equality_proof,json=remainingBalanceEqualityProof,proto3" json:"remaining_balance_equality_proof,omitempty"`
}

func (m *WithdrawMsgProofs) Reset()         { *m = WithdrawMsgProofs{} }
func (m *WithdrawMsgProofs) String() string { return proto.CompactTextString(m) }
func (*WithdrawMsgProofs) ProtoMessage()    {}
func (*WithdrawMsgProofs) Descriptor() ([]byte, []int) {
	return fileDescriptor_71d8640cbb42ddec, []int{2}
}
func (m *WithdrawMsgProofs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WithdrawMsgProofs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WithdrawMsgProofs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WithdrawMsgProofs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithdrawMsgProofs.Merge(m, src)
}
func (m *WithdrawMsgProofs) XXX_Size() int {
	return m.Size()
}
func (m *WithdrawMsgProofs) XXX_DiscardUnknown() {
	xxx_messageInfo_WithdrawMsgProofs.DiscardUnknown(m)
}

var xxx_messageInfo_WithdrawMsgProofs proto.InternalMessageInfo

func (m *WithdrawMsgProofs) GetRemainingBalanceRangeProof() *RangeProof {
	if m != nil {
		return m.RemainingBalanceRangeProof
	}
	return nil
}

func (m *WithdrawMsgProofs) GetRemainingBalanceEqualityProof() *CiphertextCommitmentEqualityProof {
	if m != nil {
		return m.RemainingBalanceEqualityProof
	}
	return nil
}

type CloseAccountMsgProofs struct {
	ZeroAvailableBalanceProof *ZeroBalanceProof `protobuf:"bytes,1,opt,name=zero_available_balance_proof,json=zeroAvailableBalanceProof,proto3" json:"zero_available_balance_proof,omitempty"`
	ZeroPendingBalanceLoProof *ZeroBalanceProof `protobuf:"bytes,2,opt,name=zero_pending_balance_lo_proof,json=zeroPendingBalanceLoProof,proto3" json:"zero_pending_balance_lo_proof,omitempty"`
	ZeroPendingBalanceHiProof *ZeroBalanceProof `protobuf:"bytes,3,opt,name=zero_pending_balance_hi_proof,json=zeroPendingBalanceHiProof,proto3" json:"zero_pending_balance_hi_proof,omitempty"`
}

func (m *CloseAccountMsgProofs) Reset()         { *m = CloseAccountMsgProofs{} }
func (m *CloseAccountMsgProofs) String() string { return proto.CompactTextString(m) }
func (*CloseAccountMsgProofs) ProtoMessage()    {}
func (*CloseAccountMsgProofs) Descriptor() ([]byte, []int) {
	return fileDescriptor_71d8640cbb42ddec, []int{3}
}
func (m *CloseAccountMsgProofs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CloseAccountMsgProofs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CloseAccountMsgProofs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CloseAccountMsgProofs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloseAccountMsgProofs.Merge(m, src)
}
func (m *CloseAccountMsgProofs) XXX_Size() int {
	return m.Size()
}
func (m *CloseAccountMsgProofs) XXX_DiscardUnknown() {
	xxx_messageInfo_CloseAccountMsgProofs.DiscardUnknown(m)
}

var xxx_messageInfo_CloseAccountMsgProofs proto.InternalMessageInfo

func (m *CloseAccountMsgProofs) GetZeroAvailableBalanceProof() *ZeroBalanceProof {
	if m != nil {
		return m.ZeroAvailableBalanceProof
	}
	return nil
}

func (m *CloseAccountMsgProofs) GetZeroPendingBalanceLoProof() *ZeroBalanceProof {
	if m != nil {
		return m.ZeroPendingBalanceLoProof
	}
	return nil
}

func (m *CloseAccountMsgProofs) GetZeroPendingBalanceHiProof() *ZeroBalanceProof {
	if m != nil {
		return m.ZeroPendingBalanceHiProof
	}
	return nil
}

type PubkeyValidityProof struct {
	Y []byte `protobuf:"bytes,1,opt,name=y,proto3" json:"y,omitempty"`
	Z []byte `protobuf:"bytes,2,opt,name=z,proto3" json:"z,omitempty"`
}

func (m *PubkeyValidityProof) Reset()         { *m = PubkeyValidityProof{} }
func (m *PubkeyValidityProof) String() string { return proto.CompactTextString(m) }
func (*PubkeyValidityProof) ProtoMessage()    {}
func (*PubkeyValidityProof) Descriptor() ([]byte, []int) {
	return fileDescriptor_71d8640cbb42ddec, []int{4}
}
func (m *PubkeyValidityProof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PubkeyValidityProof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PubkeyValidityProof.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PubkeyValidityProof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PubkeyValidityProof.Merge(m, src)
}
func (m *PubkeyValidityProof) XXX_Size() int {
	return m.Size()
}
func (m *PubkeyValidityProof) XXX_DiscardUnknown() {
	xxx_messageInfo_PubkeyValidityProof.DiscardUnknown(m)
}

var xxx_messageInfo_PubkeyValidityProof proto.InternalMessageInfo

func (m *PubkeyValidityProof) GetY() []byte {
	if m != nil {
		return m.Y
	}
	return nil
}

func (m *PubkeyValidityProof) GetZ() []byte {
	if m != nil {
		return m.Z
	}
	return nil
}

type CiphertextValidityProof struct {
	// First commitment
	Commitment_1 []byte `protobuf:"bytes,1,opt,name=commitment_1,json=commitment1,proto3" json:"commitment_1,omitempty"`
	// Second commitment
	Commitment_2 []byte `protobuf:"bytes,2,opt,name=commitment_2,json=commitment2,proto3" json:"commitment_2,omitempty"`
	// First response
	Response_1 []byte `protobuf:"bytes,4,opt,name=response_1,json=response1,proto3" json:"response_1,omitempty"`
	// Second response
	Response_2 []byte `protobuf:"bytes,5,opt,name=response_2,json=response2,proto3" json:"response_2,omitempty"`
}

func (m *CiphertextValidityProof) Reset()         { *m = CiphertextValidityProof{} }
func (m *CiphertextValidityProof) String() string { return proto.CompactTextString(m) }
func (*CiphertextValidityProof) ProtoMessage()    {}
func (*CiphertextValidityProof) Descriptor() ([]byte, []int) {
	return fileDescriptor_71d8640cbb42ddec, []int{5}
}
func (m *CiphertextValidityProof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CiphertextValidityProof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CiphertextValidityProof.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CiphertextValidityProof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CiphertextValidityProof.Merge(m, src)
}
func (m *CiphertextValidityProof) XXX_Size() int {
	return m.Size()
}
func (m *CiphertextValidityProof) XXX_DiscardUnknown() {
	xxx_messageInfo_CiphertextValidityProof.DiscardUnknown(m)
}

var xxx_messageInfo_CiphertextValidityProof proto.InternalMessageInfo

func (m *CiphertextValidityProof) GetCommitment_1() []byte {
	if m != nil {
		return m.Commitment_1
	}
	return nil
}

func (m *CiphertextValidityProof) GetCommitment_2() []byte {
	if m != nil {
		return m.Commitment_2
	}
	return nil
}

func (m *CiphertextValidityProof) GetResponse_1() []byte {
	if m != nil {
		return m.Response_1
	}
	return nil
}

func (m *CiphertextValidityProof) GetResponse_2() []byte {
	if m != nil {
		return m.Response_2
	}
	return nil
}

type RangeProof struct {
	Proof      []byte `protobuf:"bytes,1,opt,name=proof,proto3" json:"proof,omitempty"`
	Randomness []byte `protobuf:"bytes,2,opt,name=randomness,proto3" json:"randomness,omitempty"`
	UpperBound int64  `protobuf:"varint,3,opt,name=upper_bound,json=upperBound,proto3" json:"upper_bound,omitempty"`
}

func (m *RangeProof) Reset()         { *m = RangeProof{} }
func (m *RangeProof) String() string { return proto.CompactTextString(m) }
func (*RangeProof) ProtoMessage()    {}
func (*RangeProof) Descriptor() ([]byte, []int) {
	return fileDescriptor_71d8640cbb42ddec, []int{6}
}
func (m *RangeProof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RangeProof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RangeProof.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RangeProof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RangeProof.Merge(m, src)
}
func (m *RangeProof) XXX_Size() int {
	return m.Size()
}
func (m *RangeProof) XXX_DiscardUnknown() {
	xxx_messageInfo_RangeProof.DiscardUnknown(m)
}

var xxx_messageInfo_RangeProof proto.InternalMessageInfo

func (m *RangeProof) GetProof() []byte {
	if m != nil {
		return m.Proof
	}
	return nil
}

func (m *RangeProof) GetRandomness() []byte {
	if m != nil {
		return m.Randomness
	}
	return nil
}

func (m *RangeProof) GetUpperBound() int64 {
	if m != nil {
		return m.UpperBound
	}
	return 0
}

type CiphertextCommitmentEqualityProof struct {
	Y0 []byte `protobuf:"bytes,1,opt,name=y0,proto3" json:"y0,omitempty"`
	Y1 []byte `protobuf:"bytes,2,opt,name=y1,proto3" json:"y1,omitempty"`
	Y2 []byte `protobuf:"bytes,3,opt,name=y2,proto3" json:"y2,omitempty"`
	Zs []byte `protobuf:"bytes,4,opt,name=zs,proto3" json:"zs,omitempty"`
	Zx []byte `protobuf:"bytes,5,opt,name=zx,proto3" json:"zx,omitempty"`
	Zr []byte `protobuf:"bytes,6,opt,name=zr,proto3" json:"zr,omitempty"`
}

func (m *CiphertextCommitmentEqualityProof) Reset()         { *m = CiphertextCommitmentEqualityProof{} }
func (m *CiphertextCommitmentEqualityProof) String() string { return proto.CompactTextString(m) }
func (*CiphertextCommitmentEqualityProof) ProtoMessage()    {}
func (*CiphertextCommitmentEqualityProof) Descriptor() ([]byte, []int) {
	return fileDescriptor_71d8640cbb42ddec, []int{7}
}
func (m *CiphertextCommitmentEqualityProof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CiphertextCommitmentEqualityProof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CiphertextCommitmentEqualityProof.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CiphertextCommitmentEqualityProof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CiphertextCommitmentEqualityProof.Merge(m, src)
}
func (m *CiphertextCommitmentEqualityProof) XXX_Size() int {
	return m.Size()
}
func (m *CiphertextCommitmentEqualityProof) XXX_DiscardUnknown() {
	xxx_messageInfo_CiphertextCommitmentEqualityProof.DiscardUnknown(m)
}

var xxx_messageInfo_CiphertextCommitmentEqualityProof proto.InternalMessageInfo

func (m *CiphertextCommitmentEqualityProof) GetY0() []byte {
	if m != nil {
		return m.Y0
	}
	return nil
}

func (m *CiphertextCommitmentEqualityProof) GetY1() []byte {
	if m != nil {
		return m.Y1
	}
	return nil
}

func (m *CiphertextCommitmentEqualityProof) GetY2() []byte {
	if m != nil {
		return m.Y2
	}
	return nil
}

func (m *CiphertextCommitmentEqualityProof) GetZs() []byte {
	if m != nil {
		return m.Zs
	}
	return nil
}

func (m *CiphertextCommitmentEqualityProof) GetZx() []byte {
	if m != nil {
		return m.Zx
	}
	return nil
}

func (m *CiphertextCommitmentEqualityProof) GetZr() []byte {
	if m != nil {
		return m.Zr
	}
	return nil
}

type CiphertextCiphertextEqualityProof struct {
	Y0 []byte `protobuf:"bytes,1,opt,name=y0,proto3" json:"y0,omitempty"`
	Y1 []byte `protobuf:"bytes,2,opt,name=y1,proto3" json:"y1,omitempty"`
	Y2 []byte `protobuf:"bytes,3,opt,name=y2,proto3" json:"y2,omitempty"`
	Y3 []byte `protobuf:"bytes,4,opt,name=y3,proto3" json:"y3,omitempty"`
	Zs []byte `protobuf:"bytes,5,opt,name=zs,proto3" json:"zs,omitempty"`
	Zx []byte `protobuf:"bytes,6,opt,name=zx,proto3" json:"zx,omitempty"`
	Zr []byte `protobuf:"bytes,7,opt,name=zr,proto3" json:"zr,omitempty"`
}

func (m *CiphertextCiphertextEqualityProof) Reset()         { *m = CiphertextCiphertextEqualityProof{} }
func (m *CiphertextCiphertextEqualityProof) String() string { return proto.CompactTextString(m) }
func (*CiphertextCiphertextEqualityProof) ProtoMessage()    {}
func (*CiphertextCiphertextEqualityProof) Descriptor() ([]byte, []int) {
	return fileDescriptor_71d8640cbb42ddec, []int{8}
}
func (m *CiphertextCiphertextEqualityProof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CiphertextCiphertextEqualityProof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CiphertextCiphertextEqualityProof.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CiphertextCiphertextEqualityProof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CiphertextCiphertextEqualityProof.Merge(m, src)
}
func (m *CiphertextCiphertextEqualityProof) XXX_Size() int {
	return m.Size()
}
func (m *CiphertextCiphertextEqualityProof) XXX_DiscardUnknown() {
	xxx_messageInfo_CiphertextCiphertextEqualityProof.DiscardUnknown(m)
}

var xxx_messageInfo_CiphertextCiphertextEqualityProof proto.InternalMessageInfo

func (m *CiphertextCiphertextEqualityProof) GetY0() []byte {
	if m != nil {
		return m.Y0
	}
	return nil
}

func (m *CiphertextCiphertextEqualityProof) GetY1() []byte {
	if m != nil {
		return m.Y1
	}
	return nil
}

func (m *CiphertextCiphertextEqualityProof) GetY2() []byte {
	if m != nil {
		return m.Y2
	}
	return nil
}

func (m *CiphertextCiphertextEqualityProof) GetY3() []byte {
	if m != nil {
		return m.Y3
	}
	return nil
}

func (m *CiphertextCiphertextEqualityProof) GetZs() []byte {
	if m != nil {
		return m.Zs
	}
	return nil
}

func (m *CiphertextCiphertextEqualityProof) GetZx() []byte {
	if m != nil {
		return m.Zx
	}
	return nil
}

func (m *CiphertextCiphertextEqualityProof) GetZr() []byte {
	if m != nil {
		return m.Zr
	}
	return nil
}

type ZeroBalanceProof struct {
	YP []byte `protobuf:"bytes,1,opt,name=y_p,json=yP,proto3" json:"y_p,omitempty"`
	YD []byte `protobuf:"bytes,2,opt,name=y_d,json=yD,proto3" json:"y_d,omitempty"`
	Z  []byte `protobuf:"bytes,3,opt,name=z,proto3" json:"z,omitempty"`
}

func (m *ZeroBalanceProof) Reset()         { *m = ZeroBalanceProof{} }
func (m *ZeroBalanceProof) String() string { return proto.CompactTextString(m) }
func (*ZeroBalanceProof) ProtoMessage()    {}
func (*ZeroBalanceProof) Descriptor() ([]byte, []int) {
	return fileDescriptor_71d8640cbb42ddec, []int{9}
}
func (m *ZeroBalanceProof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ZeroBalanceProof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ZeroBalanceProof.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ZeroBalanceProof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZeroBalanceProof.Merge(m, src)
}
func (m *ZeroBalanceProof) XXX_Size() int {
	return m.Size()
}
func (m *ZeroBalanceProof) XXX_DiscardUnknown() {
	xxx_messageInfo_ZeroBalanceProof.DiscardUnknown(m)
}

var xxx_messageInfo_ZeroBalanceProof proto.InternalMessageInfo

func (m *ZeroBalanceProof) GetYP() []byte {
	if m != nil {
		return m.YP
	}
	return nil
}

func (m *ZeroBalanceProof) GetYD() []byte {
	if m != nil {
		return m.YD
	}
	return nil
}

func (m *ZeroBalanceProof) GetZ() []byte {
	if m != nil {
		return m.Z
	}
	return nil
}

func init() {
	proto.RegisterType((*TransferMsgProofs)(nil), "seiprotocol.seichain.confidentialtransfers.TransferMsgProofs")
	proto.RegisterType((*InitializeAccountMsgProofs)(nil), "seiprotocol.seichain.confidentialtransfers.InitializeAccountMsgProofs")
	proto.RegisterType((*WithdrawMsgProofs)(nil), "seiprotocol.seichain.confidentialtransfers.WithdrawMsgProofs")
	proto.RegisterType((*CloseAccountMsgProofs)(nil), "seiprotocol.seichain.confidentialtransfers.CloseAccountMsgProofs")
	proto.RegisterType((*PubkeyValidityProof)(nil), "seiprotocol.seichain.confidentialtransfers.PubkeyValidityProof")
	proto.RegisterType((*CiphertextValidityProof)(nil), "seiprotocol.seichain.confidentialtransfers.CiphertextValidityProof")
	proto.RegisterType((*RangeProof)(nil), "seiprotocol.seichain.confidentialtransfers.RangeProof")
	proto.RegisterType((*CiphertextCommitmentEqualityProof)(nil), "seiprotocol.seichain.confidentialtransfers.CiphertextCommitmentEqualityProof")
	proto.RegisterType((*CiphertextCiphertextEqualityProof)(nil), "seiprotocol.seichain.confidentialtransfers.CiphertextCiphertextEqualityProof")
	proto.RegisterType((*ZeroBalanceProof)(nil), "seiprotocol.seichain.confidentialtransfers.ZeroBalanceProof")
}

func init() { proto.RegisterFile("confidentialtransfers/zk.proto", fileDescriptor_71d8640cbb42ddec) }

var fileDescriptor_71d8640cbb42ddec = []byte{
	// 831 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x97, 0xcf, 0x6f, 0xd3, 0x4a,
	0x10, 0xc7, 0xbb, 0x4e, 0x7f, 0xbc, 0x6e, 0xa3, 0xf7, 0x5e, 0x5d, 0x2a, 0xa0, 0x22, 0xa6, 0x35,
	0x12, 0x54, 0x20, 0x92, 0x26, 0x95, 0x38, 0x21, 0x55, 0x4d, 0x40, 0x2a, 0x52, 0x2b, 0x45, 0x11,
	0x02, 0xd1, 0x8b, 0xe5, 0xd8, 0xdb, 0x64, 0x55, 0x67, 0xd7, 0xec, 0x3a, 0x25, 0xb6, 0x04, 0x17,
	0xfe, 0x81, 0x4a, 0x48, 0x45, 0x42, 0x42, 0x82, 0x13, 0xff, 0x0a, 0xc7, 0x1e, 0x39, 0xa2, 0xf6,
	0x0f, 0x01, 0x79, 0xed, 0x38, 0xb6, 0x13, 0x9a, 0xb6, 0xa4, 0xe5, 0xc0, 0x2d, 0xb3, 0xb3, 0x3b,
	0xdf, 0x8f, 0x67, 0x67, 0xc6, 0x0e, 0x54, 0x0c, 0x4a, 0x76, 0xb0, 0x89, 0x88, 0x83, 0x75, 0xcb,
	0x61, 0x3a, 0xe1, 0x3b, 0x88, 0xf1, 0x82, 0xb7, 0x9b, 0xb7, 0x19, 0x75, 0xa8, 0x7c, 0x97, 0x23,
	0x2c, 0x7e, 0x19, 0xd4, 0xca, 0x73, 0x84, 0x8d, 0xa6, 0x8e, 0x49, 0x7e, 0xe0, 0x21, 0xf5, 0x07,
	0x84, 0xb3, 0x4f, 0x43, 0x6b, 0x8b, 0x37, 0xaa, 0x8c, 0xd2, 0x1d, 0x2e, 0x7f, 0x06, 0xf0, 0x1e,
	0x43, 0x2d, 0x1d, 0x13, 0x4c, 0x1a, 0x5a, 0x5d, 0xb7, 0x74, 0x62, 0x20, 0xcd, 0xa0, 0xad, 0x16,
	0x76, 0x5a, 0x88, 0x38, 0xda, 0x9e, 0x6e, 0x61, 0x13, 0x3b, 0xae, 0x66, 0xfb, 0x07, 0xae, 0x81,
	0x45, 0xb0, 0x3c, 0x53, 0xaa, 0xe4, 0x4f, 0x2f, 0x9c, 0xaf, 0x60, 0xbb, 0x89, 0x98, 0x83, 0x3a,
	0xce, 0xb3, 0x30, 0x96, 0xd0, 0xae, 0xdd, 0x89, 0x74, 0xcb, 0x81, 0x6c, 0x25, 0x52, 0x4d, 0x6c,
	0x94, 0x3f, 0x00, 0xb8, 0xcc, 0x11, 0x31, 0x11, 0xd3, 0xba, 0x51, 0x35, 0xbd, 0x45, 0xdb, 0xc4,
	0xd1, 0x2c, 0x9a, 0x06, 0x94, 0x46, 0x07, 0x78, 0x2b, 0x10, 0xed, 0x26, 0x6d, 0x5d, 0x48, 0x6e,
	0xd2, 0x53, 0xc3, 0x35, 0x71, 0x1a, 0x2e, 0x73, 0xc1, 0x70, 0x1b, 0x38, 0x09, 0xf7, 0x49, 0xdc,
	0xae, 0x81, 0x6d, 0xec, 0x5f, 0xe5, 0xf0, 0xe4, 0x8d, 0x8f, 0x8e, 0xef, 0x76, 0xa4, 0x7b, 0x72,
	0xfe, 0x4e, 0x46, 0xec, 0x4f, 0xe1, 0xc4, 0xc5, 0x23, 0xa6, 0xb3, 0xe8, 0xc2, 0x5c, 0x7f, 0x8b,
	0x30, 0x9d, 0x34, 0x50, 0xc8, 0x34, 0x29, 0x98, 0x1e, 0x9c, 0x85, 0xa9, 0xe6, 0x1f, 0x0f, 0x30,
	0x16, 0xd2, 0x7d, 0xd0, 0xf3, 0xc9, 0x07, 0x00, 0x2e, 0xf6, 0x6b, 0xa3, 0x97, 0x6d, 0xdd, 0xea,
	0xa5, 0x64, 0x4a, 0xc8, 0x6f, 0x9d, 0x2f, 0x25, 0xbd, 0xa6, 0x7b, 0x1c, 0x46, 0x0d, 0xa8, 0x72,
	0x69, 0xaa, 0x84, 0x5b, 0x7e, 0x0f, 0xe0, 0xd2, 0x80, 0x7a, 0x4a, 0x91, 0xfd, 0xf3, 0x5b, 0x64,
	0xd1, 0xaf, 0x14, 0x99, 0x93, 0x2a, 0xa8, 0xe1, 0x64, 0x4d, 0x9c, 0x26, 0x9b, 0xbe, 0x04, 0xb2,
	0x0d, 0x9c, 0x70, 0xab, 0xfb, 0xe3, 0x70, 0xe1, 0x09, 0xc1, 0x7e, 0x54, 0xec, 0xa1, 0x75, 0xc3,
	0xf0, 0x37, 0xf5, 0x46, 0x31, 0x87, 0xf3, 0x76, 0xbb, 0xbe, 0x8b, 0xdc, 0xc1, 0x33, 0x77, 0xed,
	0x2c, 0xac, 0x55, 0x11, 0x28, 0x59, 0xee, 0x73, 0x76, 0xff, 0xa2, 0xfc, 0x06, 0xe6, 0x3c, 0xc4,
	0xa8, 0x66, 0x23, 0x62, 0xc6, 0x4b, 0xcc, 0xa2, 0x89, 0x79, 0xfa, 0xf0, 0x2c, 0xe2, 0xdb, 0x88,
	0xd1, 0xb0, 0x68, 0x02, 0xe5, 0xeb, 0xbe, 0x44, 0x35, 0x50, 0x08, 0x1d, 0x9b, 0xf4, 0x64, 0xfd,
	0x26, 0x4e, 0x8c, 0xcc, 0x91, 0xeb, 0x6f, 0xe0, 0x40, 0xff, 0x35, 0xbc, 0x21, 0xf4, 0xf5, 0x3d,
	0x1d, 0x5b, 0x7a, 0xdd, 0x42, 0x11, 0x41, 0x7c, 0x22, 0x8e, 0x40, 0x7e, 0xbd, 0x2b, 0x10, 0x77,
	0xa9, 0x5f, 0x24, 0x38, 0xfb, 0x1c, 0x3b, 0x4d, 0x93, 0xe9, 0xaf, 0x7a, 0x95, 0x30, 0x74, 0xe0,
	0x80, 0x3f, 0x3b, 0x70, 0xa4, 0xcb, 0x1f, 0x38, 0xea, 0x41, 0x06, 0xce, 0x57, 0x2c, 0xca, 0xfb,
	0xfb, 0x66, 0xd8, 0x15, 0x82, 0x0b, 0xbd, 0xc2, 0xbf, 0xbd, 0x83, 0xd4, 0x22, 0x9c, 0x1b, 0x30,
	0x6d, 0xe4, 0x2c, 0x04, 0xae, 0x48, 0x7d, 0xb6, 0x06, 0x5c, 0xdf, 0xf2, 0x44, 0x22, 0xb2, 0x35,
	0xe0, 0xa9, 0x1f, 0x01, 0xbc, 0xfa, 0x8b, 0x97, 0xb2, 0xbc, 0x04, 0xb3, 0xb1, 0xaf, 0xcf, 0x62,
	0x18, 0x62, 0xa6, 0xb7, 0x56, 0x4c, 0x6d, 0x29, 0x85, 0x71, 0x63, 0x5b, 0x4a, 0x72, 0x0e, 0x42,
	0x86, 0xb8, 0x4d, 0x09, 0x47, 0x5a, 0x51, 0x34, 0x71, 0xb6, 0x36, 0xdd, 0x5d, 0x29, 0x26, 0xdc,
	0x25, 0xf1, 0x49, 0x11, 0x73, 0x97, 0x54, 0x03, 0xc2, 0x58, 0x4b, 0x5c, 0x81, 0x13, 0xbd, 0x42,
	0xca, 0xd6, 0x02, 0x43, 0x56, 0x20, 0x64, 0x3a, 0x31, 0x69, 0x8b, 0x20, 0xce, 0x43, 0x84, 0xd8,
	0x8a, 0x7c, 0x13, 0xce, 0xb4, 0x6d, 0x1b, 0x31, 0xad, 0x4e, 0xdb, 0xc4, 0x14, 0x97, 0x90, 0xa9,
	0x41, 0xb1, 0x54, 0xf6, 0x57, 0xd4, 0xb7, 0x00, 0x2e, 0x0d, 0xed, 0x0a, 0xf9, 0x5f, 0x28, 0xb9,
	0x2b, 0xa1, 0xb2, 0xe4, 0xae, 0x08, 0xbb, 0x18, 0xca, 0x49, 0x6e, 0x51, 0xd8, 0x25, 0x11, 0xdd,
	0xb7, 0x4b, 0xbe, 0xed, 0xf1, 0xf0, 0x81, 0x25, 0x8f, 0x0b, 0xbb, 0x13, 0x3e, 0xa1, 0xe4, 0x75,
	0x84, 0xcd, 0xc4, 0x07, 0x8b, 0x6f, 0x33, 0xf5, 0x5d, 0x92, 0x62, 0xf0, 0x8b, 0xed, 0x3c, 0x14,
	0xee, 0x6a, 0x97, 0xc2, 0x5d, 0x0d, 0xa9, 0x26, 0x52, 0x54, 0x93, 0x29, 0xaa, 0xa9, 0x88, 0xaa,
	0x0c, 0xff, 0x4f, 0x97, 0xa0, 0xfc, 0x1f, 0xcc, 0xb8, 0x9a, 0x1d, 0x41, 0x54, 0x83, 0x05, 0x33,
	0xa2, 0x78, 0x14, 0x14, 0x59, 0x26, 0x2c, 0xb2, 0xf2, 0x8b, 0xaf, 0x47, 0x0a, 0x38, 0x3c, 0x52,
	0xc0, 0xf7, 0x23, 0x05, 0xec, 0x1f, 0x2b, 0x63, 0x87, 0xc7, 0xca, 0xd8, 0xb7, 0x63, 0x65, 0x6c,
	0x7b, 0xad, 0x81, 0x9d, 0x66, 0xbb, 0x9e, 0x37, 0x68, 0xab, 0xc0, 0x11, 0xbe, 0xdf, 0xed, 0x0a,
	0x61, 0x88, 0xb6, 0x28, 0x74, 0x0a, 0x83, 0xff, 0x79, 0x39, 0xae, 0x8d, 0x78, 0x7d, 0x52, 0x9c,
	0x58, 0xfd, 0x19, 0x00, 0x00, 0xff, 0xff, 0xde, 0xce, 0x41, 0x46, 0x9f, 0x0d, 0x00, 0x00,
}

func (m *TransferMsgProofs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransferMsgProofs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransferMsgProofs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TransferAmountHiEqualityProof != nil {
		{
			size, err := m.TransferAmountHiEqualityProof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZk(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.TransferAmountLoEqualityProof != nil {
		{
			size, err := m.TransferAmountLoEqualityProof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZk(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.RemainingBalanceEqualityProof != nil {
		{
			size, err := m.RemainingBalanceEqualityProof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZk(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.RemainingBalanceRangeProof != nil {
		{
			size, err := m.RemainingBalanceRangeProof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZk(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.RecipientTransferAmountHiValidityProof != nil {
		{
			size, err := m.RecipientTransferAmountHiValidityProof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZk(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.RecipientTransferAmountLoValidityProof != nil {
		{
			size, err := m.RecipientTransferAmountLoValidityProof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZk(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.SenderTransferAmountHiValidityProof != nil {
		{
			size, err := m.SenderTransferAmountHiValidityProof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZk(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.SenderTransferAmountLoValidityProof != nil {
		{
			size, err := m.SenderTransferAmountLoValidityProof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZk(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.RemainingBalanceCommitmentValidityProof != nil {
		{
			size, err := m.RemainingBalanceCommitmentValidityProof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZk(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InitializeAccountMsgProofs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InitializeAccountMsgProofs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InitializeAccountMsgProofs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ZeroAvailableBalanceProof != nil {
		{
			size, err := m.ZeroAvailableBalanceProof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZk(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.ZeroPendingBalanceHiProof != nil {
		{
			size, err := m.ZeroPendingBalanceHiProof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZk(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ZeroPendingBalanceLoProof != nil {
		{
			size, err := m.ZeroPendingBalanceLoProof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZk(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.PubkeyValidityProof != nil {
		{
			size, err := m.PubkeyValidityProof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZk(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WithdrawMsgProofs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WithdrawMsgProofs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WithdrawMsgProofs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RemainingBalanceEqualityProof != nil {
		{
			size, err := m.RemainingBalanceEqualityProof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZk(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.RemainingBalanceRangeProof != nil {
		{
			size, err := m.RemainingBalanceRangeProof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZk(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CloseAccountMsgProofs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloseAccountMsgProofs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CloseAccountMsgProofs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ZeroPendingBalanceHiProof != nil {
		{
			size, err := m.ZeroPendingBalanceHiProof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZk(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ZeroPendingBalanceLoProof != nil {
		{
			size, err := m.ZeroPendingBalanceLoProof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZk(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ZeroAvailableBalanceProof != nil {
		{
			size, err := m.ZeroAvailableBalanceProof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZk(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PubkeyValidityProof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PubkeyValidityProof) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PubkeyValidityProof) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Z) > 0 {
		i -= len(m.Z)
		copy(dAtA[i:], m.Z)
		i = encodeVarintZk(dAtA, i, uint64(len(m.Z)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Y) > 0 {
		i -= len(m.Y)
		copy(dAtA[i:], m.Y)
		i = encodeVarintZk(dAtA, i, uint64(len(m.Y)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CiphertextValidityProof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CiphertextValidityProof) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CiphertextValidityProof) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Response_2) > 0 {
		i -= len(m.Response_2)
		copy(dAtA[i:], m.Response_2)
		i = encodeVarintZk(dAtA, i, uint64(len(m.Response_2)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Response_1) > 0 {
		i -= len(m.Response_1)
		copy(dAtA[i:], m.Response_1)
		i = encodeVarintZk(dAtA, i, uint64(len(m.Response_1)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Commitment_2) > 0 {
		i -= len(m.Commitment_2)
		copy(dAtA[i:], m.Commitment_2)
		i = encodeVarintZk(dAtA, i, uint64(len(m.Commitment_2)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Commitment_1) > 0 {
		i -= len(m.Commitment_1)
		copy(dAtA[i:], m.Commitment_1)
		i = encodeVarintZk(dAtA, i, uint64(len(m.Commitment_1)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RangeProof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RangeProof) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RangeProof) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpperBound != 0 {
		i = encodeVarintZk(dAtA, i, uint64(m.UpperBound))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Randomness) > 0 {
		i -= len(m.Randomness)
		copy(dAtA[i:], m.Randomness)
		i = encodeVarintZk(dAtA, i, uint64(len(m.Randomness)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Proof) > 0 {
		i -= len(m.Proof)
		copy(dAtA[i:], m.Proof)
		i = encodeVarintZk(dAtA, i, uint64(len(m.Proof)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CiphertextCommitmentEqualityProof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CiphertextCommitmentEqualityProof) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CiphertextCommitmentEqualityProof) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Zr) > 0 {
		i -= len(m.Zr)
		copy(dAtA[i:], m.Zr)
		i = encodeVarintZk(dAtA, i, uint64(len(m.Zr)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Zx) > 0 {
		i -= len(m.Zx)
		copy(dAtA[i:], m.Zx)
		i = encodeVarintZk(dAtA, i, uint64(len(m.Zx)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Zs) > 0 {
		i -= len(m.Zs)
		copy(dAtA[i:], m.Zs)
		i = encodeVarintZk(dAtA, i, uint64(len(m.Zs)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Y2) > 0 {
		i -= len(m.Y2)
		copy(dAtA[i:], m.Y2)
		i = encodeVarintZk(dAtA, i, uint64(len(m.Y2)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Y1) > 0 {
		i -= len(m.Y1)
		copy(dAtA[i:], m.Y1)
		i = encodeVarintZk(dAtA, i, uint64(len(m.Y1)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Y0) > 0 {
		i -= len(m.Y0)
		copy(dAtA[i:], m.Y0)
		i = encodeVarintZk(dAtA, i, uint64(len(m.Y0)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CiphertextCiphertextEqualityProof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CiphertextCiphertextEqualityProof) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CiphertextCiphertextEqualityProof) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Zr) > 0 {
		i -= len(m.Zr)
		copy(dAtA[i:], m.Zr)
		i = encodeVarintZk(dAtA, i, uint64(len(m.Zr)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Zx) > 0 {
		i -= len(m.Zx)
		copy(dAtA[i:], m.Zx)
		i = encodeVarintZk(dAtA, i, uint64(len(m.Zx)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Zs) > 0 {
		i -= len(m.Zs)
		copy(dAtA[i:], m.Zs)
		i = encodeVarintZk(dAtA, i, uint64(len(m.Zs)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Y3) > 0 {
		i -= len(m.Y3)
		copy(dAtA[i:], m.Y3)
		i = encodeVarintZk(dAtA, i, uint64(len(m.Y3)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Y2) > 0 {
		i -= len(m.Y2)
		copy(dAtA[i:], m.Y2)
		i = encodeVarintZk(dAtA, i, uint64(len(m.Y2)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Y1) > 0 {
		i -= len(m.Y1)
		copy(dAtA[i:], m.Y1)
		i = encodeVarintZk(dAtA, i, uint64(len(m.Y1)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Y0) > 0 {
		i -= len(m.Y0)
		copy(dAtA[i:], m.Y0)
		i = encodeVarintZk(dAtA, i, uint64(len(m.Y0)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ZeroBalanceProof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ZeroBalanceProof) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ZeroBalanceProof) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Z) > 0 {
		i -= len(m.Z)
		copy(dAtA[i:], m.Z)
		i = encodeVarintZk(dAtA, i, uint64(len(m.Z)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.YD) > 0 {
		i -= len(m.YD)
		copy(dAtA[i:], m.YD)
		i = encodeVarintZk(dAtA, i, uint64(len(m.YD)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.YP) > 0 {
		i -= len(m.YP)
		copy(dAtA[i:], m.YP)
		i = encodeVarintZk(dAtA, i, uint64(len(m.YP)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintZk(dAtA []byte, offset int, v uint64) int {
	offset -= sovZk(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TransferMsgProofs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RemainingBalanceCommitmentValidityProof != nil {
		l = m.RemainingBalanceCommitmentValidityProof.Size()
		n += 1 + l + sovZk(uint64(l))
	}
	if m.SenderTransferAmountLoValidityProof != nil {
		l = m.SenderTransferAmountLoValidityProof.Size()
		n += 1 + l + sovZk(uint64(l))
	}
	if m.SenderTransferAmountHiValidityProof != nil {
		l = m.SenderTransferAmountHiValidityProof.Size()
		n += 1 + l + sovZk(uint64(l))
	}
	if m.RecipientTransferAmountLoValidityProof != nil {
		l = m.RecipientTransferAmountLoValidityProof.Size()
		n += 1 + l + sovZk(uint64(l))
	}
	if m.RecipientTransferAmountHiValidityProof != nil {
		l = m.RecipientTransferAmountHiValidityProof.Size()
		n += 1 + l + sovZk(uint64(l))
	}
	if m.RemainingBalanceRangeProof != nil {
		l = m.RemainingBalanceRangeProof.Size()
		n += 1 + l + sovZk(uint64(l))
	}
	if m.RemainingBalanceEqualityProof != nil {
		l = m.RemainingBalanceEqualityProof.Size()
		n += 1 + l + sovZk(uint64(l))
	}
	if m.TransferAmountLoEqualityProof != nil {
		l = m.TransferAmountLoEqualityProof.Size()
		n += 1 + l + sovZk(uint64(l))
	}
	if m.TransferAmountHiEqualityProof != nil {
		l = m.TransferAmountHiEqualityProof.Size()
		n += 1 + l + sovZk(uint64(l))
	}
	return n
}

func (m *InitializeAccountMsgProofs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PubkeyValidityProof != nil {
		l = m.PubkeyValidityProof.Size()
		n += 1 + l + sovZk(uint64(l))
	}
	if m.ZeroPendingBalanceLoProof != nil {
		l = m.ZeroPendingBalanceLoProof.Size()
		n += 1 + l + sovZk(uint64(l))
	}
	if m.ZeroPendingBalanceHiProof != nil {
		l = m.ZeroPendingBalanceHiProof.Size()
		n += 1 + l + sovZk(uint64(l))
	}
	if m.ZeroAvailableBalanceProof != nil {
		l = m.ZeroAvailableBalanceProof.Size()
		n += 1 + l + sovZk(uint64(l))
	}
	return n
}

func (m *WithdrawMsgProofs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RemainingBalanceRangeProof != nil {
		l = m.RemainingBalanceRangeProof.Size()
		n += 1 + l + sovZk(uint64(l))
	}
	if m.RemainingBalanceEqualityProof != nil {
		l = m.RemainingBalanceEqualityProof.Size()
		n += 1 + l + sovZk(uint64(l))
	}
	return n
}

func (m *CloseAccountMsgProofs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ZeroAvailableBalanceProof != nil {
		l = m.ZeroAvailableBalanceProof.Size()
		n += 1 + l + sovZk(uint64(l))
	}
	if m.ZeroPendingBalanceLoProof != nil {
		l = m.ZeroPendingBalanceLoProof.Size()
		n += 1 + l + sovZk(uint64(l))
	}
	if m.ZeroPendingBalanceHiProof != nil {
		l = m.ZeroPendingBalanceHiProof.Size()
		n += 1 + l + sovZk(uint64(l))
	}
	return n
}

func (m *PubkeyValidityProof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Y)
	if l > 0 {
		n += 1 + l + sovZk(uint64(l))
	}
	l = len(m.Z)
	if l > 0 {
		n += 1 + l + sovZk(uint64(l))
	}
	return n
}

func (m *CiphertextValidityProof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Commitment_1)
	if l > 0 {
		n += 1 + l + sovZk(uint64(l))
	}
	l = len(m.Commitment_2)
	if l > 0 {
		n += 1 + l + sovZk(uint64(l))
	}
	l = len(m.Response_1)
	if l > 0 {
		n += 1 + l + sovZk(uint64(l))
	}
	l = len(m.Response_2)
	if l > 0 {
		n += 1 + l + sovZk(uint64(l))
	}
	return n
}

func (m *RangeProof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Proof)
	if l > 0 {
		n += 1 + l + sovZk(uint64(l))
	}
	l = len(m.Randomness)
	if l > 0 {
		n += 1 + l + sovZk(uint64(l))
	}
	if m.UpperBound != 0 {
		n += 1 + sovZk(uint64(m.UpperBound))
	}
	return n
}

func (m *CiphertextCommitmentEqualityProof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Y0)
	if l > 0 {
		n += 1 + l + sovZk(uint64(l))
	}
	l = len(m.Y1)
	if l > 0 {
		n += 1 + l + sovZk(uint64(l))
	}
	l = len(m.Y2)
	if l > 0 {
		n += 1 + l + sovZk(uint64(l))
	}
	l = len(m.Zs)
	if l > 0 {
		n += 1 + l + sovZk(uint64(l))
	}
	l = len(m.Zx)
	if l > 0 {
		n += 1 + l + sovZk(uint64(l))
	}
	l = len(m.Zr)
	if l > 0 {
		n += 1 + l + sovZk(uint64(l))
	}
	return n
}

func (m *CiphertextCiphertextEqualityProof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Y0)
	if l > 0 {
		n += 1 + l + sovZk(uint64(l))
	}
	l = len(m.Y1)
	if l > 0 {
		n += 1 + l + sovZk(uint64(l))
	}
	l = len(m.Y2)
	if l > 0 {
		n += 1 + l + sovZk(uint64(l))
	}
	l = len(m.Y3)
	if l > 0 {
		n += 1 + l + sovZk(uint64(l))
	}
	l = len(m.Zs)
	if l > 0 {
		n += 1 + l + sovZk(uint64(l))
	}
	l = len(m.Zx)
	if l > 0 {
		n += 1 + l + sovZk(uint64(l))
	}
	l = len(m.Zr)
	if l > 0 {
		n += 1 + l + sovZk(uint64(l))
	}
	return n
}

func (m *ZeroBalanceProof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.YP)
	if l > 0 {
		n += 1 + l + sovZk(uint64(l))
	}
	l = len(m.YD)
	if l > 0 {
		n += 1 + l + sovZk(uint64(l))
	}
	l = len(m.Z)
	if l > 0 {
		n += 1 + l + sovZk(uint64(l))
	}
	return n
}

func sovZk(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozZk(x uint64) (n int) {
	return sovZk(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TransferMsgProofs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransferMsgProofs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransferMsgProofs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainingBalanceCommitmentValidityProof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RemainingBalanceCommitmentValidityProof == nil {
				m.RemainingBalanceCommitmentValidityProof = &CiphertextValidityProof{}
			}
			if err := m.RemainingBalanceCommitmentValidityProof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderTransferAmountLoValidityProof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SenderTransferAmountLoValidityProof == nil {
				m.SenderTransferAmountLoValidityProof = &CiphertextValidityProof{}
			}
			if err := m.SenderTransferAmountLoValidityProof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderTransferAmountHiValidityProof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SenderTransferAmountHiValidityProof == nil {
				m.SenderTransferAmountHiValidityProof = &CiphertextValidityProof{}
			}
			if err := m.SenderTransferAmountHiValidityProof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecipientTransferAmountLoValidityProof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RecipientTransferAmountLoValidityProof == nil {
				m.RecipientTransferAmountLoValidityProof = &CiphertextValidityProof{}
			}
			if err := m.RecipientTransferAmountLoValidityProof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecipientTransferAmountHiValidityProof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RecipientTransferAmountHiValidityProof == nil {
				m.RecipientTransferAmountHiValidityProof = &CiphertextValidityProof{}
			}
			if err := m.RecipientTransferAmountHiValidityProof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainingBalanceRangeProof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RemainingBalanceRangeProof == nil {
				m.RemainingBalanceRangeProof = &RangeProof{}
			}
			if err := m.RemainingBalanceRangeProof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainingBalanceEqualityProof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RemainingBalanceEqualityProof == nil {
				m.RemainingBalanceEqualityProof = &CiphertextCommitmentEqualityProof{}
			}
			if err := m.RemainingBalanceEqualityProof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferAmountLoEqualityProof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TransferAmountLoEqualityProof == nil {
				m.TransferAmountLoEqualityProof = &CiphertextCiphertextEqualityProof{}
			}
			if err := m.TransferAmountLoEqualityProof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferAmountHiEqualityProof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TransferAmountHiEqualityProof == nil {
				m.TransferAmountHiEqualityProof = &CiphertextCiphertextEqualityProof{}
			}
			if err := m.TransferAmountHiEqualityProof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthZk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InitializeAccountMsgProofs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitializeAccountMsgProofs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitializeAccountMsgProofs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubkeyValidityProof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PubkeyValidityProof == nil {
				m.PubkeyValidityProof = &PubkeyValidityProof{}
			}
			if err := m.PubkeyValidityProof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZeroPendingBalanceLoProof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ZeroPendingBalanceLoProof == nil {
				m.ZeroPendingBalanceLoProof = &ZeroBalanceProof{}
			}
			if err := m.ZeroPendingBalanceLoProof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZeroPendingBalanceHiProof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ZeroPendingBalanceHiProof == nil {
				m.ZeroPendingBalanceHiProof = &ZeroBalanceProof{}
			}
			if err := m.ZeroPendingBalanceHiProof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZeroAvailableBalanceProof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ZeroAvailableBalanceProof == nil {
				m.ZeroAvailableBalanceProof = &ZeroBalanceProof{}
			}
			if err := m.ZeroAvailableBalanceProof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthZk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WithdrawMsgProofs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WithdrawMsgProofs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WithdrawMsgProofs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainingBalanceRangeProof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RemainingBalanceRangeProof == nil {
				m.RemainingBalanceRangeProof = &RangeProof{}
			}
			if err := m.RemainingBalanceRangeProof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainingBalanceEqualityProof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RemainingBalanceEqualityProof == nil {
				m.RemainingBalanceEqualityProof = &CiphertextCommitmentEqualityProof{}
			}
			if err := m.RemainingBalanceEqualityProof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthZk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloseAccountMsgProofs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloseAccountMsgProofs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloseAccountMsgProofs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZeroAvailableBalanceProof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ZeroAvailableBalanceProof == nil {
				m.ZeroAvailableBalanceProof = &ZeroBalanceProof{}
			}
			if err := m.ZeroAvailableBalanceProof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZeroPendingBalanceLoProof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ZeroPendingBalanceLoProof == nil {
				m.ZeroPendingBalanceLoProof = &ZeroBalanceProof{}
			}
			if err := m.ZeroPendingBalanceLoProof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZeroPendingBalanceHiProof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ZeroPendingBalanceHiProof == nil {
				m.ZeroPendingBalanceHiProof = &ZeroBalanceProof{}
			}
			if err := m.ZeroPendingBalanceHiProof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthZk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PubkeyValidityProof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PubkeyValidityProof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PubkeyValidityProof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Y = append(m.Y[:0], dAtA[iNdEx:postIndex]...)
			if m.Y == nil {
				m.Y = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Z", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Z = append(m.Z[:0], dAtA[iNdEx:postIndex]...)
			if m.Z == nil {
				m.Z = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthZk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CiphertextValidityProof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CiphertextValidityProof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CiphertextValidityProof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commitment_1", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commitment_1 = append(m.Commitment_1[:0], dAtA[iNdEx:postIndex]...)
			if m.Commitment_1 == nil {
				m.Commitment_1 = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commitment_2", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commitment_2 = append(m.Commitment_2[:0], dAtA[iNdEx:postIndex]...)
			if m.Commitment_2 == nil {
				m.Commitment_2 = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response_1", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response_1 = append(m.Response_1[:0], dAtA[iNdEx:postIndex]...)
			if m.Response_1 == nil {
				m.Response_1 = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response_2", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response_2 = append(m.Response_2[:0], dAtA[iNdEx:postIndex]...)
			if m.Response_2 == nil {
				m.Response_2 = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthZk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RangeProof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RangeProof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RangeProof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proof = append(m.Proof[:0], dAtA[iNdEx:postIndex]...)
			if m.Proof == nil {
				m.Proof = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Randomness", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Randomness = append(m.Randomness[:0], dAtA[iNdEx:postIndex]...)
			if m.Randomness == nil {
				m.Randomness = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpperBound", wireType)
			}
			m.UpperBound = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpperBound |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthZk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CiphertextCommitmentEqualityProof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CiphertextCommitmentEqualityProof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CiphertextCommitmentEqualityProof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y0", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Y0 = append(m.Y0[:0], dAtA[iNdEx:postIndex]...)
			if m.Y0 == nil {
				m.Y0 = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y1", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Y1 = append(m.Y1[:0], dAtA[iNdEx:postIndex]...)
			if m.Y1 == nil {
				m.Y1 = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y2", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Y2 = append(m.Y2[:0], dAtA[iNdEx:postIndex]...)
			if m.Y2 == nil {
				m.Y2 = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Zs = append(m.Zs[:0], dAtA[iNdEx:postIndex]...)
			if m.Zs == nil {
				m.Zs = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zx", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Zx = append(m.Zx[:0], dAtA[iNdEx:postIndex]...)
			if m.Zx == nil {
				m.Zx = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Zr = append(m.Zr[:0], dAtA[iNdEx:postIndex]...)
			if m.Zr == nil {
				m.Zr = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthZk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CiphertextCiphertextEqualityProof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CiphertextCiphertextEqualityProof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CiphertextCiphertextEqualityProof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y0", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Y0 = append(m.Y0[:0], dAtA[iNdEx:postIndex]...)
			if m.Y0 == nil {
				m.Y0 = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y1", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Y1 = append(m.Y1[:0], dAtA[iNdEx:postIndex]...)
			if m.Y1 == nil {
				m.Y1 = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y2", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Y2 = append(m.Y2[:0], dAtA[iNdEx:postIndex]...)
			if m.Y2 == nil {
				m.Y2 = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y3", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Y3 = append(m.Y3[:0], dAtA[iNdEx:postIndex]...)
			if m.Y3 == nil {
				m.Y3 = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Zs = append(m.Zs[:0], dAtA[iNdEx:postIndex]...)
			if m.Zs == nil {
				m.Zs = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zx", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Zx = append(m.Zx[:0], dAtA[iNdEx:postIndex]...)
			if m.Zx == nil {
				m.Zx = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Zr = append(m.Zr[:0], dAtA[iNdEx:postIndex]...)
			if m.Zr == nil {
				m.Zr = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthZk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ZeroBalanceProof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ZeroBalanceProof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ZeroBalanceProof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field YP", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.YP = append(m.YP[:0], dAtA[iNdEx:postIndex]...)
			if m.YP == nil {
				m.YP = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field YD", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.YD = append(m.YD[:0], dAtA[iNdEx:postIndex]...)
			if m.YD == nil {
				m.YD = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Z", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Z = append(m.Z[:0], dAtA[iNdEx:postIndex]...)
			if m.Z == nil {
				m.Z = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthZk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipZk(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowZk
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowZk
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowZk
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthZk
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupZk
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthZk
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthZk        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowZk          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupZk = fmt.Errorf("proto: unexpected end of group")
)
