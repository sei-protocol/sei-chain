// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: confidentialtransfers/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GetCtAccountRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Denom   string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *GetCtAccountRequest) Reset()         { *m = GetCtAccountRequest{} }
func (m *GetCtAccountRequest) String() string { return proto.CompactTextString(m) }
func (*GetCtAccountRequest) ProtoMessage()    {}
func (*GetCtAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_35280e71e5f6c1ab, []int{0}
}
func (m *GetCtAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCtAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCtAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCtAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCtAccountRequest.Merge(m, src)
}
func (m *GetCtAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetCtAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCtAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCtAccountRequest proto.InternalMessageInfo

func (m *GetCtAccountRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *GetCtAccountRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type GetCtAccountResponse struct {
	Account *CtAccount `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
}

func (m *GetCtAccountResponse) Reset()         { *m = GetCtAccountResponse{} }
func (m *GetCtAccountResponse) String() string { return proto.CompactTextString(m) }
func (*GetCtAccountResponse) ProtoMessage()    {}
func (*GetCtAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_35280e71e5f6c1ab, []int{1}
}
func (m *GetCtAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCtAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCtAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCtAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCtAccountResponse.Merge(m, src)
}
func (m *GetCtAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetCtAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCtAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetCtAccountResponse proto.InternalMessageInfo

func (m *GetCtAccountResponse) GetAccount() *CtAccount {
	if m != nil {
		return m.Account
	}
	return nil
}

type GetAllCtAccountsRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *GetAllCtAccountsRequest) Reset()         { *m = GetAllCtAccountsRequest{} }
func (m *GetAllCtAccountsRequest) String() string { return proto.CompactTextString(m) }
func (*GetAllCtAccountsRequest) ProtoMessage()    {}
func (*GetAllCtAccountsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_35280e71e5f6c1ab, []int{2}
}
func (m *GetAllCtAccountsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllCtAccountsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllCtAccountsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAllCtAccountsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllCtAccountsRequest.Merge(m, src)
}
func (m *GetAllCtAccountsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAllCtAccountsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllCtAccountsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllCtAccountsRequest proto.InternalMessageInfo

type GetAllCtAccountsResponse struct {
	Accounts []CtAccountWithDenom `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *GetAllCtAccountsResponse) Reset()         { *m = GetAllCtAccountsResponse{} }
func (m *GetAllCtAccountsResponse) String() string { return proto.CompactTextString(m) }
func (*GetAllCtAccountsResponse) ProtoMessage()    {}
func (*GetAllCtAccountsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_35280e71e5f6c1ab, []int{3}
}
func (m *GetAllCtAccountsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllCtAccountsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllCtAccountsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAllCtAccountsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllCtAccountsResponse.Merge(m, src)
}
func (m *GetAllCtAccountsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetAllCtAccountsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllCtAccountsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllCtAccountsResponse proto.InternalMessageInfo

func (m *GetAllCtAccountsResponse) GetAccounts() []CtAccountWithDenom {
	if m != nil {
		return m.Accounts
	}
	return nil
}

func (m *GetAllCtAccountsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type DecryptedCtAccount struct {
	PublicKey                   []byte `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	PendingBalanceLo            uint32 `protobuf:"varint,2,opt,name=pending_balance_lo,json=pendingBalanceLo,proto3" json:"pending_balance_lo,omitempty"`
	PendingBalanceHi            uint64 `protobuf:"varint,3,opt,name=pending_balance_hi,json=pendingBalanceHi,proto3" json:"pending_balance_hi,omitempty"`
	CombinedPendingBalance      uint64 `protobuf:"varint,4,opt,name=combined_pending_balance,json=combinedPendingBalance,proto3" json:"combined_pending_balance,omitempty"`
	PendingBalanceCreditCounter uint32 `protobuf:"varint,5,opt,name=pending_balance_credit_counter,json=pendingBalanceCreditCounter,proto3" json:"pending_balance_credit_counter,omitempty"`
	AvailableBalance            string `protobuf:"bytes,6,opt,name=available_balance,json=availableBalance,proto3" json:"available_balance,omitempty"`
	DecryptableAvailableBalance uint64 `protobuf:"varint,7,opt,name=decryptable_available_balance,json=decryptableAvailableBalance,proto3" json:"decryptable_available_balance,omitempty"`
}

func (m *DecryptedCtAccount) Reset()         { *m = DecryptedCtAccount{} }
func (m *DecryptedCtAccount) String() string { return proto.CompactTextString(m) }
func (*DecryptedCtAccount) ProtoMessage()    {}
func (*DecryptedCtAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_35280e71e5f6c1ab, []int{4}
}
func (m *DecryptedCtAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DecryptedCtAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DecryptedCtAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DecryptedCtAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DecryptedCtAccount.Merge(m, src)
}
func (m *DecryptedCtAccount) XXX_Size() int {
	return m.Size()
}
func (m *DecryptedCtAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_DecryptedCtAccount.DiscardUnknown(m)
}

var xxx_messageInfo_DecryptedCtAccount proto.InternalMessageInfo

func init() {
	proto.RegisterType((*GetCtAccountRequest)(nil), "seiprotocol.seichain.confidentialtransfers.GetCtAccountRequest")
	proto.RegisterType((*GetCtAccountResponse)(nil), "seiprotocol.seichain.confidentialtransfers.GetCtAccountResponse")
	proto.RegisterType((*GetAllCtAccountsRequest)(nil), "seiprotocol.seichain.confidentialtransfers.GetAllCtAccountsRequest")
	proto.RegisterType((*GetAllCtAccountsResponse)(nil), "seiprotocol.seichain.confidentialtransfers.GetAllCtAccountsResponse")
	proto.RegisterType((*DecryptedCtAccount)(nil), "seiprotocol.seichain.confidentialtransfers.DecryptedCtAccount")
}

func init() { proto.RegisterFile("confidentialtransfers/query.proto", fileDescriptor_35280e71e5f6c1ab) }

var fileDescriptor_35280e71e5f6c1ab = []byte{
	// 676 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0x4d, 0x4f, 0x13, 0x4f,
	0x18, 0xef, 0x52, 0x5e, 0x07, 0xfe, 0x09, 0xff, 0x91, 0xe8, 0xa6, 0xc8, 0x82, 0x3d, 0x68, 0x83,
	0xba, 0x1b, 0x4a, 0x4c, 0x44, 0x13, 0xb1, 0x2d, 0x8a, 0x89, 0x26, 0x62, 0x2f, 0x46, 0x2f, 0x75,
	0x76, 0xf7, 0x61, 0x3b, 0x71, 0x3b, 0xb3, 0xec, 0x4c, 0x89, 0x0d, 0xe1, 0x62, 0x62, 0xa2, 0x37,
	0x13, 0xbf, 0x00, 0x5f, 0xc3, 0x0f, 0x60, 0xc2, 0x91, 0x44, 0x0f, 0x9c, 0x8c, 0x01, 0x0f, 0x7e,
	0x0c, 0xd3, 0x99, 0x6d, 0x29, 0x65, 0x0d, 0x82, 0xb7, 0x9d, 0xe7, 0xe5, 0xf7, 0xfc, 0x7e, 0xcf,
	0xcb, 0xa2, 0x2b, 0x1e, 0x67, 0xeb, 0xd4, 0x07, 0x26, 0x29, 0x09, 0x65, 0x4c, 0x98, 0x58, 0x87,
	0x58, 0x38, 0x1b, 0x4d, 0x88, 0x5b, 0x76, 0x14, 0x73, 0xc9, 0xf1, 0xbc, 0x00, 0xaa, 0xbe, 0x3c,
	0x1e, 0xda, 0x02, 0xa8, 0x57, 0x27, 0x94, 0xd9, 0xa9, 0x79, 0xb9, 0x79, 0x8f, 0x8b, 0x06, 0x17,
	0x8e, 0x4b, 0x04, 0x68, 0x10, 0x67, 0x73, 0xc1, 0x05, 0x49, 0x16, 0x9c, 0x88, 0x04, 0x94, 0x11,
	0x49, 0x39, 0xd3, 0xb8, 0xb9, 0xa9, 0x80, 0x07, 0x5c, 0x7d, 0x3a, 0xed, 0xaf, 0xc4, 0x7a, 0x39,
	0xe0, 0x3c, 0x08, 0xc1, 0x21, 0x11, 0x75, 0x08, 0x63, 0x5c, 0xaa, 0x14, 0x91, 0x78, 0x0b, 0xe9,
	0x74, 0x7b, 0xad, 0x3a, 0x32, 0xff, 0x00, 0x5d, 0x58, 0x05, 0x59, 0x91, 0x25, 0xcf, 0xe3, 0x4d,
	0x26, 0xab, 0xb0, 0xd1, 0x04, 0x21, 0xb1, 0x89, 0x46, 0x88, 0xef, 0xc7, 0x20, 0x84, 0x69, 0xcc,
	0x19, 0x85, 0xb1, 0x6a, 0xe7, 0x89, 0xa7, 0xd0, 0x90, 0x0f, 0x8c, 0x37, 0xcc, 0x01, 0x65, 0xd7,
	0x8f, 0x7c, 0x80, 0xa6, 0x8e, 0xc3, 0x88, 0x88, 0x33, 0x01, 0xf8, 0x29, 0x1a, 0x21, 0xda, 0xa4,
	0x70, 0xc6, 0x8b, 0xb7, 0xec, 0xbf, 0x6f, 0x93, 0x7d, 0x84, 0xd7, 0x41, 0xc9, 0xbf, 0x33, 0xd0,
	0xa5, 0x55, 0x90, 0xa5, 0x30, 0xec, 0x3a, 0xc5, 0xe9, 0xa4, 0x1f, 0x22, 0x74, 0xd4, 0x57, 0xc5,
	0x7c, 0xbc, 0x78, 0xd5, 0xd6, 0x43, 0xb0, 0xdb, 0x43, 0xb0, 0xf5, 0x24, 0x93, 0x21, 0xd8, 0x6b,
	0x24, 0x80, 0x04, 0xb5, 0xda, 0x93, 0x79, 0x67, 0xf4, 0xfd, 0xce, 0x6c, 0xe6, 0xd7, 0xce, 0x6c,
	0x26, 0xff, 0xc5, 0x40, 0xe6, 0x49, 0x1e, 0x89, 0xea, 0x57, 0x68, 0x34, 0xe1, 0xdb, 0x66, 0x92,
	0x2d, 0x8c, 0x17, 0xef, 0x9d, 0x4b, 0xf6, 0x73, 0x2a, 0xeb, 0x2b, 0xed, 0xfe, 0x96, 0x07, 0x77,
	0xbf, 0xcf, 0x66, 0xaa, 0x5d, 0x54, 0xbc, 0x9a, 0x22, 0xe8, 0xda, 0xa9, 0x82, 0x34, 0xbd, 0x5e,
	0x45, 0xf9, 0x0f, 0x59, 0x84, 0x57, 0xc0, 0x8b, 0x5b, 0x91, 0x04, 0xbf, 0x5b, 0x18, 0xcf, 0x20,
	0x14, 0x35, 0xdd, 0x90, 0x7a, 0xb5, 0xd7, 0xd0, 0x52, 0xdd, 0x9c, 0xa8, 0x8e, 0x69, 0xcb, 0x63,
	0x68, 0xe1, 0x1b, 0x08, 0x47, 0xc0, 0x7c, 0xca, 0x82, 0x9a, 0x4b, 0x42, 0xc2, 0x3c, 0xa8, 0x85,
	0x5c, 0xd1, 0xf8, 0xaf, 0x3a, 0x99, 0x78, 0xca, 0xda, 0xf1, 0x84, 0xa7, 0x45, 0xd7, 0xa9, 0x99,
	0x9d, 0x33, 0x0a, 0x83, 0xfd, 0xd1, 0x8f, 0x28, 0xbe, 0x8d, 0x4c, 0x8f, 0x37, 0x5c, 0xca, 0xc0,
	0xaf, 0xf5, 0xa5, 0x99, 0x83, 0x2a, 0xe7, 0x62, 0xc7, 0xbf, 0x76, 0x2c, 0x17, 0x57, 0x90, 0xd5,
	0x5f, 0xc7, 0x8b, 0xc1, 0xa7, 0xb2, 0xa6, 0x44, 0x41, 0x6c, 0x0e, 0x29, 0x86, 0xd3, 0xc7, 0x6b,
	0x56, 0x54, 0x4c, 0x45, 0x87, 0xe0, 0xeb, 0xe8, 0x7f, 0xb2, 0x49, 0x68, 0x48, 0xdc, 0x10, 0xba,
	0x75, 0x87, 0xd5, 0x3a, 0x4d, 0x76, 0x1d, 0x9d, 0x8a, 0x65, 0x34, 0xe3, 0xeb, 0xe6, 0xa9, 0xf0,
	0x93, 0x89, 0x23, 0x8a, 0xf0, 0x74, 0x4f, 0x50, 0xa9, 0x0f, 0xe3, 0x68, 0xa7, 0x8a, 0x9f, 0xb3,
	0x68, 0xe8, 0x59, 0x7b, 0x6c, 0xf8, 0x9b, 0x81, 0x26, 0x7a, 0xef, 0x09, 0x2f, 0x9f, 0x65, 0x7f,
	0x52, 0x0e, 0x3a, 0x77, 0xff, 0xfc, 0x00, 0x7a, 0x6b, 0xf2, 0xa5, 0xb7, 0x5f, 0x7f, 0x7e, 0x1a,
	0xb8, 0x8b, 0x97, 0x9c, 0x4e, 0xb6, 0x93, 0xfe, 0x97, 0x49, 0x96, 0xd4, 0xd9, 0x4a, 0xae, 0x6f,
	0xdb, 0xd9, 0x52, 0x3f, 0x89, 0x6d, 0xbc, 0x6f, 0xa0, 0xc9, 0xfe, 0xa3, 0xc1, 0x95, 0x33, 0x32,
	0x4b, 0x3b, 0xfd, 0xdc, 0xca, 0xbf, 0x81, 0x24, 0x12, 0x97, 0x94, 0xc4, 0x45, 0xbc, 0x70, 0x66,
	0x89, 0xe5, 0x17, 0xbb, 0x07, 0x96, 0xb1, 0x77, 0x60, 0x19, 0x3f, 0x0e, 0x2c, 0xe3, 0xe3, 0xa1,
	0x95, 0xd9, 0x3b, 0xb4, 0x32, 0xfb, 0x87, 0x56, 0xe6, 0xe5, 0x72, 0x40, 0x65, 0xbd, 0xe9, 0xda,
	0x1e, 0x6f, 0xb4, 0x61, 0x6f, 0x76, 0x58, 0xaa, 0x87, 0x2e, 0xf2, 0xe6, 0x0f, 0x65, 0x64, 0x2b,
	0x02, 0xe1, 0x0e, 0xab, 0x8c, 0xc5, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xcf, 0xb0, 0x0d, 0xbe,
	0x84, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	GetCtAccount(ctx context.Context, in *GetCtAccountRequest, opts ...grpc.CallOption) (*GetCtAccountResponse, error)
	GetAllCtAccounts(ctx context.Context, in *GetAllCtAccountsRequest, opts ...grpc.CallOption) (*GetAllCtAccountsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) GetCtAccount(ctx context.Context, in *GetCtAccountRequest, opts ...grpc.CallOption) (*GetCtAccountResponse, error) {
	out := new(GetCtAccountResponse)
	err := c.cc.Invoke(ctx, "/seiprotocol.seichain.confidentialtransfers.Query/GetCtAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetAllCtAccounts(ctx context.Context, in *GetAllCtAccountsRequest, opts ...grpc.CallOption) (*GetAllCtAccountsResponse, error) {
	out := new(GetAllCtAccountsResponse)
	err := c.cc.Invoke(ctx, "/seiprotocol.seichain.confidentialtransfers.Query/GetAllCtAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	GetCtAccount(context.Context, *GetCtAccountRequest) (*GetCtAccountResponse, error)
	GetAllCtAccounts(context.Context, *GetAllCtAccountsRequest) (*GetAllCtAccountsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) GetCtAccount(ctx context.Context, req *GetCtAccountRequest) (*GetCtAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCtAccount not implemented")
}
func (*UnimplementedQueryServer) GetAllCtAccounts(ctx context.Context, req *GetAllCtAccountsRequest) (*GetAllCtAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCtAccounts not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_GetCtAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCtAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetCtAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seiprotocol.seichain.confidentialtransfers.Query/GetCtAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetCtAccount(ctx, req.(*GetCtAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetAllCtAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllCtAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAllCtAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seiprotocol.seichain.confidentialtransfers.Query/GetAllCtAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAllCtAccounts(ctx, req.(*GetAllCtAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "seiprotocol.seichain.confidentialtransfers.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCtAccount",
			Handler:    _Query_GetCtAccount_Handler,
		},
		{
			MethodName: "GetAllCtAccounts",
			Handler:    _Query_GetAllCtAccounts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "confidentialtransfers/query.proto",
}

func (m *GetCtAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCtAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCtAccountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetCtAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCtAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCtAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Account != nil {
		{
			size, err := m.Account.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetAllCtAccountsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllCtAccountsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAllCtAccountsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetAllCtAccountsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllCtAccountsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAllCtAccountsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Accounts) > 0 {
		for iNdEx := len(m.Accounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Accounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DecryptedCtAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DecryptedCtAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DecryptedCtAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DecryptableAvailableBalance != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.DecryptableAvailableBalance))
		i--
		dAtA[i] = 0x38
	}
	if len(m.AvailableBalance) > 0 {
		i -= len(m.AvailableBalance)
		copy(dAtA[i:], m.AvailableBalance)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AvailableBalance)))
		i--
		dAtA[i] = 0x32
	}
	if m.PendingBalanceCreditCounter != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PendingBalanceCreditCounter))
		i--
		dAtA[i] = 0x28
	}
	if m.CombinedPendingBalance != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.CombinedPendingBalance))
		i--
		dAtA[i] = 0x20
	}
	if m.PendingBalanceHi != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PendingBalanceHi))
		i--
		dAtA[i] = 0x18
	}
	if m.PendingBalanceLo != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PendingBalanceLo))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetCtAccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetCtAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Account != nil {
		l = m.Account.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetAllCtAccountsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetAllCtAccountsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Accounts) > 0 {
		for _, e := range m.Accounts {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *DecryptedCtAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.PendingBalanceLo != 0 {
		n += 1 + sovQuery(uint64(m.PendingBalanceLo))
	}
	if m.PendingBalanceHi != 0 {
		n += 1 + sovQuery(uint64(m.PendingBalanceHi))
	}
	if m.CombinedPendingBalance != 0 {
		n += 1 + sovQuery(uint64(m.CombinedPendingBalance))
	}
	if m.PendingBalanceCreditCounter != 0 {
		n += 1 + sovQuery(uint64(m.PendingBalanceCreditCounter))
	}
	l = len(m.AvailableBalance)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.DecryptableAvailableBalance != 0 {
		n += 1 + sovQuery(uint64(m.DecryptableAvailableBalance))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetCtAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCtAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCtAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCtAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCtAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCtAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Account == nil {
				m.Account = &CtAccount{}
			}
			if err := m.Account.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllCtAccountsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllCtAccountsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllCtAccountsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllCtAccountsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllCtAccountsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllCtAccountsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Accounts = append(m.Accounts, CtAccountWithDenom{})
			if err := m.Accounts[len(m.Accounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DecryptedCtAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DecryptedCtAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DecryptedCtAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingBalanceLo", wireType)
			}
			m.PendingBalanceLo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PendingBalanceLo |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingBalanceHi", wireType)
			}
			m.PendingBalanceHi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PendingBalanceHi |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CombinedPendingBalance", wireType)
			}
			m.CombinedPendingBalance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CombinedPendingBalance |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingBalanceCreditCounter", wireType)
			}
			m.PendingBalanceCreditCounter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PendingBalanceCreditCounter |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailableBalance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AvailableBalance = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecryptableAvailableBalance", wireType)
			}
			m.DecryptableAvailableBalance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DecryptableAvailableBalance |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
