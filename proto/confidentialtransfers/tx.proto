syntax = "proto3";
package seiprotocol.seichain.confidentialtransfers;


import "gogoproto/gogo.proto";
import "confidentialtransfers/cryptography.proto";
import "confidentialtransfers/zk.proto";

option go_package = "github.com/sei-protocol/sei-chain/x/confidentialtransfers/types";

// Msg defines the confidential transfers Msg service.
service Msg {
  // Transfer defines a method for sending coins from one account to another account.
  rpc Transfer(MsgTransfer) returns (MsgTransferResponse);

  // InitializeAccount defines a method for creating a new confidential transfers account for some denom.
  rpc InitializeAccount(MsgInitializeAccount) returns (MsgInitializeAccountResponse);

  // Deposit defines a method for depositing funds into a confidential transfers account.
  rpc Deposit(MsgDeposit) returns (MsgDepositResponse);

  // Withdraw defines a method for withdrawing funds from a confidential transfers account.
  rpc Withdraw(MsgWithdraw) returns (MsgWithdrawResponse);

  // ApplyPendingBalance defines a method for applying pending balance to an account.
  rpc ApplyPendingBalance(MsgApplyPendingBalance) returns (MsgApplyPendingBalanceResponse);

  // CloseAccount defines a method for closing an account.
  rpc CloseAccount(MsgCloseAccount) returns (MsgCloseAccountResponse);
}

// MsgTransfer represents a message to send coins from one account to another.
message MsgTransfer {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string   from_address = 1 [(gogoproto.moretags) = "yaml:\"from_address\""];
  string   to_address = 2 [(gogoproto.moretags) = "yaml:\"to_address\""];
  string   denom = 3 [(gogoproto.moretags) = "yaml:\"denom\""];
  Ciphertext from_amount_lo = 4 [(gogoproto.moretags) = "yaml:\"from_amount_lo\""];
  Ciphertext from_amount_hi = 5 [(gogoproto.moretags) = "yaml:\"from_amount_hi\""];
  Ciphertext to_amount_lo = 6 [(gogoproto.moretags) = "yaml:\"to_amount_lo\""];
  Ciphertext to_amount_hi = 7 [(gogoproto.moretags) = "yaml:\"to_amount_hi\""];
  Ciphertext remaining_balance = 8 [(gogoproto.moretags) = "yaml:\"remaining_balance\""];
  string decryptable_balance = 9 [(gogoproto.moretags) = "yaml:\"decryptable_balance\""];
  TransferMsgProofs proofs = 10 [(gogoproto.moretags) = "yaml:\"proofs\""];
  repeated Auditor auditors = 11 [(gogoproto.moretags) = "yaml:\"auditors\""];
}

// MsgTransferResponse defines the Msg/Send response type.
message MsgTransferResponse {}

message Auditor {
  string auditor_address = 1 [(gogoproto.moretags) = "yaml:\"address\""];
  Ciphertext encrypted_transfer_amount_lo = 2 [(gogoproto.moretags) = "yaml:\"encrypted_transfer_amount_lo\""];
  Ciphertext encrypted_transfer_amount_hi = 3 [(gogoproto.moretags) = "yaml:\"encrypted_transfer_amount_hi\""];
  CiphertextValidityProof transfer_amount_lo_validity_proof = 4 [(gogoproto.moretags) = "yaml:\"transfer_amount_lo_validity_proof\""];
  CiphertextValidityProof transfer_amount_hi_validity_proof = 5 [(gogoproto.moretags) = "yaml:\"transfer_amount_hi_validity_proof\""];
  CiphertextCiphertextEqualityProof transfer_amount_lo_equality_proof = 6 [(gogoproto.moretags) = "yaml:\"transfer_amount_lo_equality_proof\""];
  CiphertextCiphertextEqualityProof transfer_amount_hi_equality_proof = 7 [(gogoproto.moretags) = "yaml:\"transfer_amount_hi_equality_proof\""];
}

// MsgInitializeAccount represents a message to create a new confidential transfer account.
message MsgInitializeAccount {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string   from_address = 1 [(gogoproto.moretags) = "yaml:\"from_address\""];
  string   denom = 2 [(gogoproto.moretags) = "yaml:\"denom\""];
  bytes public_key = 3 [(gogoproto.moretags) = "yaml:\"public_key\""];
  string decryptable_balance = 4 [(gogoproto.moretags) = "yaml:\"decryptable_balance\""];
  Ciphertext pending_balance_lo = 5 [(gogoproto.moretags) = "yaml:\"pending_balance_lo\""];
  Ciphertext pending_balance_hi = 6 [(gogoproto.moretags) = "yaml:\"pending_balance_hi\""];
  Ciphertext available_balance = 7 [(gogoproto.moretags) = "yaml:\"available_balance\""];
  InitializeAccountMsgProofs proofs = 8 [(gogoproto.moretags) = "yaml:\"proofs\""];
}

// MsgInitializeAccountResponse defines the Msg/Send response type.
message MsgInitializeAccountResponse {}

// MsgDeposit represents a message for depositing tokens into a confidential account
message MsgDeposit {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string from_address = 1 [(gogoproto.moretags) = "yaml:\"from_address\""];
  string denom = 2 [(gogoproto.moretags) = "yaml:\"denom\""];
  uint64 amount = 3 [(gogoproto.moretags) = "yaml:\"amount\""];
}

// MsgDepositResponse defines the Msg/Send response type.
message MsgDepositResponse {}

// MsgWithdraw represents a message to withdraw from a confidential module account.
message MsgWithdraw {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string   from_address = 1 [(gogoproto.moretags) = "yaml:\"from_address\""];
  string   denom = 2 [(gogoproto.moretags) = "yaml:\"denom\""];
  string   amount = 3 [(gogoproto.moretags) = "yaml:\"amount\""];;
  string decryptable_balance = 4 [(gogoproto.moretags) = "yaml:\"decryptable_balance\""];
  Ciphertext remaining_balance_commitment = 5 [(gogoproto.moretags) = "yaml:\"remaining_balance_commitment\""];
  WithdrawMsgProofs proofs = 6 [(gogoproto.moretags) = "yaml:\"proofs\""];
}

// MsgWithdrawResponse defines the Msg/Send response type.
message MsgWithdrawResponse {}

// Message to be used in apply pending balance instruction/transaction
message MsgApplyPendingBalance {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string address = 1 [(gogoproto.moretags) = "yaml:\"address\""];
  string denom = 2 [(gogoproto.moretags) = "yaml:\"denom\""];
  string new_decryptable_available_balance = 3 [(gogoproto.moretags) = "yaml:\"new_decryptable_available_balance\""];
  uint32 current_pending_balance_counter = 4 [(gogoproto.moretags) = "yaml:\"current_pending_balance_counter\""];
  Ciphertext current_available_balance = 5 [(gogoproto.moretags) = "yaml:\"current_available_balance\""];
}

message MsgApplyPendingBalanceResponse {}

// Message to be used in close account instruction/transaction
message MsgCloseAccount {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string address = 1 [(gogoproto.moretags) = "yaml:\"address\""];
  string denom = 2 [(gogoproto.moretags) = "yaml:\"denom\""];
  CloseAccountMsgProofs proofs = 3 [(gogoproto.moretags) = "yaml:\"proofs\""];
}

message MsgCloseAccountResponse {}
