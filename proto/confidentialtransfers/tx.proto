syntax = "proto3";
package seiprotocol.seichain.confidentialtransfers;


import "gogoproto/gogo.proto";
import "confidentialtransfers/cryptography.proto";
import "confidentialtransfers/zk.proto";

option go_package = "github.com/sei-protocol/sei-chain/x/confidentialtransfers/types";

// Msg defines the confidential transfers Msg service.
service Msg {
  // Transfer defines a method for sending coins from one account to another account.
  rpc Transfer(MsgTransfer) returns (MsgTransferResponse);
}

// MsgTransfer represents a message to send coins from one account to another.
message MsgTransfer {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string   from_address = 1 [(gogoproto.moretags) = "yaml:\"from_address\""];
  string   to_address = 2 [(gogoproto.moretags) = "yaml:\"to_address\""];
  string   denom = 3 [(gogoproto.moretags) = "yaml:\"denom\""];
  Ciphertext from_amount_lo = 4 [(gogoproto.moretags) = "yaml:\"from_amount_lo\""];
  Ciphertext from_amount_hi = 5 [(gogoproto.moretags) = "yaml:\"from_amount_hi\""];
  Ciphertext to_amount_lo = 6 [(gogoproto.moretags) = "yaml:\"to_amount_lo\""];
  Ciphertext to_amount_hi = 7 [(gogoproto.moretags) = "yaml:\"to_amount_hi\""];
  Ciphertext remaining_balance = 8 [(gogoproto.moretags) = "yaml:\"decryptable_balance\""];
  string decryptable_balance = 9 [(gogoproto.moretags) = "yaml:\"decryptable_balance\""];
  TransferProofs proofs = 10 [(gogoproto.moretags) = "yaml:\"proofs\""];
  repeated Auditor auditors = 11 [(gogoproto.moretags) = "yaml:\"auditors\""];
}

// MsgSendResponse defines the Msg/Send response type.
message MsgTransferResponse {}

message Auditor {
  string auditor_address = 1 [(gogoproto.moretags) = "yaml:\"address\""];
  Ciphertext encrypted_transfer_amount_lo = 2 [(gogoproto.moretags) = "yaml:\"encrypted_transfer_amount_lo\""];
  Ciphertext encrypted_transfer_amount_hi = 3 [(gogoproto.moretags) = "yaml:\"encrypted_transfer_amount_hi\""];
  CiphertextValidityProof transfer_amount_lo_validity_proof = 4 [(gogoproto.moretags) = "yaml:\"transfer_amount_lo_validity_proof\""];
  CiphertextValidityProof transfer_amount_hi_validity_proof = 5 [(gogoproto.moretags) = "yaml:\"transfer_amount_hi_validity_proof\""];
  CiphertextCiphertextEqualityProof transfer_amount_lo_equality_proof = 6 [(gogoproto.moretags) = "yaml:\"transfer_amount_lo_equality_proof\""];
  CiphertextCiphertextEqualityProof transfer_amount_hi_equality_proof = 7 [(gogoproto.moretags) = "yaml:\"transfer_amount_hi_equality_proof\""];
}
