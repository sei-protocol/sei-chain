syntax = "proto3";
package seiprotocol.seichain.confidentialtransfers;

option go_package = "github.com/sei-protocol/sei-chain/x/confidentialtransfers/types";


message TransferMsgProofs {
  CiphertextValidityProof remaining_balance_commitment_validity_proof = 1;
  CiphertextValidityProof sender_transfer_amount_lo_validity_proof = 2;
  CiphertextValidityProof sender_transfer_amount_hi_validity_proof = 3;
  CiphertextValidityProof recipient_transfer_amount_lo_validity_proof = 4;
  CiphertextValidityProof recipient_transfer_amount_hi_validity_proof = 5;
  RangeProof remaining_balance_range_proof = 6;
  CiphertextCommitmentEqualityProof remaining_balance_equality_proof = 7;
  CiphertextCiphertextEqualityProof transfer_amount_lo_equality_proof = 8;
  CiphertextCiphertextEqualityProof transfer_amount_hi_equality_proof = 9;
  RangeProof transfer_amount_lo_range_proof = 10;
  RangeProof transfer_amount_hi_range_proof = 11;
}

message InitializeAccountMsgProofs {
  PubkeyValidityProof pubkey_validity_proof = 1;
  ZeroBalanceProof zero_pending_balance_lo_proof = 2;
  ZeroBalanceProof zero_pending_balance_hi_proof = 3;
  ZeroBalanceProof zero_available_balance_proof = 4;
}

message WithdrawMsgProofs {
  RangeProof remaining_balance_range_proof = 1;
  CiphertextCommitmentEqualityProof remaining_balance_equality_proof = 2;
}

message CloseAccountMsgProofs {
  ZeroBalanceProof zero_available_balance_proof = 1;
  ZeroBalanceProof zero_pending_balance_lo_proof = 2;
  ZeroBalanceProof zero_pending_balance_hi_proof = 3;
}

message PubkeyValidityProof {
  bytes y = 1;
  bytes z = 2;
}

message CiphertextValidityProof {
  // First commitment
  bytes commitment_1 = 1;

  // Second commitment
  bytes commitment_2 = 2;

  // First response
  bytes response_1 = 4;

  // Second response
  bytes response_2 = 5;
}

message RangeProof {
  bytes proof = 1;
  bytes randomness = 2;
  int64 upper_bound = 3;
}

message CiphertextCommitmentEqualityProof {
  bytes y0 = 1;
  bytes y1 = 2;
  bytes y2 = 3;
  bytes zs = 4;
  bytes zx = 5;
  bytes zr = 6;
}

message CiphertextCiphertextEqualityProof {
  bytes y0 = 1;
  bytes y1 = 2;
  bytes y2 = 3;
  bytes y3 = 4;
  bytes zs = 5;
  bytes zx = 6;
  bytes zr = 7;
}

message ZeroBalanceProof {
  bytes y_p = 1;
  bytes y_d = 2;
  bytes z = 3;
}