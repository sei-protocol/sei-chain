syntax = "proto3";
package seiprotocol.seichain.confidentialtransfers;

import "cosmos/base/query/v1beta1/pagination.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "confidentialtransfers/confidential.proto";

option go_package = "github.com/sei-protocol/sei-chain/x/confidentialtransfers/types";

// Query defines the gRPC querier service.
service Query {
  rpc GetCtAccount (GetCtAccountRequest) returns (GetCtAccountResponse) {
    option (google.api.http) = {
      get: "/seichain/confidentialtransfers/account/{address}/denom"
    };
  }

  rpc GetAllCtAccounts (GetAllCtAccountsRequest) returns (GetAllCtAccountsResponse) {
    option (google.api.http) = {
      get: "/seichain/confidentialtransfers/account/{address}"
    };
  }
}

message GetCtAccountRequest {
  string address = 1;
  string denom = 2;
}

message GetCtAccountResponse {
  CtAccount account = 1;
}

message GetAllCtAccountsRequest {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string address = 1;

  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message GetAllCtAccountsResponse {
  repeated CtAccountWithDenom accounts = 1 [(gogoproto.nullable) = false];

  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message DecryptedCtAccount {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  bytes  public_key = 1;  // serialized public key
  uint32  pending_balance_lo = 2;    // lo bits of the pending balance
  uint64  pending_balance_hi = 3; // hi bits of the pending balance
  uint64  combined_pending_balance = 4; // combined pending balance
  uint32   pending_balance_credit_counter = 5;
  string   available_balance = 6; // decrypted available balance
  uint64   decryptable_available_balance = 7; // decrypted aes encrypted available balance
}