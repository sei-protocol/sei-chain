syntax = "proto3";
package seiprotocol.seichain.confidentialtransfers;

import "cosmos/base/query/v1beta1/pagination.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "confidentialtransfers/confidential.proto";
import "confidentialtransfers/zk.proto";

option go_package = "github.com/sei-protocol/sei-chain/x/confidentialtransfers/types";

// Query defines the gRPC querier service.
service Query {
  rpc GetCtAccount (GetCtAccountRequest) returns (GetCtAccountResponse) {
    option (google.api.http) = {
      get: "/seichain/confidentialtransfers/account/{address}/denom"
    };
  }

  rpc GetAllCtAccounts (GetAllCtAccountsRequest) returns (GetAllCtAccountsResponse) {
    option (google.api.http) = {
      get: "/seichain/confidentialtransfers/account/{address}"
    };
  }
}

message GetCtAccountRequest {
  string address = 1;
  string denom = 2;
}

message GetCtAccountResponse {
  CtAccount account = 1;
}

message GetAllCtAccountsRequest {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string address = 1;

  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message GetAllCtAccountsResponse {
  repeated CtAccountWithDenom accounts = 1 [(gogoproto.nullable) = false];

  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message DecryptedCtAccount {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  bytes  public_key = 1;  // serialized public key
  // We use uint64 so JSON print output is consistent with pending_balance_hi
  uint64  pending_balance_lo = 2; // lo bits of the pending balance
  uint64  pending_balance_hi = 3; // hi bits of the pending balance
  string  combined_pending_balance = 4; // combined pending balance
  uint32   pending_balance_credit_counter = 5;
  string   available_balance = 6; // decrypted available balance
  string   decryptable_available_balance = 7; // decrypted aes encrypted available balance
}

// Decrypted version of ApplyPendingBalance
message ApplyPendingBalanceDecrypted {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string address = 1;
  string denom = 2;
  string new_decryptable_available_balance = 3;
  uint32 current_pending_balance_counter = 4;
  string current_available_balance = 5;
}

// Decrypted version of InitializeAccount
message InitializeAccountDecrypted {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string from_address = 1;
  string denom = 2;
  bytes pubkey = 3;
  uint32 pending_balance_lo = 4;
  uint64 pending_balance_hi = 5;
  string available_balance = 6;
  string decryptable_balance = 7;
  InitializeAccountMsgProofs proofs = 8;
}

// Decrypted version of Withdraw
message WithdrawDecrypted {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string from_address = 1;
  string denom = 2;
  string amount = 3;
  string decryptable_balance = 4;
  string remaining_balance_commitment = 5;
  WithdrawMsgProofs proofs = 6;
}

// Decrypted version of Transfer
message TransferDecrypted {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string from_address = 1;
  string to_address = 2;
  string denom = 3;
  uint32 transfer_amount_lo = 4;
  uint32 transfer_amount_hi = 5;
  uint64 total_transfer_amount = 6;
  string remaining_balance_commitment = 7;
  string decryptable_balance = 8;
  TransferMsgProofs proofs = 9;
  repeated string auditors = 10;
}
