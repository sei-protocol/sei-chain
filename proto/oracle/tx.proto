syntax = "proto3";
package seiprotocol.seichain.oracle;

import "gogoproto/gogo.proto";

option go_package = "github.com/sei-protocol/sei-chain/x/oracle/types";

// Msg defines the oracle Msg service.
service Msg {
  // AggregateExchangeRateVote defines a method for submitting
  // aggregate exchange rate vote
  rpc AggregateExchangeRateVote(MsgAggregateExchangeRateVote) returns (MsgAggregateExchangeRateVoteResponse);

  // DelegateFeedConsent defines a method for setting the feeder delegation
  rpc DelegateFeedConsent(MsgDelegateFeedConsent) returns (MsgDelegateFeedConsentResponse);
}

// MsgAggregateExchangeRateVote represents a message to submit
// aggregate exchange rate vote.
message MsgAggregateExchangeRateVote {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  // 1 reserved from old field `salt`
  string exchange_rates = 2 [(gogoproto.moretags) = "yaml:\"exchange_rates\""];
  string feeder         = 3 [(gogoproto.moretags) = "yaml:\"feeder\""];
  string validator      = 4 [(gogoproto.moretags) = "yaml:\"validator\""];
}

// MsgAggregateExchangeRateVoteResponse defines the Msg/AggregateExchangeRateVote response type.
message MsgAggregateExchangeRateVoteResponse {}

// MsgDelegateFeedConsent represents a message to
// delegate oracle voting rights to another address.
message MsgDelegateFeedConsent {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string operator = 1 [(gogoproto.moretags) = "yaml:\"operator\""];
  string delegate = 2 [(gogoproto.moretags) = "yaml:\"delegate\""];
}

// MsgDelegateFeedConsentResponse defines the Msg/DelegateFeedConsent response type.
message MsgDelegateFeedConsentResponse {}