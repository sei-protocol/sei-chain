- name: Test sending funds
  inputs:
    # Create test account
    - cmd: seid keys add --keyring-backend test bank-test
    - cmd: printf "12345678\n" | seid keys show -a admin
      env: ADMIN_ACC
    - cmd: seid keys show -a bank-test --keyring-backend test
      env: BANK_TEST_ACC
    # Send funds
    - cmd: printf "12345678\n" | seid tx bank send $ADMIN_ACC $BANK_TEST_ACC 1sei -b block --fees 2000usei --chain-id sei -y
    # Validate
    - cmd: seid q bank balances $BANK_TEST_ACC --output json | jq -r .balances[0].amount
      env: BANK_TEST_BAL
    # Get current height
    - cmd: seid q block | jq -r ".block.header.height"
      env: FIRST_BLOCK_HEIGHT
    # Sleep 20s to let chain progress
    - cmd: sleep 20
    # Send more funds
    - cmd: printf "12345678\n" | seid tx bank send $ADMIN_ACC $BANK_TEST_ACC 1sei -b block --fees 2000usei --chain-id sei -y
    # Verify historical balance correct
    - cmd: seid q bank balances $BANK_TEST_ACC --height $FIRST_BLOCK_HEIGHT --output json | jq -r .balances[0].amount
      env: FIRST_BANK_TEST_BAL
    # Validate
    - cmd: seid q bank balances $BANK_TEST_ACC --output json | jq -r .balances[0].amount
      env: SECOND_BANK_TEST_BAL
  verifiers:
    # Bank balance should be 1sei
    - type: eval
      expr: BANK_TEST_BAL == 1000000
    - type: eval
      expr: FIRST_BANK_TEST_BAL == 1000000
    - type: eval
      expr: SECOND_BANK_TEST_BAL == 2000000
