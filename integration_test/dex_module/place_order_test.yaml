- name: Test placing a new order and query the placed order
  inputs:
    # Get contract address, this requires contract already deployed
    - cmd: tail -1 integration_test/contracts/mars-addr.txt
      env: CONTRACT_ADDR
    # Prepare parameter
    - cmd: echo "LONG?1.01?5?SEI?ATOM?LIMIT?{\"leverage\":\"1\",\"position_effect\":\"Open\"}"
      env: PARAMS
    # Verify that placing a dex order with gas > max block gas is okay since gas will be ignored
    - cmd: printf "12345678\n" | seid tx dex place-orders $CONTRACT_ADDR $PARAMS --amount=1000000000usei -y --from=admin --chain-id=sei --fees=1000000usei --gas=500000000 --broadcast-mode=block --output json|jq -M -r ".logs[].events[].attributes[] | select(.key == \"order_id\").value"
      env: MAX_GAS_ORDER_ID
    # Place an order and set ORDER_ID
    - cmd: printf "12345678\n" | seid tx dex place-orders $CONTRACT_ADDR $PARAMS --amount=1000000000usei -y --from=admin --chain-id=sei --fees=1000000usei --gas=5000000 --broadcast-mode=block --output json|jq -M -r ".logs[].events[].attributes[] | select(.key == \"order_id\").value"
      env: ORDER_ID
    # Query the order by id
    - cmd: seid q dex get-orders-by-id $CONTRACT_ADDR SEI ATOM $ORDER_ID --output json |jq .order.status
      env: RESULT
  verifiers:
    # Order ids should be greater or equal to 0
    - type: eval
      expr: MAX_GAS_ORDER_ID >= 0
    - type: eval
      expr: ORDER_ID >= 0
    # Order status should be something like PLACED
    - type: regex
      result: RESULT
      expr: '^.*PLACED.*'

- name: Test place multiple orders should give the correct asset denom
  inputs:
    # Get contract address, this requires contract already deployed
    - cmd: tail -1 integration_test/contracts/mars-addr.txt
      env: CONTRACT_ADDR
    # Get admin account address
    - cmd: printf "12345678\n" | seid keys show admin --output json |jq -r .address
      env: ADMIN_ADDR
    - cmd: seid q dex get-orders $CONTRACT_ADDR $ADMIN_ADDR --output json |jq ".[] | length"
      env: ORDER_COUNT_BEFORE
    # Prepare parameter
    - cmd: echo "LONG?1.0?10?usei?uatom?LIMIT? LONG?3.0?3000?usei?uatomatomatom?LIMIT? LONG?3.0?1000?usei?uatomatom?LIMIT?"
      env: PARAMS
    # Place 3 orders
    - cmd: printf "12345678\n" | seid tx dex place-orders $CONTRACT_ADDR $PARAMS --amount=1000000000usei -y --from=admin --chain-id=sei --fees=1000000usei --gas=5000000 --broadcast-mode=block --output json| jq .code

    # Query all the orders
    - cmd: seid q dex get-orders $CONTRACT_ADDR $ADMIN_ADDR --output json |jq ".[] | length"
      env: ORDER_COUNT_AFTER
  verifiers:
    # Verify we should only see 3 orders
    - type: eval
      expr: ( ORDER_COUNT_AFTER - ORDER_COUNT_BEFORE ) == 3
