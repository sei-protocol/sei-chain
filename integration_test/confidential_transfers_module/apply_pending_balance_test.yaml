# Tests for applying pending balances to confidential token accounts. These tests follow the initialize_account test and the deposit_test, relying on the account being set up and having a pending balance.
- name: Test applying pending balance to confidential token account
  inputs:
    # Setup test account
    - cmd: printf "12345678\n" | seid keys add ctapplytest
    - cmd: printf "12345678\n" | seid keys show -a admin
      env: ADMIN_ADDR
    - cmd: printf "12345678\n" | seid keys show -a ctapplytest
      env: TEST_ADDR
    - cmd: printf "12345678\n" | seid tx bank send $ADMIN_ADDR $TEST_ADDR 1sei -b block --fees 2000usei --chain-id sei -y --output json | jq -r ".code"
    - cmd: printf "12345678\n" | seid tx bank send $ADMIN_ADDR $TEST_ADDR 100000000uatom -b block --fees 2000usei --chain-id sei -y --output json | jq -r ".code"

    # Initialize confidential token account for denom uatom
    - cmd: printf "12345678\n" | seid tx ct init-account uatom --from ctapplytest --fees 4000usei --chain-id sei -b block -y --output json | jq -r ".code"
      env: INIT_ACCOUNT_CODE

    # Deposit to the confidential token account
    - cmd: printf "12345678\n" | seid tx ct deposit 500000uatom --from ctapplytest --fees 4000usei --chain-id sei -b block -y --output json | jq -r ".code"
      env: DEPOSIT_CODE

    # Query the initial account state
    - cmd: printf "12345678\n" | seid q ct account uatom $TEST_ADDR --decryptor ctapplytest --output json
      env: INITIAL_ACCOUNT_STATE
    - cmd: echo $INITIAL_ACCOUNT_STATE | jq -r ".combined_pending_balance"
      env: INITIAL_PENDING_BALANCE
    - cmd: echo $(( $(echo $INITIAL_ACCOUNT_STATE | jq -r ".decryptable_available_balance") )) # Convert to integer
      env: INITIAL_AVAILABLE_BALANCE

    # Apply pending balance
    - cmd: printf "12345678\n" | seid tx ct apply-pending-balance uatom --from ctapplytest --fees 4000usei --chain-id sei -b block -y --output json | jq -r ".code"
      env: APPLY_PENDING_BALANCE_CODE

    # Query the account to verify the available balance
    - cmd: printf "12345678\n" | seid q ct account uatom $TEST_ADDR --decryptor ctapplytest --output json
      env: FINAL_ACCOUNT_STATE
    - cmd: echo $FINAL_ACCOUNT_STATE | jq -r ".combined_pending_balance"
      env: FINAL_PENDING_BALANCE
    - cmd: echo $FINAL_ACCOUNT_STATE | jq -r ".pending_balance_credit_counter"
      env: FINAL_PENDING_BALANCE_COUNTER
    - cmd: echo $(( $(echo $FINAL_ACCOUNT_STATE | jq -r ".decryptable_available_balance") )) # Convert to integer
      env: FINAL_AVAILABLE_BALANCE

  verifiers:
    # Verify that the setup was successful
    - type: eval
      expr: INIT_ACCOUNT_CODE == 0 or INIT_ACCOUNT_CODE == 38

    # Verify that the setup deposit was successful
    - type: eval
      expr: DEPOSIT_CODE == 0

    # Verify that the apply pending balance was successful
    - type: eval
      expr: APPLY_PENDING_BALANCE_CODE == 0

    # Verify that the available balance increased by the deposit amount
    - type: eval
      expr: FINAL_AVAILABLE_BALANCE - INITIAL_AVAILABLE_BALANCE - INITIAL_PENDING_BALANCE == 0

    # Verify that the pending balance is now 0
    - type: eval
      expr: FINAL_PENDING_BALANCE == 0

    # Verify that the pending balance counter is set to 0
    - type: eval
      expr: FINAL_PENDING_BALANCE_COUNTER == 0

- name: Test applying pending balance with no pending balance
  inputs:
    # Setup test account
    - cmd: printf "12345678\n" | seid keys show -a admin
      env: ADMIN_ADDR
    - cmd: printf "12345678\n" | seid keys show -a ctapplytest
      env: TEST_ADDR

    # Apply pending balance with no pending balance
    - cmd: printf "12345678\n" | seid tx ct apply-pending-balance uatom --from ctapplytest --fees 4000usei --chain-id sei -b block -y --output json | jq -r ".code"
      env: APPLY_PENDING_BALANCE_CODE

  verifiers:
    # Verify that the apply pending balance was unsuccessful
    - type: eval
      expr: APPLY_PENDING_BALANCE_CODE != 0

- name: Test applying pending balance to uninitialized account
  inputs:
    # Setup test account
    - cmd: printf "12345678\n" | seid keys show -a admin
      env: ADMIN_ADDR
    - cmd: printf "12345678\n" | seid keys show -a ctapplytest
      env: TEST_ADDR

    # Attempt to apply pending balance to uninitialized account
    - cmd: printf "12345678\n" | seid tx ct apply-pending-balance notexists --from ctapplytest --fees 4000usei --chain-id sei -b block -y --output json | jq -r ".code"
      env: APPLY_PENDING_BALANCE_CODE

  verifiers:
    # Verify that the apply pending balance was unsuccessful
    - type: eval
      expr: APPLY_PENDING_BALANCE_CODE != 0

- name: Test applying pending balances on confidential token account via precompile
  inputs:
    # Setup test account
    - cmd: printf "12345678\n" | seid keys add ctprapply
    - cmd: printf "12345678\n" | seid keys show -a admin
      env: ADMIN_ADDR
    - cmd: printf "12345678\n" | seid keys show -a ctprapply
      env: TEST_PRECOMPILE_ADDR
    - cmd: printf "12345678\n" | seid tx bank send $ADMIN_ADDR $TEST_PRECOMPILE_ADDR 10sei -b block --fees 2000usei --chain-id sei -y --output json | jq -r ".code"
    - cmd: printf "12345678\n" | seid tx bank send $ADMIN_ADDR $TEST_PRECOMPILE_ADDR 20000uatom -b block --fees 2000usei --chain-id sei -y --output json | jq -r ".code"

    # Initialize confidential token account for denom uatom for ctprapply
    - cmd: printf "12345678\n" | seid tx ct init-account uatom --from ctprapply --fees 4000usei --chain-id sei -b block -y --output json | jq -r ".code"
      env: INIT_ACCOUNT_CODE

    # Deposit to the confidential token account
    - cmd: printf "12345678\n" | seid tx ct deposit 10000uatom --from ctprapply --fees 4000usei --chain-id sei -b block -y --output json | jq -r ".code"
      env: DEPOSIT_CODE

    # Query the initial account state
    - cmd: printf "12345678\n" | seid q ct account uatom $TEST_PRECOMPILE_ADDR --decryptor ctprapply --output json
      env: INITIAL_ACCOUNT_STATE
    - cmd: echo $INITIAL_ACCOUNT_STATE | jq -r ".combined_pending_balance"
      env: INITIAL_PENDING_BALANCE
    - cmd: echo $(( $(echo $INITIAL_ACCOUNT_STATE | jq -r ".decryptable_available_balance") )) # Convert to integer
      env: INITIAL_AVAILABLE_BALANCE

    # Apply Pending Balances on the confidential token account via precompile
    - cmd: |
        printf "12345678\n" | seid tx evm call-contract --from ctprapply --fees=40000usei --gas=2000000 0x0000000000000000000000000000000000001010 -b block "$(printf "12345678\n" | seid q evm ct-apply-pending-balance-payload precompiles/confidentialtransfers/abi.json $TEST_PRECOMPILE_ADDR uatom)" | sed "s/.*: //"
      env: TX_HASH
    - cmd: sleep 2
    # Query the Cosmos tx hash
    - cmd: |
        curl --location --request GET "localhost:8545/" --header "Content-Type: application/json" --data "{\"jsonrpc\":\"2.0\",\"method\":\"sei_getCosmosTx\",\"params\":[\"$TX_HASH\"],\"id\":788}" | jq -r ".result"
      env: COSMOS_TX_HASH

    # Query the Cosmos tx result
    - cmd: seid q tx $COSMOS_TX_HASH --output json | jq -r ".code"
      env: APPLY_PENDING_BALANCE_CODE

    # Query the account to verify the new account state
    - cmd: printf "12345678\n" | seid q ct account uatom $TEST_PRECOMPILE_ADDR --decryptor ctprapply --output json
      env: FINAL_ACCOUNT_STATE
    - cmd: echo $FINAL_ACCOUNT_STATE | jq -r ".combined_pending_balance"
      env: FINAL_PENDING_BALANCE
    - cmd: echo $FINAL_ACCOUNT_STATE | jq -r ".pending_balance_credit_counter"
      env: FINAL_PENDING_BALANCE_COUNTER
    - cmd: echo $FINAL_ACCOUNT_STATE | jq -r ".decryptable_available_balance"
      env: FINAL_AVAILABLE_BALANCE

  verifiers:
    # Verify that the account exists after the instruction is executed.
    - type: eval
      expr: INIT_ACCOUNT_CODE == 0 or INIT_ACCOUNT_CODE == 38

    # Verify that the deposit was successful
    - type: eval
      expr: DEPOSIT_CODE == 0

    # Verify that the deposit was successful
    - type: eval
      expr: APPLY_PENDING_BALANCE_CODE == 0

    # Verify that the pending balance is now 0.
    - type: eval
      expr: FINAL_PENDING_BALANCE == 0

    # Verify that the pending balance counter is 0
    - type: eval
      expr: FINAL_PENDING_BALANCE_COUNTER == 0

    # Verify that the available balance is the sum of the initial pending balance and initial available balance
    - type: eval
      expr: INITIAL_AVAILABLE_BALANCE + INITIAL_PENDING_BALANCE == FINAL_AVAILABLE_BALANCE