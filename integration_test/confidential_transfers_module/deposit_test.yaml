# Tests for depositing to confidential token accounts. These tests depend on initialize_account_tests running and passing.
- name: Test depositing to confidential token account
  inputs:
    # Setup test account
    - cmd: printf "12345678\n" | seid keys add ctdeposittest
    - cmd: printf "12345678\n" | seid keys show -a admin
      env: ADMIN_ADDR
    - cmd: printf "12345678\n" | seid keys show -a ctdeposittest
      env: TEST_ADDR
    - cmd: printf "12345678\n" | seid tx bank send $ADMIN_ADDR $TEST_ADDR 100000000uatom -b block --fees 2000usei --chain-id sei -y --output json | jq -r ".code"
    - cmd: printf "12345678\n" | seid tx bank send $ADMIN_ADDR $TEST_ADDR 1sei -b block --fees 2000usei --chain-id sei -y --output json | jq -r ".code"

    # Initialize confidential token account for denom uatom for admin
    - cmd: printf "12345678\n" | seid tx ct init-account uatom --from ctdeposittest --fees 4000usei --chain-id sei -b block -y --output json | jq -r ".code"
      env: INIT_ACCOUNT_CODE

    # Query the initial account state
    - cmd: printf "12345678\n" | seid q ct account uatom $TEST_ADDR --decryptor ctdeposittest --output json
      env: INITIAL_ACCOUNT_STATE
    - cmd: echo $INITIAL_ACCOUNT_STATE | jq -r ".combined_pending_balance"
      env: INITIAL_PENDING_BALANCE
    - cmd: echo $INITIAL_ACCOUNT_STATE | jq -r ".pending_balance_credit_counter"
      env: INITIAL_PENDING_BALANCE_COUNTER
    - cmd: echo $INITIAL_ACCOUNT_STATE | jq -r ".decryptable_available_balance"
      env: INITIAL_AVAILABLE_BALANCE

    # Query the initial bank balance
    - cmd: seid q bank balances $TEST_ADDR --denom uatom --output json | jq -r ".amount"
      env: INITIAL_BANK_BALANCE

    # Deposit to the confidential token account
    - cmd: printf "12345678\n" | seid tx ct deposit 500000uatom --from ctdeposittest --fees 4000usei --chain-id sei -b block -y --output json | jq -r ".code"
      env: DEPOSIT_CODE

    # Query the account to verify the new account state
    - cmd: printf "12345678\n" | seid q ct account uatom $TEST_ADDR --decryptor ctdeposittest --output json
      env: FINAL_ACCOUNT_STATE
    - cmd: echo $FINAL_ACCOUNT_STATE | jq -r ".combined_pending_balance"
      env: FINAL_PENDING_BALANCE
    - cmd: echo $FINAL_ACCOUNT_STATE | jq -r ".pending_balance_credit_counter"
      env: FINAL_PENDING_BALANCE_COUNTER
    - cmd: echo $FINAL_ACCOUNT_STATE | jq -r ".decryptable_available_balance"
      env: FINAL_AVAILABLE_BALANCE

    # Query the bank balance after deposit
    - cmd: seid q bank balances $TEST_ADDR --denom uatom --output json | jq -r ".amount"
      env: FINAL_BANK_BALANCE

  verifiers:
    # Verify that the account exists after the instruction is executed.
    - type: eval
      expr: INIT_ACCOUNT_CODE == 0 or INIT_ACCOUNT_CODE == 38

    # Verify that the deposit was successful
    - type: eval
      expr: DEPOSIT_CODE == 0

    # Verify that the pending balance increased by the deposit amount
    - type: eval
      expr: FINAL_PENDING_BALANCE - INITIAL_PENDING_BALANCE == 500000

    # Verify that the pending balance counter increased by 1
    - type: eval
      expr: FINAL_PENDING_BALANCE_COUNTER - INITIAL_PENDING_BALANCE_COUNTER == 1

    # Verify that the available balance is untouched by this operation
    - type: eval
      expr: INITIAL_AVAILABLE_BALANCE == FINAL_AVAILABLE_BALANCE

    # Verify that the bank balance decreased by the deposit amount
    - type: eval
      expr: INITIAL_BANK_BALANCE - FINAL_BANK_BALANCE == 500000

- name: Test that depositing to a non-existent denom account fails
  inputs:
    # Setup test account
    - cmd: printf "12345678\n" | seid keys show -a admin
      env: ADMIN_ADDR
    - cmd: printf "12345678\n" | seid keys show -a ctdeposittest
      env: TEST_ADDR

    # Deposit to the confidential token account
    - cmd: printf "12345678\n" | seid tx ct deposit 500000notexists --from ctdeposittest --fees 4000usei --chain-id sei -b block -y --output json | jq -r ".code"
      env: DEPOSIT_CODE

  verifiers:
    # Verify that the deposit was unsuccessful
    - type: eval
      expr: DEPOSIT_CODE == 38

- name: Test that depositing more funds than available in the bank account fails
  inputs:
    # Setup test account
    - cmd: printf "12345678\n" | seid keys show -a admin
      env: ADMIN_ADDR
    - cmd: printf "12345678\n" | seid keys show -a ctdeposittest
      env: TEST_ADDR

    # Query the initial bank balance
    - cmd: seid q bank balances $TEST_ADDR --denom uatom --output json | jq -r ".amount"
      env: INITIAL_BANK_BALANCE

    # Set the deposit amount
    - cmd: echo $((INITIAL_BANK_BALANCE + 1))
      env: DEPOSIT_AMOUNT

    # Attempt to deposit to the confidential token account
    - cmd: printf "12345678\n" | seid tx ct deposit ${DEPOSIT_AMOUNT}uatom --from ctdeposittest --fees 4000usei --chain-id sei -b block -y --output json | jq -r ".code"
      env: DEPOSIT_CODE

  verifiers:
    # Verify that the deposit was unsuccessful due to insufficient funds
    - type: eval
      expr: DEPOSIT_CODE == 5

- name: Test that depositing more than a 48 bit number is not allowed
  inputs:
    # Setup test account
    - cmd: printf "12345678\n" | seid keys show -a admin
      env: ADMIN_ADDR
    - cmd: printf "12345678\n" | seid keys show -a ctdeposittest
      env: TEST_ADDR

    # Initialize confidential token account for different denom uusdc for ctdeposittest
    - cmd: printf "12345678\n" | seid tx ct init-account uusdc --from ctdeposittest --fees 4000usei --chain-id sei -b block -y --output json | jq -r ".code"
      env: INIT_ACCOUNT_CODE_USDC

    # Send the test account sufficient funds to make the large transfer
    - cmd: printf "12345678\n" | seid tx bank send $ADMIN_ADDR $TEST_ADDR 10000000000000000uusdc -b block --fees 2000usei --chain-id sei -y --output json | jq -r ".code"

    # Attempt to deposit 2^48 to the confidential token account
    - cmd: printf "12345678\n" | seid tx ct deposit 281474976710656uusdc --from ctdeposittest --fees 4000usei --chain-id sei -b block -y --output json | jq -r ".code"
      env: DEPOSIT_CODE

  verifiers:
    # Verify that the account exists after the instruction is executed.
    - type: eval
      expr: INIT_ACCOUNT_CODE_USDC == 0 or INIT_ACCOUNT_CODE_USDC == 38

    # Verify that the deposit was unsuccessful
    - type: eval
      expr: DEPOSIT_CODE == 18
